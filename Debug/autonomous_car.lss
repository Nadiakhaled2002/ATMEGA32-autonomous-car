
autonomous_car.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004428  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000122  00800060  00004428  000044bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001c  00800182  00800182  000045de  2**0
                  ALLOC
  3 .stab         000036b4  00000000  00000000  000045e0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000e50  00000000  00000000  00007c94  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001c0  00000000  00000000  00008ae4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000210  00000000  00000000  00008ca4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000268a  00000000  00000000  00008eb4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000014e0  00000000  00000000  0000b53e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000012a9  00000000  00000000  0000ca1e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001e0  00000000  00000000  0000dcc8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002fe  00000000  00000000  0000dea8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000009aa  00000000  00000000  0000e1a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000eb50  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 d2 1e 	jmp	0x3da4	; 0x3da4 <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 b5 1e 	jmp	0x3d6a	; 0x3d6a <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e2       	ldi	r30, 0x28	; 40
      68:	f4 e4       	ldi	r31, 0x44	; 68
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 38       	cpi	r26, 0x82	; 130
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a2 e8       	ldi	r26, 0x82	; 130
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ae 39       	cpi	r26, 0x9E	; 158
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 29 1f 	call	0x3e52	; 0x3e52 <main>
      8a:	0c 94 12 22 	jmp	0x4424	; 0x4424 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 85 04 	call	0x90a	; 0x90a <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 85 04 	call	0x90a	; 0x90a <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 db 21 	jmp	0x43b6	; 0x43b6 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a9 e7       	ldi	r26, 0x79	; 121
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 f7 21 	jmp	0x43ee	; 0x43ee <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 e7 21 	jmp	0x43ce	; 0x43ce <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a1 05 	call	0xb42	; 0xb42 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 03 22 	jmp	0x4406	; 0x4406 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 e7 21 	jmp	0x43ce	; 0x43ce <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a1 05 	call	0xb42	; 0xb42 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 03 22 	jmp	0x4406	; 0x4406 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 db 21 	jmp	0x43b6	; 0x43b6 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	89 e7       	ldi	r24, 0x79	; 121
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a1 05 	call	0xb42	; 0xb42 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 f7 21 	jmp	0x43ee	; 0x43ee <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 e3 21 	jmp	0x43c6	; 0x43c6 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	69 e7       	ldi	r22, 0x79	; 121
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a1 05 	call	0xb42	; 0xb42 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 ff 21 	jmp	0x43fe	; 0x43fe <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 e7 21 	jmp	0x43ce	; 0x43ce <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 ee 06 	call	0xddc	; 0xddc <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 03 22 	jmp	0x4406	; 0x4406 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 e7 21 	jmp	0x43ce	; 0x43ce <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 ee 06 	call	0xddc	; 0xddc <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 03 22 	jmp	0x4406	; 0x4406 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 e7 21 	jmp	0x43ce	; 0x43ce <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 ee 06 	call	0xddc	; 0xddc <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 03 22 	jmp	0x4406	; 0x4406 <__epilogue_restores__+0x18>

000008aa <__lesf2>:
     8aa:	a8 e1       	ldi	r26, 0x18	; 24
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 e7 21 	jmp	0x43ce	; 0x43ce <__prologue_saves__+0x18>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	2d 83       	std	Y+5, r18	; 0x05
     8c0:	3e 83       	std	Y+6, r19	; 0x06
     8c2:	4f 83       	std	Y+7, r20	; 0x07
     8c4:	58 87       	std	Y+8, r21	; 0x08
     8c6:	89 e0       	ldi	r24, 0x09	; 9
     8c8:	e8 2e       	mov	r14, r24
     8ca:	f1 2c       	mov	r15, r1
     8cc:	ec 0e       	add	r14, r28
     8ce:	fd 1e       	adc	r15, r29
     8d0:	ce 01       	movw	r24, r28
     8d2:	01 96       	adiw	r24, 0x01	; 1
     8d4:	b7 01       	movw	r22, r14
     8d6:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     8da:	8e 01       	movw	r16, r28
     8dc:	0f 5e       	subi	r16, 0xEF	; 239
     8de:	1f 4f       	sbci	r17, 0xFF	; 255
     8e0:	ce 01       	movw	r24, r28
     8e2:	05 96       	adiw	r24, 0x05	; 5
     8e4:	b8 01       	movw	r22, r16
     8e6:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     8ea:	89 85       	ldd	r24, Y+9	; 0x09
     8ec:	82 30       	cpi	r24, 0x02	; 2
     8ee:	40 f0       	brcs	.+16     	; 0x900 <__lesf2+0x56>
     8f0:	89 89       	ldd	r24, Y+17	; 0x11
     8f2:	82 30       	cpi	r24, 0x02	; 2
     8f4:	28 f0       	brcs	.+10     	; 0x900 <__lesf2+0x56>
     8f6:	c7 01       	movw	r24, r14
     8f8:	b8 01       	movw	r22, r16
     8fa:	0e 94 ee 06 	call	0xddc	; 0xddc <__fpcmp_parts_f>
     8fe:	01 c0       	rjmp	.+2      	; 0x902 <__lesf2+0x58>
     900:	81 e0       	ldi	r24, 0x01	; 1
     902:	68 96       	adiw	r28, 0x18	; 24
     904:	e6 e0       	ldi	r30, 0x06	; 6
     906:	0c 94 03 22 	jmp	0x4406	; 0x4406 <__epilogue_restores__+0x18>

0000090a <__fixsfsi>:
     90a:	ac e0       	ldi	r26, 0x0C	; 12
     90c:	b0 e0       	ldi	r27, 0x00	; 0
     90e:	eb e8       	ldi	r30, 0x8B	; 139
     910:	f4 e0       	ldi	r31, 0x04	; 4
     912:	0c 94 eb 21 	jmp	0x43d6	; 0x43d6 <__prologue_saves__+0x20>
     916:	69 83       	std	Y+1, r22	; 0x01
     918:	7a 83       	std	Y+2, r23	; 0x02
     91a:	8b 83       	std	Y+3, r24	; 0x03
     91c:	9c 83       	std	Y+4, r25	; 0x04
     91e:	ce 01       	movw	r24, r28
     920:	01 96       	adiw	r24, 0x01	; 1
     922:	be 01       	movw	r22, r28
     924:	6b 5f       	subi	r22, 0xFB	; 251
     926:	7f 4f       	sbci	r23, 0xFF	; 255
     928:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     92c:	8d 81       	ldd	r24, Y+5	; 0x05
     92e:	82 30       	cpi	r24, 0x02	; 2
     930:	61 f1       	breq	.+88     	; 0x98a <__fixsfsi+0x80>
     932:	82 30       	cpi	r24, 0x02	; 2
     934:	50 f1       	brcs	.+84     	; 0x98a <__fixsfsi+0x80>
     936:	84 30       	cpi	r24, 0x04	; 4
     938:	21 f4       	brne	.+8      	; 0x942 <__fixsfsi+0x38>
     93a:	8e 81       	ldd	r24, Y+6	; 0x06
     93c:	88 23       	and	r24, r24
     93e:	51 f1       	breq	.+84     	; 0x994 <__fixsfsi+0x8a>
     940:	2e c0       	rjmp	.+92     	; 0x99e <__fixsfsi+0x94>
     942:	2f 81       	ldd	r18, Y+7	; 0x07
     944:	38 85       	ldd	r19, Y+8	; 0x08
     946:	37 fd       	sbrc	r19, 7
     948:	20 c0       	rjmp	.+64     	; 0x98a <__fixsfsi+0x80>
     94a:	6e 81       	ldd	r22, Y+6	; 0x06
     94c:	2f 31       	cpi	r18, 0x1F	; 31
     94e:	31 05       	cpc	r19, r1
     950:	1c f0       	brlt	.+6      	; 0x958 <__fixsfsi+0x4e>
     952:	66 23       	and	r22, r22
     954:	f9 f0       	breq	.+62     	; 0x994 <__fixsfsi+0x8a>
     956:	23 c0       	rjmp	.+70     	; 0x99e <__fixsfsi+0x94>
     958:	8e e1       	ldi	r24, 0x1E	; 30
     95a:	90 e0       	ldi	r25, 0x00	; 0
     95c:	82 1b       	sub	r24, r18
     95e:	93 0b       	sbc	r25, r19
     960:	29 85       	ldd	r18, Y+9	; 0x09
     962:	3a 85       	ldd	r19, Y+10	; 0x0a
     964:	4b 85       	ldd	r20, Y+11	; 0x0b
     966:	5c 85       	ldd	r21, Y+12	; 0x0c
     968:	04 c0       	rjmp	.+8      	; 0x972 <__fixsfsi+0x68>
     96a:	56 95       	lsr	r21
     96c:	47 95       	ror	r20
     96e:	37 95       	ror	r19
     970:	27 95       	ror	r18
     972:	8a 95       	dec	r24
     974:	d2 f7       	brpl	.-12     	; 0x96a <__fixsfsi+0x60>
     976:	66 23       	and	r22, r22
     978:	b1 f0       	breq	.+44     	; 0x9a6 <__fixsfsi+0x9c>
     97a:	50 95       	com	r21
     97c:	40 95       	com	r20
     97e:	30 95       	com	r19
     980:	21 95       	neg	r18
     982:	3f 4f       	sbci	r19, 0xFF	; 255
     984:	4f 4f       	sbci	r20, 0xFF	; 255
     986:	5f 4f       	sbci	r21, 0xFF	; 255
     988:	0e c0       	rjmp	.+28     	; 0x9a6 <__fixsfsi+0x9c>
     98a:	20 e0       	ldi	r18, 0x00	; 0
     98c:	30 e0       	ldi	r19, 0x00	; 0
     98e:	40 e0       	ldi	r20, 0x00	; 0
     990:	50 e0       	ldi	r21, 0x00	; 0
     992:	09 c0       	rjmp	.+18     	; 0x9a6 <__fixsfsi+0x9c>
     994:	2f ef       	ldi	r18, 0xFF	; 255
     996:	3f ef       	ldi	r19, 0xFF	; 255
     998:	4f ef       	ldi	r20, 0xFF	; 255
     99a:	5f e7       	ldi	r21, 0x7F	; 127
     99c:	04 c0       	rjmp	.+8      	; 0x9a6 <__fixsfsi+0x9c>
     99e:	20 e0       	ldi	r18, 0x00	; 0
     9a0:	30 e0       	ldi	r19, 0x00	; 0
     9a2:	40 e0       	ldi	r20, 0x00	; 0
     9a4:	50 e8       	ldi	r21, 0x80	; 128
     9a6:	b9 01       	movw	r22, r18
     9a8:	ca 01       	movw	r24, r20
     9aa:	2c 96       	adiw	r28, 0x0c	; 12
     9ac:	e2 e0       	ldi	r30, 0x02	; 2
     9ae:	0c 94 07 22 	jmp	0x440e	; 0x440e <__epilogue_restores__+0x20>

000009b2 <__floatunsisf>:
     9b2:	a8 e0       	ldi	r26, 0x08	; 8
     9b4:	b0 e0       	ldi	r27, 0x00	; 0
     9b6:	ef ed       	ldi	r30, 0xDF	; 223
     9b8:	f4 e0       	ldi	r31, 0x04	; 4
     9ba:	0c 94 e3 21 	jmp	0x43c6	; 0x43c6 <__prologue_saves__+0x10>
     9be:	7b 01       	movw	r14, r22
     9c0:	8c 01       	movw	r16, r24
     9c2:	61 15       	cp	r22, r1
     9c4:	71 05       	cpc	r23, r1
     9c6:	81 05       	cpc	r24, r1
     9c8:	91 05       	cpc	r25, r1
     9ca:	19 f4       	brne	.+6      	; 0x9d2 <__floatunsisf+0x20>
     9cc:	82 e0       	ldi	r24, 0x02	; 2
     9ce:	89 83       	std	Y+1, r24	; 0x01
     9d0:	60 c0       	rjmp	.+192    	; 0xa92 <__floatunsisf+0xe0>
     9d2:	83 e0       	ldi	r24, 0x03	; 3
     9d4:	89 83       	std	Y+1, r24	; 0x01
     9d6:	8e e1       	ldi	r24, 0x1E	; 30
     9d8:	c8 2e       	mov	r12, r24
     9da:	d1 2c       	mov	r13, r1
     9dc:	dc 82       	std	Y+4, r13	; 0x04
     9de:	cb 82       	std	Y+3, r12	; 0x03
     9e0:	ed 82       	std	Y+5, r14	; 0x05
     9e2:	fe 82       	std	Y+6, r15	; 0x06
     9e4:	0f 83       	std	Y+7, r16	; 0x07
     9e6:	18 87       	std	Y+8, r17	; 0x08
     9e8:	c8 01       	movw	r24, r16
     9ea:	b7 01       	movw	r22, r14
     9ec:	0e 94 52 05 	call	0xaa4	; 0xaa4 <__clzsi2>
     9f0:	fc 01       	movw	r30, r24
     9f2:	31 97       	sbiw	r30, 0x01	; 1
     9f4:	f7 ff       	sbrs	r31, 7
     9f6:	3b c0       	rjmp	.+118    	; 0xa6e <__floatunsisf+0xbc>
     9f8:	22 27       	eor	r18, r18
     9fa:	33 27       	eor	r19, r19
     9fc:	2e 1b       	sub	r18, r30
     9fe:	3f 0b       	sbc	r19, r31
     a00:	57 01       	movw	r10, r14
     a02:	68 01       	movw	r12, r16
     a04:	02 2e       	mov	r0, r18
     a06:	04 c0       	rjmp	.+8      	; 0xa10 <__floatunsisf+0x5e>
     a08:	d6 94       	lsr	r13
     a0a:	c7 94       	ror	r12
     a0c:	b7 94       	ror	r11
     a0e:	a7 94       	ror	r10
     a10:	0a 94       	dec	r0
     a12:	d2 f7       	brpl	.-12     	; 0xa08 <__floatunsisf+0x56>
     a14:	40 e0       	ldi	r20, 0x00	; 0
     a16:	50 e0       	ldi	r21, 0x00	; 0
     a18:	60 e0       	ldi	r22, 0x00	; 0
     a1a:	70 e0       	ldi	r23, 0x00	; 0
     a1c:	81 e0       	ldi	r24, 0x01	; 1
     a1e:	90 e0       	ldi	r25, 0x00	; 0
     a20:	a0 e0       	ldi	r26, 0x00	; 0
     a22:	b0 e0       	ldi	r27, 0x00	; 0
     a24:	04 c0       	rjmp	.+8      	; 0xa2e <__floatunsisf+0x7c>
     a26:	88 0f       	add	r24, r24
     a28:	99 1f       	adc	r25, r25
     a2a:	aa 1f       	adc	r26, r26
     a2c:	bb 1f       	adc	r27, r27
     a2e:	2a 95       	dec	r18
     a30:	d2 f7       	brpl	.-12     	; 0xa26 <__floatunsisf+0x74>
     a32:	01 97       	sbiw	r24, 0x01	; 1
     a34:	a1 09       	sbc	r26, r1
     a36:	b1 09       	sbc	r27, r1
     a38:	8e 21       	and	r24, r14
     a3a:	9f 21       	and	r25, r15
     a3c:	a0 23       	and	r26, r16
     a3e:	b1 23       	and	r27, r17
     a40:	00 97       	sbiw	r24, 0x00	; 0
     a42:	a1 05       	cpc	r26, r1
     a44:	b1 05       	cpc	r27, r1
     a46:	21 f0       	breq	.+8      	; 0xa50 <__floatunsisf+0x9e>
     a48:	41 e0       	ldi	r20, 0x01	; 1
     a4a:	50 e0       	ldi	r21, 0x00	; 0
     a4c:	60 e0       	ldi	r22, 0x00	; 0
     a4e:	70 e0       	ldi	r23, 0x00	; 0
     a50:	4a 29       	or	r20, r10
     a52:	5b 29       	or	r21, r11
     a54:	6c 29       	or	r22, r12
     a56:	7d 29       	or	r23, r13
     a58:	4d 83       	std	Y+5, r20	; 0x05
     a5a:	5e 83       	std	Y+6, r21	; 0x06
     a5c:	6f 83       	std	Y+7, r22	; 0x07
     a5e:	78 87       	std	Y+8, r23	; 0x08
     a60:	8e e1       	ldi	r24, 0x1E	; 30
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	8e 1b       	sub	r24, r30
     a66:	9f 0b       	sbc	r25, r31
     a68:	9c 83       	std	Y+4, r25	; 0x04
     a6a:	8b 83       	std	Y+3, r24	; 0x03
     a6c:	12 c0       	rjmp	.+36     	; 0xa92 <__floatunsisf+0xe0>
     a6e:	30 97       	sbiw	r30, 0x00	; 0
     a70:	81 f0       	breq	.+32     	; 0xa92 <__floatunsisf+0xe0>
     a72:	0e 2e       	mov	r0, r30
     a74:	04 c0       	rjmp	.+8      	; 0xa7e <__floatunsisf+0xcc>
     a76:	ee 0c       	add	r14, r14
     a78:	ff 1c       	adc	r15, r15
     a7a:	00 1f       	adc	r16, r16
     a7c:	11 1f       	adc	r17, r17
     a7e:	0a 94       	dec	r0
     a80:	d2 f7       	brpl	.-12     	; 0xa76 <__floatunsisf+0xc4>
     a82:	ed 82       	std	Y+5, r14	; 0x05
     a84:	fe 82       	std	Y+6, r15	; 0x06
     a86:	0f 83       	std	Y+7, r16	; 0x07
     a88:	18 87       	std	Y+8, r17	; 0x08
     a8a:	ce 1a       	sub	r12, r30
     a8c:	df 0a       	sbc	r13, r31
     a8e:	dc 82       	std	Y+4, r13	; 0x04
     a90:	cb 82       	std	Y+3, r12	; 0x03
     a92:	1a 82       	std	Y+2, r1	; 0x02
     a94:	ce 01       	movw	r24, r28
     a96:	01 96       	adiw	r24, 0x01	; 1
     a98:	0e 94 a1 05 	call	0xb42	; 0xb42 <__pack_f>
     a9c:	28 96       	adiw	r28, 0x08	; 8
     a9e:	ea e0       	ldi	r30, 0x0A	; 10
     aa0:	0c 94 ff 21 	jmp	0x43fe	; 0x43fe <__epilogue_restores__+0x10>

00000aa4 <__clzsi2>:
     aa4:	ef 92       	push	r14
     aa6:	ff 92       	push	r15
     aa8:	0f 93       	push	r16
     aaa:	1f 93       	push	r17
     aac:	7b 01       	movw	r14, r22
     aae:	8c 01       	movw	r16, r24
     ab0:	80 e0       	ldi	r24, 0x00	; 0
     ab2:	e8 16       	cp	r14, r24
     ab4:	80 e0       	ldi	r24, 0x00	; 0
     ab6:	f8 06       	cpc	r15, r24
     ab8:	81 e0       	ldi	r24, 0x01	; 1
     aba:	08 07       	cpc	r16, r24
     abc:	80 e0       	ldi	r24, 0x00	; 0
     abe:	18 07       	cpc	r17, r24
     ac0:	88 f4       	brcc	.+34     	; 0xae4 <__clzsi2+0x40>
     ac2:	8f ef       	ldi	r24, 0xFF	; 255
     ac4:	e8 16       	cp	r14, r24
     ac6:	f1 04       	cpc	r15, r1
     ac8:	01 05       	cpc	r16, r1
     aca:	11 05       	cpc	r17, r1
     acc:	31 f0       	breq	.+12     	; 0xada <__clzsi2+0x36>
     ace:	28 f0       	brcs	.+10     	; 0xada <__clzsi2+0x36>
     ad0:	88 e0       	ldi	r24, 0x08	; 8
     ad2:	90 e0       	ldi	r25, 0x00	; 0
     ad4:	a0 e0       	ldi	r26, 0x00	; 0
     ad6:	b0 e0       	ldi	r27, 0x00	; 0
     ad8:	17 c0       	rjmp	.+46     	; 0xb08 <__clzsi2+0x64>
     ada:	80 e0       	ldi	r24, 0x00	; 0
     adc:	90 e0       	ldi	r25, 0x00	; 0
     ade:	a0 e0       	ldi	r26, 0x00	; 0
     ae0:	b0 e0       	ldi	r27, 0x00	; 0
     ae2:	12 c0       	rjmp	.+36     	; 0xb08 <__clzsi2+0x64>
     ae4:	80 e0       	ldi	r24, 0x00	; 0
     ae6:	e8 16       	cp	r14, r24
     ae8:	80 e0       	ldi	r24, 0x00	; 0
     aea:	f8 06       	cpc	r15, r24
     aec:	80 e0       	ldi	r24, 0x00	; 0
     aee:	08 07       	cpc	r16, r24
     af0:	81 e0       	ldi	r24, 0x01	; 1
     af2:	18 07       	cpc	r17, r24
     af4:	28 f0       	brcs	.+10     	; 0xb00 <__clzsi2+0x5c>
     af6:	88 e1       	ldi	r24, 0x18	; 24
     af8:	90 e0       	ldi	r25, 0x00	; 0
     afa:	a0 e0       	ldi	r26, 0x00	; 0
     afc:	b0 e0       	ldi	r27, 0x00	; 0
     afe:	04 c0       	rjmp	.+8      	; 0xb08 <__clzsi2+0x64>
     b00:	80 e1       	ldi	r24, 0x10	; 16
     b02:	90 e0       	ldi	r25, 0x00	; 0
     b04:	a0 e0       	ldi	r26, 0x00	; 0
     b06:	b0 e0       	ldi	r27, 0x00	; 0
     b08:	20 e2       	ldi	r18, 0x20	; 32
     b0a:	30 e0       	ldi	r19, 0x00	; 0
     b0c:	40 e0       	ldi	r20, 0x00	; 0
     b0e:	50 e0       	ldi	r21, 0x00	; 0
     b10:	28 1b       	sub	r18, r24
     b12:	39 0b       	sbc	r19, r25
     b14:	4a 0b       	sbc	r20, r26
     b16:	5b 0b       	sbc	r21, r27
     b18:	04 c0       	rjmp	.+8      	; 0xb22 <__clzsi2+0x7e>
     b1a:	16 95       	lsr	r17
     b1c:	07 95       	ror	r16
     b1e:	f7 94       	ror	r15
     b20:	e7 94       	ror	r14
     b22:	8a 95       	dec	r24
     b24:	d2 f7       	brpl	.-12     	; 0xb1a <__clzsi2+0x76>
     b26:	f7 01       	movw	r30, r14
     b28:	ef 57       	subi	r30, 0x7F	; 127
     b2a:	ff 4f       	sbci	r31, 0xFF	; 255
     b2c:	80 81       	ld	r24, Z
     b2e:	28 1b       	sub	r18, r24
     b30:	31 09       	sbc	r19, r1
     b32:	41 09       	sbc	r20, r1
     b34:	51 09       	sbc	r21, r1
     b36:	c9 01       	movw	r24, r18
     b38:	1f 91       	pop	r17
     b3a:	0f 91       	pop	r16
     b3c:	ff 90       	pop	r15
     b3e:	ef 90       	pop	r14
     b40:	08 95       	ret

00000b42 <__pack_f>:
     b42:	df 92       	push	r13
     b44:	ef 92       	push	r14
     b46:	ff 92       	push	r15
     b48:	0f 93       	push	r16
     b4a:	1f 93       	push	r17
     b4c:	fc 01       	movw	r30, r24
     b4e:	e4 80       	ldd	r14, Z+4	; 0x04
     b50:	f5 80       	ldd	r15, Z+5	; 0x05
     b52:	06 81       	ldd	r16, Z+6	; 0x06
     b54:	17 81       	ldd	r17, Z+7	; 0x07
     b56:	d1 80       	ldd	r13, Z+1	; 0x01
     b58:	80 81       	ld	r24, Z
     b5a:	82 30       	cpi	r24, 0x02	; 2
     b5c:	48 f4       	brcc	.+18     	; 0xb70 <__pack_f+0x2e>
     b5e:	80 e0       	ldi	r24, 0x00	; 0
     b60:	90 e0       	ldi	r25, 0x00	; 0
     b62:	a0 e1       	ldi	r26, 0x10	; 16
     b64:	b0 e0       	ldi	r27, 0x00	; 0
     b66:	e8 2a       	or	r14, r24
     b68:	f9 2a       	or	r15, r25
     b6a:	0a 2b       	or	r16, r26
     b6c:	1b 2b       	or	r17, r27
     b6e:	a5 c0       	rjmp	.+330    	; 0xcba <__pack_f+0x178>
     b70:	84 30       	cpi	r24, 0x04	; 4
     b72:	09 f4       	brne	.+2      	; 0xb76 <__pack_f+0x34>
     b74:	9f c0       	rjmp	.+318    	; 0xcb4 <__pack_f+0x172>
     b76:	82 30       	cpi	r24, 0x02	; 2
     b78:	21 f4       	brne	.+8      	; 0xb82 <__pack_f+0x40>
     b7a:	ee 24       	eor	r14, r14
     b7c:	ff 24       	eor	r15, r15
     b7e:	87 01       	movw	r16, r14
     b80:	05 c0       	rjmp	.+10     	; 0xb8c <__pack_f+0x4a>
     b82:	e1 14       	cp	r14, r1
     b84:	f1 04       	cpc	r15, r1
     b86:	01 05       	cpc	r16, r1
     b88:	11 05       	cpc	r17, r1
     b8a:	19 f4       	brne	.+6      	; 0xb92 <__pack_f+0x50>
     b8c:	e0 e0       	ldi	r30, 0x00	; 0
     b8e:	f0 e0       	ldi	r31, 0x00	; 0
     b90:	96 c0       	rjmp	.+300    	; 0xcbe <__pack_f+0x17c>
     b92:	62 81       	ldd	r22, Z+2	; 0x02
     b94:	73 81       	ldd	r23, Z+3	; 0x03
     b96:	9f ef       	ldi	r25, 0xFF	; 255
     b98:	62 38       	cpi	r22, 0x82	; 130
     b9a:	79 07       	cpc	r23, r25
     b9c:	0c f0       	brlt	.+2      	; 0xba0 <__pack_f+0x5e>
     b9e:	5b c0       	rjmp	.+182    	; 0xc56 <__pack_f+0x114>
     ba0:	22 e8       	ldi	r18, 0x82	; 130
     ba2:	3f ef       	ldi	r19, 0xFF	; 255
     ba4:	26 1b       	sub	r18, r22
     ba6:	37 0b       	sbc	r19, r23
     ba8:	2a 31       	cpi	r18, 0x1A	; 26
     baa:	31 05       	cpc	r19, r1
     bac:	2c f0       	brlt	.+10     	; 0xbb8 <__pack_f+0x76>
     bae:	20 e0       	ldi	r18, 0x00	; 0
     bb0:	30 e0       	ldi	r19, 0x00	; 0
     bb2:	40 e0       	ldi	r20, 0x00	; 0
     bb4:	50 e0       	ldi	r21, 0x00	; 0
     bb6:	2a c0       	rjmp	.+84     	; 0xc0c <__pack_f+0xca>
     bb8:	b8 01       	movw	r22, r16
     bba:	a7 01       	movw	r20, r14
     bbc:	02 2e       	mov	r0, r18
     bbe:	04 c0       	rjmp	.+8      	; 0xbc8 <__pack_f+0x86>
     bc0:	76 95       	lsr	r23
     bc2:	67 95       	ror	r22
     bc4:	57 95       	ror	r21
     bc6:	47 95       	ror	r20
     bc8:	0a 94       	dec	r0
     bca:	d2 f7       	brpl	.-12     	; 0xbc0 <__pack_f+0x7e>
     bcc:	81 e0       	ldi	r24, 0x01	; 1
     bce:	90 e0       	ldi	r25, 0x00	; 0
     bd0:	a0 e0       	ldi	r26, 0x00	; 0
     bd2:	b0 e0       	ldi	r27, 0x00	; 0
     bd4:	04 c0       	rjmp	.+8      	; 0xbde <__pack_f+0x9c>
     bd6:	88 0f       	add	r24, r24
     bd8:	99 1f       	adc	r25, r25
     bda:	aa 1f       	adc	r26, r26
     bdc:	bb 1f       	adc	r27, r27
     bde:	2a 95       	dec	r18
     be0:	d2 f7       	brpl	.-12     	; 0xbd6 <__pack_f+0x94>
     be2:	01 97       	sbiw	r24, 0x01	; 1
     be4:	a1 09       	sbc	r26, r1
     be6:	b1 09       	sbc	r27, r1
     be8:	8e 21       	and	r24, r14
     bea:	9f 21       	and	r25, r15
     bec:	a0 23       	and	r26, r16
     bee:	b1 23       	and	r27, r17
     bf0:	00 97       	sbiw	r24, 0x00	; 0
     bf2:	a1 05       	cpc	r26, r1
     bf4:	b1 05       	cpc	r27, r1
     bf6:	21 f0       	breq	.+8      	; 0xc00 <__pack_f+0xbe>
     bf8:	81 e0       	ldi	r24, 0x01	; 1
     bfa:	90 e0       	ldi	r25, 0x00	; 0
     bfc:	a0 e0       	ldi	r26, 0x00	; 0
     bfe:	b0 e0       	ldi	r27, 0x00	; 0
     c00:	9a 01       	movw	r18, r20
     c02:	ab 01       	movw	r20, r22
     c04:	28 2b       	or	r18, r24
     c06:	39 2b       	or	r19, r25
     c08:	4a 2b       	or	r20, r26
     c0a:	5b 2b       	or	r21, r27
     c0c:	da 01       	movw	r26, r20
     c0e:	c9 01       	movw	r24, r18
     c10:	8f 77       	andi	r24, 0x7F	; 127
     c12:	90 70       	andi	r25, 0x00	; 0
     c14:	a0 70       	andi	r26, 0x00	; 0
     c16:	b0 70       	andi	r27, 0x00	; 0
     c18:	80 34       	cpi	r24, 0x40	; 64
     c1a:	91 05       	cpc	r25, r1
     c1c:	a1 05       	cpc	r26, r1
     c1e:	b1 05       	cpc	r27, r1
     c20:	39 f4       	brne	.+14     	; 0xc30 <__pack_f+0xee>
     c22:	27 ff       	sbrs	r18, 7
     c24:	09 c0       	rjmp	.+18     	; 0xc38 <__pack_f+0xf6>
     c26:	20 5c       	subi	r18, 0xC0	; 192
     c28:	3f 4f       	sbci	r19, 0xFF	; 255
     c2a:	4f 4f       	sbci	r20, 0xFF	; 255
     c2c:	5f 4f       	sbci	r21, 0xFF	; 255
     c2e:	04 c0       	rjmp	.+8      	; 0xc38 <__pack_f+0xf6>
     c30:	21 5c       	subi	r18, 0xC1	; 193
     c32:	3f 4f       	sbci	r19, 0xFF	; 255
     c34:	4f 4f       	sbci	r20, 0xFF	; 255
     c36:	5f 4f       	sbci	r21, 0xFF	; 255
     c38:	e0 e0       	ldi	r30, 0x00	; 0
     c3a:	f0 e0       	ldi	r31, 0x00	; 0
     c3c:	20 30       	cpi	r18, 0x00	; 0
     c3e:	a0 e0       	ldi	r26, 0x00	; 0
     c40:	3a 07       	cpc	r19, r26
     c42:	a0 e0       	ldi	r26, 0x00	; 0
     c44:	4a 07       	cpc	r20, r26
     c46:	a0 e4       	ldi	r26, 0x40	; 64
     c48:	5a 07       	cpc	r21, r26
     c4a:	10 f0       	brcs	.+4      	; 0xc50 <__pack_f+0x10e>
     c4c:	e1 e0       	ldi	r30, 0x01	; 1
     c4e:	f0 e0       	ldi	r31, 0x00	; 0
     c50:	79 01       	movw	r14, r18
     c52:	8a 01       	movw	r16, r20
     c54:	27 c0       	rjmp	.+78     	; 0xca4 <__pack_f+0x162>
     c56:	60 38       	cpi	r22, 0x80	; 128
     c58:	71 05       	cpc	r23, r1
     c5a:	64 f5       	brge	.+88     	; 0xcb4 <__pack_f+0x172>
     c5c:	fb 01       	movw	r30, r22
     c5e:	e1 58       	subi	r30, 0x81	; 129
     c60:	ff 4f       	sbci	r31, 0xFF	; 255
     c62:	d8 01       	movw	r26, r16
     c64:	c7 01       	movw	r24, r14
     c66:	8f 77       	andi	r24, 0x7F	; 127
     c68:	90 70       	andi	r25, 0x00	; 0
     c6a:	a0 70       	andi	r26, 0x00	; 0
     c6c:	b0 70       	andi	r27, 0x00	; 0
     c6e:	80 34       	cpi	r24, 0x40	; 64
     c70:	91 05       	cpc	r25, r1
     c72:	a1 05       	cpc	r26, r1
     c74:	b1 05       	cpc	r27, r1
     c76:	39 f4       	brne	.+14     	; 0xc86 <__pack_f+0x144>
     c78:	e7 fe       	sbrs	r14, 7
     c7a:	0d c0       	rjmp	.+26     	; 0xc96 <__pack_f+0x154>
     c7c:	80 e4       	ldi	r24, 0x40	; 64
     c7e:	90 e0       	ldi	r25, 0x00	; 0
     c80:	a0 e0       	ldi	r26, 0x00	; 0
     c82:	b0 e0       	ldi	r27, 0x00	; 0
     c84:	04 c0       	rjmp	.+8      	; 0xc8e <__pack_f+0x14c>
     c86:	8f e3       	ldi	r24, 0x3F	; 63
     c88:	90 e0       	ldi	r25, 0x00	; 0
     c8a:	a0 e0       	ldi	r26, 0x00	; 0
     c8c:	b0 e0       	ldi	r27, 0x00	; 0
     c8e:	e8 0e       	add	r14, r24
     c90:	f9 1e       	adc	r15, r25
     c92:	0a 1f       	adc	r16, r26
     c94:	1b 1f       	adc	r17, r27
     c96:	17 ff       	sbrs	r17, 7
     c98:	05 c0       	rjmp	.+10     	; 0xca4 <__pack_f+0x162>
     c9a:	16 95       	lsr	r17
     c9c:	07 95       	ror	r16
     c9e:	f7 94       	ror	r15
     ca0:	e7 94       	ror	r14
     ca2:	31 96       	adiw	r30, 0x01	; 1
     ca4:	87 e0       	ldi	r24, 0x07	; 7
     ca6:	16 95       	lsr	r17
     ca8:	07 95       	ror	r16
     caa:	f7 94       	ror	r15
     cac:	e7 94       	ror	r14
     cae:	8a 95       	dec	r24
     cb0:	d1 f7       	brne	.-12     	; 0xca6 <__pack_f+0x164>
     cb2:	05 c0       	rjmp	.+10     	; 0xcbe <__pack_f+0x17c>
     cb4:	ee 24       	eor	r14, r14
     cb6:	ff 24       	eor	r15, r15
     cb8:	87 01       	movw	r16, r14
     cba:	ef ef       	ldi	r30, 0xFF	; 255
     cbc:	f0 e0       	ldi	r31, 0x00	; 0
     cbe:	6e 2f       	mov	r22, r30
     cc0:	67 95       	ror	r22
     cc2:	66 27       	eor	r22, r22
     cc4:	67 95       	ror	r22
     cc6:	90 2f       	mov	r25, r16
     cc8:	9f 77       	andi	r25, 0x7F	; 127
     cca:	d7 94       	ror	r13
     ccc:	dd 24       	eor	r13, r13
     cce:	d7 94       	ror	r13
     cd0:	8e 2f       	mov	r24, r30
     cd2:	86 95       	lsr	r24
     cd4:	49 2f       	mov	r20, r25
     cd6:	46 2b       	or	r20, r22
     cd8:	58 2f       	mov	r21, r24
     cda:	5d 29       	or	r21, r13
     cdc:	b7 01       	movw	r22, r14
     cde:	ca 01       	movw	r24, r20
     ce0:	1f 91       	pop	r17
     ce2:	0f 91       	pop	r16
     ce4:	ff 90       	pop	r15
     ce6:	ef 90       	pop	r14
     ce8:	df 90       	pop	r13
     cea:	08 95       	ret

00000cec <__unpack_f>:
     cec:	fc 01       	movw	r30, r24
     cee:	db 01       	movw	r26, r22
     cf0:	40 81       	ld	r20, Z
     cf2:	51 81       	ldd	r21, Z+1	; 0x01
     cf4:	22 81       	ldd	r18, Z+2	; 0x02
     cf6:	62 2f       	mov	r22, r18
     cf8:	6f 77       	andi	r22, 0x7F	; 127
     cfa:	70 e0       	ldi	r23, 0x00	; 0
     cfc:	22 1f       	adc	r18, r18
     cfe:	22 27       	eor	r18, r18
     d00:	22 1f       	adc	r18, r18
     d02:	93 81       	ldd	r25, Z+3	; 0x03
     d04:	89 2f       	mov	r24, r25
     d06:	88 0f       	add	r24, r24
     d08:	82 2b       	or	r24, r18
     d0a:	28 2f       	mov	r18, r24
     d0c:	30 e0       	ldi	r19, 0x00	; 0
     d0e:	99 1f       	adc	r25, r25
     d10:	99 27       	eor	r25, r25
     d12:	99 1f       	adc	r25, r25
     d14:	11 96       	adiw	r26, 0x01	; 1
     d16:	9c 93       	st	X, r25
     d18:	11 97       	sbiw	r26, 0x01	; 1
     d1a:	21 15       	cp	r18, r1
     d1c:	31 05       	cpc	r19, r1
     d1e:	a9 f5       	brne	.+106    	; 0xd8a <__unpack_f+0x9e>
     d20:	41 15       	cp	r20, r1
     d22:	51 05       	cpc	r21, r1
     d24:	61 05       	cpc	r22, r1
     d26:	71 05       	cpc	r23, r1
     d28:	11 f4       	brne	.+4      	; 0xd2e <__unpack_f+0x42>
     d2a:	82 e0       	ldi	r24, 0x02	; 2
     d2c:	37 c0       	rjmp	.+110    	; 0xd9c <__unpack_f+0xb0>
     d2e:	82 e8       	ldi	r24, 0x82	; 130
     d30:	9f ef       	ldi	r25, 0xFF	; 255
     d32:	13 96       	adiw	r26, 0x03	; 3
     d34:	9c 93       	st	X, r25
     d36:	8e 93       	st	-X, r24
     d38:	12 97       	sbiw	r26, 0x02	; 2
     d3a:	9a 01       	movw	r18, r20
     d3c:	ab 01       	movw	r20, r22
     d3e:	67 e0       	ldi	r22, 0x07	; 7
     d40:	22 0f       	add	r18, r18
     d42:	33 1f       	adc	r19, r19
     d44:	44 1f       	adc	r20, r20
     d46:	55 1f       	adc	r21, r21
     d48:	6a 95       	dec	r22
     d4a:	d1 f7       	brne	.-12     	; 0xd40 <__unpack_f+0x54>
     d4c:	83 e0       	ldi	r24, 0x03	; 3
     d4e:	8c 93       	st	X, r24
     d50:	0d c0       	rjmp	.+26     	; 0xd6c <__unpack_f+0x80>
     d52:	22 0f       	add	r18, r18
     d54:	33 1f       	adc	r19, r19
     d56:	44 1f       	adc	r20, r20
     d58:	55 1f       	adc	r21, r21
     d5a:	12 96       	adiw	r26, 0x02	; 2
     d5c:	8d 91       	ld	r24, X+
     d5e:	9c 91       	ld	r25, X
     d60:	13 97       	sbiw	r26, 0x03	; 3
     d62:	01 97       	sbiw	r24, 0x01	; 1
     d64:	13 96       	adiw	r26, 0x03	; 3
     d66:	9c 93       	st	X, r25
     d68:	8e 93       	st	-X, r24
     d6a:	12 97       	sbiw	r26, 0x02	; 2
     d6c:	20 30       	cpi	r18, 0x00	; 0
     d6e:	80 e0       	ldi	r24, 0x00	; 0
     d70:	38 07       	cpc	r19, r24
     d72:	80 e0       	ldi	r24, 0x00	; 0
     d74:	48 07       	cpc	r20, r24
     d76:	80 e4       	ldi	r24, 0x40	; 64
     d78:	58 07       	cpc	r21, r24
     d7a:	58 f3       	brcs	.-42     	; 0xd52 <__unpack_f+0x66>
     d7c:	14 96       	adiw	r26, 0x04	; 4
     d7e:	2d 93       	st	X+, r18
     d80:	3d 93       	st	X+, r19
     d82:	4d 93       	st	X+, r20
     d84:	5c 93       	st	X, r21
     d86:	17 97       	sbiw	r26, 0x07	; 7
     d88:	08 95       	ret
     d8a:	2f 3f       	cpi	r18, 0xFF	; 255
     d8c:	31 05       	cpc	r19, r1
     d8e:	79 f4       	brne	.+30     	; 0xdae <__unpack_f+0xc2>
     d90:	41 15       	cp	r20, r1
     d92:	51 05       	cpc	r21, r1
     d94:	61 05       	cpc	r22, r1
     d96:	71 05       	cpc	r23, r1
     d98:	19 f4       	brne	.+6      	; 0xda0 <__unpack_f+0xb4>
     d9a:	84 e0       	ldi	r24, 0x04	; 4
     d9c:	8c 93       	st	X, r24
     d9e:	08 95       	ret
     da0:	64 ff       	sbrs	r22, 4
     da2:	03 c0       	rjmp	.+6      	; 0xdaa <__unpack_f+0xbe>
     da4:	81 e0       	ldi	r24, 0x01	; 1
     da6:	8c 93       	st	X, r24
     da8:	12 c0       	rjmp	.+36     	; 0xdce <__unpack_f+0xe2>
     daa:	1c 92       	st	X, r1
     dac:	10 c0       	rjmp	.+32     	; 0xdce <__unpack_f+0xe2>
     dae:	2f 57       	subi	r18, 0x7F	; 127
     db0:	30 40       	sbci	r19, 0x00	; 0
     db2:	13 96       	adiw	r26, 0x03	; 3
     db4:	3c 93       	st	X, r19
     db6:	2e 93       	st	-X, r18
     db8:	12 97       	sbiw	r26, 0x02	; 2
     dba:	83 e0       	ldi	r24, 0x03	; 3
     dbc:	8c 93       	st	X, r24
     dbe:	87 e0       	ldi	r24, 0x07	; 7
     dc0:	44 0f       	add	r20, r20
     dc2:	55 1f       	adc	r21, r21
     dc4:	66 1f       	adc	r22, r22
     dc6:	77 1f       	adc	r23, r23
     dc8:	8a 95       	dec	r24
     dca:	d1 f7       	brne	.-12     	; 0xdc0 <__unpack_f+0xd4>
     dcc:	70 64       	ori	r23, 0x40	; 64
     dce:	14 96       	adiw	r26, 0x04	; 4
     dd0:	4d 93       	st	X+, r20
     dd2:	5d 93       	st	X+, r21
     dd4:	6d 93       	st	X+, r22
     dd6:	7c 93       	st	X, r23
     dd8:	17 97       	sbiw	r26, 0x07	; 7
     dda:	08 95       	ret

00000ddc <__fpcmp_parts_f>:
     ddc:	1f 93       	push	r17
     dde:	dc 01       	movw	r26, r24
     de0:	fb 01       	movw	r30, r22
     de2:	9c 91       	ld	r25, X
     de4:	92 30       	cpi	r25, 0x02	; 2
     de6:	08 f4       	brcc	.+2      	; 0xdea <__fpcmp_parts_f+0xe>
     de8:	47 c0       	rjmp	.+142    	; 0xe78 <__fpcmp_parts_f+0x9c>
     dea:	80 81       	ld	r24, Z
     dec:	82 30       	cpi	r24, 0x02	; 2
     dee:	08 f4       	brcc	.+2      	; 0xdf2 <__fpcmp_parts_f+0x16>
     df0:	43 c0       	rjmp	.+134    	; 0xe78 <__fpcmp_parts_f+0x9c>
     df2:	94 30       	cpi	r25, 0x04	; 4
     df4:	51 f4       	brne	.+20     	; 0xe0a <__fpcmp_parts_f+0x2e>
     df6:	11 96       	adiw	r26, 0x01	; 1
     df8:	1c 91       	ld	r17, X
     dfa:	84 30       	cpi	r24, 0x04	; 4
     dfc:	99 f5       	brne	.+102    	; 0xe64 <__fpcmp_parts_f+0x88>
     dfe:	81 81       	ldd	r24, Z+1	; 0x01
     e00:	68 2f       	mov	r22, r24
     e02:	70 e0       	ldi	r23, 0x00	; 0
     e04:	61 1b       	sub	r22, r17
     e06:	71 09       	sbc	r23, r1
     e08:	3f c0       	rjmp	.+126    	; 0xe88 <__fpcmp_parts_f+0xac>
     e0a:	84 30       	cpi	r24, 0x04	; 4
     e0c:	21 f0       	breq	.+8      	; 0xe16 <__fpcmp_parts_f+0x3a>
     e0e:	92 30       	cpi	r25, 0x02	; 2
     e10:	31 f4       	brne	.+12     	; 0xe1e <__fpcmp_parts_f+0x42>
     e12:	82 30       	cpi	r24, 0x02	; 2
     e14:	b9 f1       	breq	.+110    	; 0xe84 <__fpcmp_parts_f+0xa8>
     e16:	81 81       	ldd	r24, Z+1	; 0x01
     e18:	88 23       	and	r24, r24
     e1a:	89 f1       	breq	.+98     	; 0xe7e <__fpcmp_parts_f+0xa2>
     e1c:	2d c0       	rjmp	.+90     	; 0xe78 <__fpcmp_parts_f+0x9c>
     e1e:	11 96       	adiw	r26, 0x01	; 1
     e20:	1c 91       	ld	r17, X
     e22:	11 97       	sbiw	r26, 0x01	; 1
     e24:	82 30       	cpi	r24, 0x02	; 2
     e26:	f1 f0       	breq	.+60     	; 0xe64 <__fpcmp_parts_f+0x88>
     e28:	81 81       	ldd	r24, Z+1	; 0x01
     e2a:	18 17       	cp	r17, r24
     e2c:	d9 f4       	brne	.+54     	; 0xe64 <__fpcmp_parts_f+0x88>
     e2e:	12 96       	adiw	r26, 0x02	; 2
     e30:	2d 91       	ld	r18, X+
     e32:	3c 91       	ld	r19, X
     e34:	13 97       	sbiw	r26, 0x03	; 3
     e36:	82 81       	ldd	r24, Z+2	; 0x02
     e38:	93 81       	ldd	r25, Z+3	; 0x03
     e3a:	82 17       	cp	r24, r18
     e3c:	93 07       	cpc	r25, r19
     e3e:	94 f0       	brlt	.+36     	; 0xe64 <__fpcmp_parts_f+0x88>
     e40:	28 17       	cp	r18, r24
     e42:	39 07       	cpc	r19, r25
     e44:	bc f0       	brlt	.+46     	; 0xe74 <__fpcmp_parts_f+0x98>
     e46:	14 96       	adiw	r26, 0x04	; 4
     e48:	8d 91       	ld	r24, X+
     e4a:	9d 91       	ld	r25, X+
     e4c:	0d 90       	ld	r0, X+
     e4e:	bc 91       	ld	r27, X
     e50:	a0 2d       	mov	r26, r0
     e52:	24 81       	ldd	r18, Z+4	; 0x04
     e54:	35 81       	ldd	r19, Z+5	; 0x05
     e56:	46 81       	ldd	r20, Z+6	; 0x06
     e58:	57 81       	ldd	r21, Z+7	; 0x07
     e5a:	28 17       	cp	r18, r24
     e5c:	39 07       	cpc	r19, r25
     e5e:	4a 07       	cpc	r20, r26
     e60:	5b 07       	cpc	r21, r27
     e62:	18 f4       	brcc	.+6      	; 0xe6a <__fpcmp_parts_f+0x8e>
     e64:	11 23       	and	r17, r17
     e66:	41 f0       	breq	.+16     	; 0xe78 <__fpcmp_parts_f+0x9c>
     e68:	0a c0       	rjmp	.+20     	; 0xe7e <__fpcmp_parts_f+0xa2>
     e6a:	82 17       	cp	r24, r18
     e6c:	93 07       	cpc	r25, r19
     e6e:	a4 07       	cpc	r26, r20
     e70:	b5 07       	cpc	r27, r21
     e72:	40 f4       	brcc	.+16     	; 0xe84 <__fpcmp_parts_f+0xa8>
     e74:	11 23       	and	r17, r17
     e76:	19 f0       	breq	.+6      	; 0xe7e <__fpcmp_parts_f+0xa2>
     e78:	61 e0       	ldi	r22, 0x01	; 1
     e7a:	70 e0       	ldi	r23, 0x00	; 0
     e7c:	05 c0       	rjmp	.+10     	; 0xe88 <__fpcmp_parts_f+0xac>
     e7e:	6f ef       	ldi	r22, 0xFF	; 255
     e80:	7f ef       	ldi	r23, 0xFF	; 255
     e82:	02 c0       	rjmp	.+4      	; 0xe88 <__fpcmp_parts_f+0xac>
     e84:	60 e0       	ldi	r22, 0x00	; 0
     e86:	70 e0       	ldi	r23, 0x00	; 0
     e88:	cb 01       	movw	r24, r22
     e8a:	1f 91       	pop	r17
     e8c:	08 95       	ret

00000e8e <L293D_DCMOTOR_start>:
//#include "TIMER0_config.h"



void L293D_DCMOTOR_start(u8 direction,u8 motor)
{
     e8e:	df 93       	push	r29
     e90:	cf 93       	push	r28
     e92:	cd b7       	in	r28, 0x3d	; 61
     e94:	de b7       	in	r29, 0x3e	; 62
     e96:	28 97       	sbiw	r28, 0x08	; 8
     e98:	0f b6       	in	r0, 0x3f	; 63
     e9a:	f8 94       	cli
     e9c:	de bf       	out	0x3e, r29	; 62
     e9e:	0f be       	out	0x3f, r0	; 63
     ea0:	cd bf       	out	0x3d, r28	; 61
     ea2:	89 83       	std	Y+1, r24	; 0x01
     ea4:	6a 83       	std	Y+2, r22	; 0x02
switch(motor)
     ea6:	8a 81       	ldd	r24, Y+2	; 0x02
     ea8:	28 2f       	mov	r18, r24
     eaa:	30 e0       	ldi	r19, 0x00	; 0
     eac:	38 87       	std	Y+8, r19	; 0x08
     eae:	2f 83       	std	Y+7, r18	; 0x07
     eb0:	8f 81       	ldd	r24, Y+7	; 0x07
     eb2:	98 85       	ldd	r25, Y+8	; 0x08
     eb4:	81 34       	cpi	r24, 0x41	; 65
     eb6:	91 05       	cpc	r25, r1
     eb8:	31 f0       	breq	.+12     	; 0xec6 <L293D_DCMOTOR_start+0x38>
     eba:	2f 81       	ldd	r18, Y+7	; 0x07
     ebc:	38 85       	ldd	r19, Y+8	; 0x08
     ebe:	22 34       	cpi	r18, 0x42	; 66
     ec0:	31 05       	cpc	r19, r1
     ec2:	d9 f1       	breq	.+118    	; 0xf3a <L293D_DCMOTOR_start+0xac>
     ec4:	73 c0       	rjmp	.+230    	; 0xfac <L293D_DCMOTOR_start+0x11e>
{
case 'A':
{
	//motorA
	DIO_setPinDirection(H_EN1_PORT,H_EN1_PIN,DIO_PIN_OUTPUT);
     ec6:	83 e0       	ldi	r24, 0x03	; 3
     ec8:	64 e0       	ldi	r22, 0x04	; 4
     eca:	41 e0       	ldi	r20, 0x01	; 1
     ecc:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <DIO_setPinDirection>
	DIO_setPinValue(H_EN1_PORT,H_EN1_PIN,DIO_PIN_HIGH);
     ed0:	83 e0       	ldi	r24, 0x03	; 3
     ed2:	64 e0       	ldi	r22, 0x04	; 4
     ed4:	41 e0       	ldi	r20, 0x01	; 1
     ed6:	0e 94 9a 0c 	call	0x1934	; 0x1934 <DIO_setPinValue>
	DIO_setPinDirection(H_A1_PORT,H_A1_PIN,DIO_PIN_OUTPUT);
     eda:	82 e0       	ldi	r24, 0x02	; 2
     edc:	63 e0       	ldi	r22, 0x03	; 3
     ede:	41 e0       	ldi	r20, 0x01	; 1
     ee0:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <DIO_setPinDirection>
	DIO_setPinDirection(H_A2_PORT,H_A2_PIN,DIO_PIN_OUTPUT);
     ee4:	82 e0       	ldi	r24, 0x02	; 2
     ee6:	64 e0       	ldi	r22, 0x04	; 4
     ee8:	41 e0       	ldi	r20, 0x01	; 1
     eea:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <DIO_setPinDirection>
	switch(direction)
     eee:	89 81       	ldd	r24, Y+1	; 0x01
     ef0:	28 2f       	mov	r18, r24
     ef2:	30 e0       	ldi	r19, 0x00	; 0
     ef4:	3e 83       	std	Y+6, r19	; 0x06
     ef6:	2d 83       	std	Y+5, r18	; 0x05
     ef8:	8d 81       	ldd	r24, Y+5	; 0x05
     efa:	9e 81       	ldd	r25, Y+6	; 0x06
     efc:	81 30       	cpi	r24, 0x01	; 1
     efe:	91 05       	cpc	r25, r1
     f00:	31 f0       	breq	.+12     	; 0xf0e <L293D_DCMOTOR_start+0x80>
     f02:	2d 81       	ldd	r18, Y+5	; 0x05
     f04:	3e 81       	ldd	r19, Y+6	; 0x06
     f06:	22 30       	cpi	r18, 0x02	; 2
     f08:	31 05       	cpc	r19, r1
     f0a:	61 f0       	breq	.+24     	; 0xf24 <L293D_DCMOTOR_start+0x96>
     f0c:	4f c0       	rjmp	.+158    	; 0xfac <L293D_DCMOTOR_start+0x11e>
	{
	case 1:
	{
	//CLCWISE
	DIO_setPinValue(H_A1_PORT,H_A1_PIN,DIO_PIN_HIGH);
     f0e:	82 e0       	ldi	r24, 0x02	; 2
     f10:	63 e0       	ldi	r22, 0x03	; 3
     f12:	41 e0       	ldi	r20, 0x01	; 1
     f14:	0e 94 9a 0c 	call	0x1934	; 0x1934 <DIO_setPinValue>
	DIO_setPinValue(H_A2_PORT,H_A2_PIN,DIO_PIN_LOW);
     f18:	82 e0       	ldi	r24, 0x02	; 2
     f1a:	64 e0       	ldi	r22, 0x04	; 4
     f1c:	40 e0       	ldi	r20, 0x00	; 0
     f1e:	0e 94 9a 0c 	call	0x1934	; 0x1934 <DIO_setPinValue>
     f22:	44 c0       	rjmp	.+136    	; 0xfac <L293D_DCMOTOR_start+0x11e>
	break;
	}
	case 2:
	{
	//ANTI CLCWISE
	DIO_setPinValue(H_A1_PORT,H_A1_PIN,DIO_PIN_LOW);
     f24:	82 e0       	ldi	r24, 0x02	; 2
     f26:	63 e0       	ldi	r22, 0x03	; 3
     f28:	40 e0       	ldi	r20, 0x00	; 0
     f2a:	0e 94 9a 0c 	call	0x1934	; 0x1934 <DIO_setPinValue>
	DIO_setPinValue(H_A2_PORT,H_A2_PIN,DIO_PIN_HIGH);
     f2e:	82 e0       	ldi	r24, 0x02	; 2
     f30:	64 e0       	ldi	r22, 0x04	; 4
     f32:	41 e0       	ldi	r20, 0x01	; 1
     f34:	0e 94 9a 0c 	call	0x1934	; 0x1934 <DIO_setPinValue>
     f38:	39 c0       	rjmp	.+114    	; 0xfac <L293D_DCMOTOR_start+0x11e>
	break;
}
case 'B':
{
	//motorB
	DIO_setPinDirection(H_EN2_PORT,H_EN2_PIN,DIO_PIN_OUTPUT);
     f3a:	83 e0       	ldi	r24, 0x03	; 3
     f3c:	67 e0       	ldi	r22, 0x07	; 7
     f3e:	41 e0       	ldi	r20, 0x01	; 1
     f40:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <DIO_setPinDirection>
	DIO_setPinValue(H_EN2_PORT,H_EN2_PIN,DIO_PIN_HIGH);
     f44:	83 e0       	ldi	r24, 0x03	; 3
     f46:	67 e0       	ldi	r22, 0x07	; 7
     f48:	41 e0       	ldi	r20, 0x01	; 1
     f4a:	0e 94 9a 0c 	call	0x1934	; 0x1934 <DIO_setPinValue>
    DIO_setPinDirection(H_A3_PORT,H_A3_PIN,DIO_PIN_OUTPUT);
     f4e:	82 e0       	ldi	r24, 0x02	; 2
     f50:	65 e0       	ldi	r22, 0x05	; 5
     f52:	41 e0       	ldi	r20, 0x01	; 1
     f54:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <DIO_setPinDirection>
	DIO_setPinDirection(H_A4_PORT,H_A4_PIN,DIO_PIN_OUTPUT);
     f58:	82 e0       	ldi	r24, 0x02	; 2
     f5a:	66 e0       	ldi	r22, 0x06	; 6
     f5c:	41 e0       	ldi	r20, 0x01	; 1
     f5e:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <DIO_setPinDirection>
	switch(direction)
     f62:	89 81       	ldd	r24, Y+1	; 0x01
     f64:	28 2f       	mov	r18, r24
     f66:	30 e0       	ldi	r19, 0x00	; 0
     f68:	3c 83       	std	Y+4, r19	; 0x04
     f6a:	2b 83       	std	Y+3, r18	; 0x03
     f6c:	8b 81       	ldd	r24, Y+3	; 0x03
     f6e:	9c 81       	ldd	r25, Y+4	; 0x04
     f70:	81 30       	cpi	r24, 0x01	; 1
     f72:	91 05       	cpc	r25, r1
     f74:	31 f0       	breq	.+12     	; 0xf82 <L293D_DCMOTOR_start+0xf4>
     f76:	2b 81       	ldd	r18, Y+3	; 0x03
     f78:	3c 81       	ldd	r19, Y+4	; 0x04
     f7a:	22 30       	cpi	r18, 0x02	; 2
     f7c:	31 05       	cpc	r19, r1
     f7e:	61 f0       	breq	.+24     	; 0xf98 <L293D_DCMOTOR_start+0x10a>
     f80:	15 c0       	rjmp	.+42     	; 0xfac <L293D_DCMOTOR_start+0x11e>
	{
	case 1:
	{
	//CLCWISE
	DIO_setPinValue(H_A3_PORT,H_A3_PIN,DIO_PIN_HIGH);
     f82:	82 e0       	ldi	r24, 0x02	; 2
     f84:	65 e0       	ldi	r22, 0x05	; 5
     f86:	41 e0       	ldi	r20, 0x01	; 1
     f88:	0e 94 9a 0c 	call	0x1934	; 0x1934 <DIO_setPinValue>
	DIO_setPinValue(H_A4_PORT,H_A4_PIN,DIO_PIN_LOW);
     f8c:	82 e0       	ldi	r24, 0x02	; 2
     f8e:	66 e0       	ldi	r22, 0x06	; 6
     f90:	40 e0       	ldi	r20, 0x00	; 0
     f92:	0e 94 9a 0c 	call	0x1934	; 0x1934 <DIO_setPinValue>
     f96:	0a c0       	rjmp	.+20     	; 0xfac <L293D_DCMOTOR_start+0x11e>
    break;
	}
	case 2:
	{
	//ANTI CLCWISE
	DIO_setPinValue(H_A3_PORT,H_A3_PIN,DIO_PIN_LOW);
     f98:	82 e0       	ldi	r24, 0x02	; 2
     f9a:	65 e0       	ldi	r22, 0x05	; 5
     f9c:	40 e0       	ldi	r20, 0x00	; 0
     f9e:	0e 94 9a 0c 	call	0x1934	; 0x1934 <DIO_setPinValue>
	DIO_setPinValue(H_A4_PORT,H_A4_PIN,DIO_PIN_HIGH);
     fa2:	82 e0       	ldi	r24, 0x02	; 2
     fa4:	66 e0       	ldi	r22, 0x06	; 6
     fa6:	41 e0       	ldi	r20, 0x01	; 1
     fa8:	0e 94 9a 0c 	call	0x1934	; 0x1934 <DIO_setPinValue>
break;

}

}
}
     fac:	28 96       	adiw	r28, 0x08	; 8
     fae:	0f b6       	in	r0, 0x3f	; 63
     fb0:	f8 94       	cli
     fb2:	de bf       	out	0x3e, r29	; 62
     fb4:	0f be       	out	0x3f, r0	; 63
     fb6:	cd bf       	out	0x3d, r28	; 61
     fb8:	cf 91       	pop	r28
     fba:	df 91       	pop	r29
     fbc:	08 95       	ret

00000fbe <L293D_DCMOTOR_stop>:
void L293D_DCMOTOR_stop(u8 motor)
{
     fbe:	df 93       	push	r29
     fc0:	cf 93       	push	r28
     fc2:	00 d0       	rcall	.+0      	; 0xfc4 <L293D_DCMOTOR_stop+0x6>
     fc4:	0f 92       	push	r0
     fc6:	cd b7       	in	r28, 0x3d	; 61
     fc8:	de b7       	in	r29, 0x3e	; 62
     fca:	89 83       	std	Y+1, r24	; 0x01
switch(motor)
     fcc:	89 81       	ldd	r24, Y+1	; 0x01
     fce:	28 2f       	mov	r18, r24
     fd0:	30 e0       	ldi	r19, 0x00	; 0
     fd2:	3b 83       	std	Y+3, r19	; 0x03
     fd4:	2a 83       	std	Y+2, r18	; 0x02
     fd6:	8a 81       	ldd	r24, Y+2	; 0x02
     fd8:	9b 81       	ldd	r25, Y+3	; 0x03
     fda:	81 34       	cpi	r24, 0x41	; 65
     fdc:	91 05       	cpc	r25, r1
     fde:	81 f0       	breq	.+32     	; 0x1000 <L293D_DCMOTOR_stop+0x42>
     fe0:	2a 81       	ldd	r18, Y+2	; 0x02
     fe2:	3b 81       	ldd	r19, Y+3	; 0x03
     fe4:	22 34       	cpi	r18, 0x42	; 66
     fe6:	31 05       	cpc	r19, r1
     fe8:	a9 f4       	brne	.+42     	; 0x1014 <L293D_DCMOTOR_stop+0x56>
{
case 'B':
{
	DIO_setPinDirection(H_EN2_PORT,H_EN2_PIN,DIO_PIN_OUTPUT);
     fea:	83 e0       	ldi	r24, 0x03	; 3
     fec:	67 e0       	ldi	r22, 0x07	; 7
     fee:	41 e0       	ldi	r20, 0x01	; 1
     ff0:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <DIO_setPinDirection>
	DIO_setPinValue(H_EN2_PORT,H_EN2_PIN,DIO_PIN_LOW);
     ff4:	83 e0       	ldi	r24, 0x03	; 3
     ff6:	67 e0       	ldi	r22, 0x07	; 7
     ff8:	40 e0       	ldi	r20, 0x00	; 0
     ffa:	0e 94 9a 0c 	call	0x1934	; 0x1934 <DIO_setPinValue>
     ffe:	0a c0       	rjmp	.+20     	; 0x1014 <L293D_DCMOTOR_stop+0x56>
break;
}
case 'A':
{
	DIO_setPinDirection(H_EN1_PORT,H_EN1_PIN,DIO_PIN_OUTPUT);
    1000:	83 e0       	ldi	r24, 0x03	; 3
    1002:	64 e0       	ldi	r22, 0x04	; 4
    1004:	41 e0       	ldi	r20, 0x01	; 1
    1006:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <DIO_setPinDirection>
	DIO_setPinValue(H_EN1_PORT,H_EN1_PIN,DIO_PIN_LOW);
    100a:	83 e0       	ldi	r24, 0x03	; 3
    100c:	64 e0       	ldi	r22, 0x04	; 4
    100e:	40 e0       	ldi	r20, 0x00	; 0
    1010:	0e 94 9a 0c 	call	0x1934	; 0x1934 <DIO_setPinValue>
break;
}


}
}
    1014:	0f 90       	pop	r0
    1016:	0f 90       	pop	r0
    1018:	0f 90       	pop	r0
    101a:	cf 91       	pop	r28
    101c:	df 91       	pop	r29
    101e:	08 95       	ret

00001020 <L9110_DCMOTOR_start>:
}
}
}
*/
void L9110_DCMOTOR_start(u8 direction,u8 motor)
{
    1020:	df 93       	push	r29
    1022:	cf 93       	push	r28
    1024:	cd b7       	in	r28, 0x3d	; 61
    1026:	de b7       	in	r29, 0x3e	; 62
    1028:	28 97       	sbiw	r28, 0x08	; 8
    102a:	0f b6       	in	r0, 0x3f	; 63
    102c:	f8 94       	cli
    102e:	de bf       	out	0x3e, r29	; 62
    1030:	0f be       	out	0x3f, r0	; 63
    1032:	cd bf       	out	0x3d, r28	; 61
    1034:	89 83       	std	Y+1, r24	; 0x01
    1036:	6a 83       	std	Y+2, r22	; 0x02
	switch(motor)
    1038:	8a 81       	ldd	r24, Y+2	; 0x02
    103a:	28 2f       	mov	r18, r24
    103c:	30 e0       	ldi	r19, 0x00	; 0
    103e:	38 87       	std	Y+8, r19	; 0x08
    1040:	2f 83       	std	Y+7, r18	; 0x07
    1042:	8f 81       	ldd	r24, Y+7	; 0x07
    1044:	98 85       	ldd	r25, Y+8	; 0x08
    1046:	81 34       	cpi	r24, 0x41	; 65
    1048:	91 05       	cpc	r25, r1
    104a:	31 f0       	breq	.+12     	; 0x1058 <L9110_DCMOTOR_start+0x38>
    104c:	2f 81       	ldd	r18, Y+7	; 0x07
    104e:	38 85       	ldd	r19, Y+8	; 0x08
    1050:	22 34       	cpi	r18, 0x42	; 66
    1052:	31 05       	cpc	r19, r1
    1054:	89 f1       	breq	.+98     	; 0x10b8 <L9110_DCMOTOR_start+0x98>
    1056:	5f c0       	rjmp	.+190    	; 0x1116 <L9110_DCMOTOR_start+0xf6>
	{
	case 'A':
	{
		//motorA

		DIO_setPinDirection(A_1A_PORT,A_1A_PIN,DIO_PIN_OUTPUT);
    1058:	81 e0       	ldi	r24, 0x01	; 1
    105a:	67 e0       	ldi	r22, 0x07	; 7
    105c:	41 e0       	ldi	r20, 0x01	; 1
    105e:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <DIO_setPinDirection>
		DIO_setPinDirection(A_2A_PORT,A_2A_PIN,DIO_PIN_OUTPUT);
    1062:	82 e0       	ldi	r24, 0x02	; 2
    1064:	61 e0       	ldi	r22, 0x01	; 1
    1066:	41 e0       	ldi	r20, 0x01	; 1
    1068:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <DIO_setPinDirection>
		switch(direction)
    106c:	89 81       	ldd	r24, Y+1	; 0x01
    106e:	28 2f       	mov	r18, r24
    1070:	30 e0       	ldi	r19, 0x00	; 0
    1072:	3e 83       	std	Y+6, r19	; 0x06
    1074:	2d 83       	std	Y+5, r18	; 0x05
    1076:	8d 81       	ldd	r24, Y+5	; 0x05
    1078:	9e 81       	ldd	r25, Y+6	; 0x06
    107a:	81 30       	cpi	r24, 0x01	; 1
    107c:	91 05       	cpc	r25, r1
    107e:	31 f0       	breq	.+12     	; 0x108c <L9110_DCMOTOR_start+0x6c>
    1080:	2d 81       	ldd	r18, Y+5	; 0x05
    1082:	3e 81       	ldd	r19, Y+6	; 0x06
    1084:	22 30       	cpi	r18, 0x02	; 2
    1086:	31 05       	cpc	r19, r1
    1088:	61 f0       	breq	.+24     	; 0x10a2 <L9110_DCMOTOR_start+0x82>
    108a:	45 c0       	rjmp	.+138    	; 0x1116 <L9110_DCMOTOR_start+0xf6>
		{
		case 1:
		{
		//CLCWISE
		DIO_setPinValue(A_1A_PORT,A_1A_PIN,DIO_PIN_HIGH);
    108c:	81 e0       	ldi	r24, 0x01	; 1
    108e:	67 e0       	ldi	r22, 0x07	; 7
    1090:	41 e0       	ldi	r20, 0x01	; 1
    1092:	0e 94 9a 0c 	call	0x1934	; 0x1934 <DIO_setPinValue>
		DIO_setPinValue(A_2A_PORT,A_2A_PIN,DIO_PIN_LOW);
    1096:	82 e0       	ldi	r24, 0x02	; 2
    1098:	61 e0       	ldi	r22, 0x01	; 1
    109a:	40 e0       	ldi	r20, 0x00	; 0
    109c:	0e 94 9a 0c 	call	0x1934	; 0x1934 <DIO_setPinValue>
    10a0:	3a c0       	rjmp	.+116    	; 0x1116 <L9110_DCMOTOR_start+0xf6>
		break;
		}
		case 2:
		{
		//ANTI CLCWISE
		DIO_setPinValue(A_1A_PORT,A_1A_PIN,DIO_PIN_LOW);
    10a2:	81 e0       	ldi	r24, 0x01	; 1
    10a4:	67 e0       	ldi	r22, 0x07	; 7
    10a6:	40 e0       	ldi	r20, 0x00	; 0
    10a8:	0e 94 9a 0c 	call	0x1934	; 0x1934 <DIO_setPinValue>
		DIO_setPinValue(A_2A_PORT,A_2A_PIN,DIO_PIN_HIGH);
    10ac:	82 e0       	ldi	r24, 0x02	; 2
    10ae:	61 e0       	ldi	r22, 0x01	; 1
    10b0:	41 e0       	ldi	r20, 0x01	; 1
    10b2:	0e 94 9a 0c 	call	0x1934	; 0x1934 <DIO_setPinValue>
    10b6:	2f c0       	rjmp	.+94     	; 0x1116 <L9110_DCMOTOR_start+0xf6>
	case 'B':
	{
		//motorB


	    DIO_setPinDirection(B_1A_PORT,B_1A_PIN,DIO_PIN_OUTPUT);
    10b8:	81 e0       	ldi	r24, 0x01	; 1
    10ba:	65 e0       	ldi	r22, 0x05	; 5
    10bc:	41 e0       	ldi	r20, 0x01	; 1
    10be:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <DIO_setPinDirection>
		DIO_setPinDirection(B_2A_PORT,B_2A_PIN,DIO_PIN_OUTPUT);
    10c2:	81 e0       	ldi	r24, 0x01	; 1
    10c4:	66 e0       	ldi	r22, 0x06	; 6
    10c6:	41 e0       	ldi	r20, 0x01	; 1
    10c8:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <DIO_setPinDirection>
		switch(direction)
    10cc:	89 81       	ldd	r24, Y+1	; 0x01
    10ce:	28 2f       	mov	r18, r24
    10d0:	30 e0       	ldi	r19, 0x00	; 0
    10d2:	3c 83       	std	Y+4, r19	; 0x04
    10d4:	2b 83       	std	Y+3, r18	; 0x03
    10d6:	8b 81       	ldd	r24, Y+3	; 0x03
    10d8:	9c 81       	ldd	r25, Y+4	; 0x04
    10da:	81 30       	cpi	r24, 0x01	; 1
    10dc:	91 05       	cpc	r25, r1
    10de:	31 f0       	breq	.+12     	; 0x10ec <L9110_DCMOTOR_start+0xcc>
    10e0:	2b 81       	ldd	r18, Y+3	; 0x03
    10e2:	3c 81       	ldd	r19, Y+4	; 0x04
    10e4:	22 30       	cpi	r18, 0x02	; 2
    10e6:	31 05       	cpc	r19, r1
    10e8:	61 f0       	breq	.+24     	; 0x1102 <L9110_DCMOTOR_start+0xe2>
    10ea:	15 c0       	rjmp	.+42     	; 0x1116 <L9110_DCMOTOR_start+0xf6>
		{
		case 1:
		{
		//CLCWISE
		DIO_setPinValue(B_1A_PORT,B_1A_PIN,DIO_PIN_HIGH);
    10ec:	81 e0       	ldi	r24, 0x01	; 1
    10ee:	65 e0       	ldi	r22, 0x05	; 5
    10f0:	41 e0       	ldi	r20, 0x01	; 1
    10f2:	0e 94 9a 0c 	call	0x1934	; 0x1934 <DIO_setPinValue>
		DIO_setPinValue(B_2A_PORT,B_2A_PIN,DIO_PIN_LOW);
    10f6:	81 e0       	ldi	r24, 0x01	; 1
    10f8:	66 e0       	ldi	r22, 0x06	; 6
    10fa:	40 e0       	ldi	r20, 0x00	; 0
    10fc:	0e 94 9a 0c 	call	0x1934	; 0x1934 <DIO_setPinValue>
    1100:	0a c0       	rjmp	.+20     	; 0x1116 <L9110_DCMOTOR_start+0xf6>
	    break;
		}
		case 2:
		{
		//ANTI CLCWISE
		DIO_setPinValue(B_1A_PORT,B_1A_PIN,DIO_PIN_LOW);
    1102:	81 e0       	ldi	r24, 0x01	; 1
    1104:	65 e0       	ldi	r22, 0x05	; 5
    1106:	40 e0       	ldi	r20, 0x00	; 0
    1108:	0e 94 9a 0c 	call	0x1934	; 0x1934 <DIO_setPinValue>
		DIO_setPinValue(B_2A_PORT,B_2A_PIN,DIO_PIN_HIGH);
    110c:	81 e0       	ldi	r24, 0x01	; 1
    110e:	66 e0       	ldi	r22, 0x06	; 6
    1110:	41 e0       	ldi	r20, 0x01	; 1
    1112:	0e 94 9a 0c 	call	0x1934	; 0x1934 <DIO_setPinValue>
	break;

	}

	}
}
    1116:	28 96       	adiw	r28, 0x08	; 8
    1118:	0f b6       	in	r0, 0x3f	; 63
    111a:	f8 94       	cli
    111c:	de bf       	out	0x3e, r29	; 62
    111e:	0f be       	out	0x3f, r0	; 63
    1120:	cd bf       	out	0x3d, r28	; 61
    1122:	cf 91       	pop	r28
    1124:	df 91       	pop	r29
    1126:	08 95       	ret

00001128 <L9110_DCMOTOR_stop>:
void L9110_DCMOTOR_stop(u8 motor)
{
    1128:	df 93       	push	r29
    112a:	cf 93       	push	r28
    112c:	00 d0       	rcall	.+0      	; 0x112e <L9110_DCMOTOR_stop+0x6>
    112e:	0f 92       	push	r0
    1130:	cd b7       	in	r28, 0x3d	; 61
    1132:	de b7       	in	r29, 0x3e	; 62
    1134:	89 83       	std	Y+1, r24	; 0x01
switch(motor)
    1136:	89 81       	ldd	r24, Y+1	; 0x01
    1138:	28 2f       	mov	r18, r24
    113a:	30 e0       	ldi	r19, 0x00	; 0
    113c:	3b 83       	std	Y+3, r19	; 0x03
    113e:	2a 83       	std	Y+2, r18	; 0x02
    1140:	8a 81       	ldd	r24, Y+2	; 0x02
    1142:	9b 81       	ldd	r25, Y+3	; 0x03
    1144:	81 34       	cpi	r24, 0x41	; 65
    1146:	91 05       	cpc	r25, r1
    1148:	31 f0       	breq	.+12     	; 0x1156 <L9110_DCMOTOR_stop+0x2e>
    114a:	2a 81       	ldd	r18, Y+2	; 0x02
    114c:	3b 81       	ldd	r19, Y+3	; 0x03
    114e:	22 34       	cpi	r18, 0x42	; 66
    1150:	31 05       	cpc	r19, r1
    1152:	b1 f0       	breq	.+44     	; 0x1180 <L9110_DCMOTOR_stop+0x58>
    1154:	29 c0       	rjmp	.+82     	; 0x11a8 <L9110_DCMOTOR_stop+0x80>
{
case 'A':
{
	DIO_setPinDirection(A_1A_PORT,A_1A_PIN,DIO_PIN_OUTPUT);
    1156:	81 e0       	ldi	r24, 0x01	; 1
    1158:	67 e0       	ldi	r22, 0x07	; 7
    115a:	41 e0       	ldi	r20, 0x01	; 1
    115c:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <DIO_setPinDirection>
	DIO_setPinDirection(A_2A_PORT,A_2A_PIN,DIO_PIN_OUTPUT);
    1160:	82 e0       	ldi	r24, 0x02	; 2
    1162:	61 e0       	ldi	r22, 0x01	; 1
    1164:	41 e0       	ldi	r20, 0x01	; 1
    1166:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <DIO_setPinDirection>
	DIO_setPinValue(A_1A_PORT,A_1A_PIN,DIO_PIN_LOW);
    116a:	81 e0       	ldi	r24, 0x01	; 1
    116c:	67 e0       	ldi	r22, 0x07	; 7
    116e:	40 e0       	ldi	r20, 0x00	; 0
    1170:	0e 94 9a 0c 	call	0x1934	; 0x1934 <DIO_setPinValue>
	DIO_setPinValue(A_2A_PORT,A_2A_PIN,DIO_PIN_LOW);
    1174:	82 e0       	ldi	r24, 0x02	; 2
    1176:	61 e0       	ldi	r22, 0x01	; 1
    1178:	40 e0       	ldi	r20, 0x00	; 0
    117a:	0e 94 9a 0c 	call	0x1934	; 0x1934 <DIO_setPinValue>
    117e:	14 c0       	rjmp	.+40     	; 0x11a8 <L9110_DCMOTOR_stop+0x80>
	break;
}
case 'B':
{   DIO_setPinDirection(B_1A_PORT,B_1A_PIN,DIO_PIN_OUTPUT);
    1180:	81 e0       	ldi	r24, 0x01	; 1
    1182:	65 e0       	ldi	r22, 0x05	; 5
    1184:	41 e0       	ldi	r20, 0x01	; 1
    1186:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <DIO_setPinDirection>
	DIO_setPinDirection(B_2A_PORT,B_2A_PIN,DIO_PIN_OUTPUT);
    118a:	81 e0       	ldi	r24, 0x01	; 1
    118c:	66 e0       	ldi	r22, 0x06	; 6
    118e:	41 e0       	ldi	r20, 0x01	; 1
    1190:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <DIO_setPinDirection>
	DIO_setPinValue(B_1A_PORT,B_1A_PIN,DIO_PIN_LOW);
    1194:	81 e0       	ldi	r24, 0x01	; 1
    1196:	65 e0       	ldi	r22, 0x05	; 5
    1198:	40 e0       	ldi	r20, 0x00	; 0
    119a:	0e 94 9a 0c 	call	0x1934	; 0x1934 <DIO_setPinValue>
	DIO_setPinValue(B_2A_PORT,B_2A_PIN,DIO_PIN_LOW);
    119e:	81 e0       	ldi	r24, 0x01	; 1
    11a0:	66 e0       	ldi	r22, 0x06	; 6
    11a2:	40 e0       	ldi	r20, 0x00	; 0
    11a4:	0e 94 9a 0c 	call	0x1934	; 0x1934 <DIO_setPinValue>
}


}

}
    11a8:	0f 90       	pop	r0
    11aa:	0f 90       	pop	r0
    11ac:	0f 90       	pop	r0
    11ae:	cf 91       	pop	r28
    11b0:	df 91       	pop	r29
    11b2:	08 95       	ret

000011b4 <DCMOTOR_start>:
	}

}
*/
void DCMOTOR_start(u8 direction)
{
    11b4:	df 93       	push	r29
    11b6:	cf 93       	push	r28
    11b8:	00 d0       	rcall	.+0      	; 0x11ba <DCMOTOR_start+0x6>
    11ba:	0f 92       	push	r0
    11bc:	cd b7       	in	r28, 0x3d	; 61
    11be:	de b7       	in	r29, 0x3e	; 62
    11c0:	89 83       	std	Y+1, r24	; 0x01
	//motor a l293d
	DIO_setPinDirection(H_EN1_PORT,H_EN1_PIN,DIO_PIN_OUTPUT);
    11c2:	83 e0       	ldi	r24, 0x03	; 3
    11c4:	64 e0       	ldi	r22, 0x04	; 4
    11c6:	41 e0       	ldi	r20, 0x01	; 1
    11c8:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <DIO_setPinDirection>
	DIO_setPinValue(H_EN1_PORT,H_EN1_PIN,DIO_PIN_HIGH);
    11cc:	83 e0       	ldi	r24, 0x03	; 3
    11ce:	64 e0       	ldi	r22, 0x04	; 4
    11d0:	41 e0       	ldi	r20, 0x01	; 1
    11d2:	0e 94 9a 0c 	call	0x1934	; 0x1934 <DIO_setPinValue>
	DIO_setPinDirection(H_A1_PORT,H_A1_PIN,DIO_PIN_OUTPUT);
    11d6:	82 e0       	ldi	r24, 0x02	; 2
    11d8:	63 e0       	ldi	r22, 0x03	; 3
    11da:	41 e0       	ldi	r20, 0x01	; 1
    11dc:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <DIO_setPinDirection>
	DIO_setPinDirection(H_A2_PORT,H_A2_PIN,DIO_PIN_OUTPUT);
    11e0:	82 e0       	ldi	r24, 0x02	; 2
    11e2:	64 e0       	ldi	r22, 0x04	; 4
    11e4:	41 e0       	ldi	r20, 0x01	; 1
    11e6:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <DIO_setPinDirection>
	//motor b l293d
	DIO_setPinDirection(H_EN2_PORT,H_EN2_PIN,DIO_PIN_OUTPUT);
    11ea:	83 e0       	ldi	r24, 0x03	; 3
    11ec:	67 e0       	ldi	r22, 0x07	; 7
    11ee:	41 e0       	ldi	r20, 0x01	; 1
    11f0:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <DIO_setPinDirection>
	DIO_setPinValue(H_EN2_PORT,H_EN2_PIN,DIO_PIN_HIGH);
    11f4:	83 e0       	ldi	r24, 0x03	; 3
    11f6:	67 e0       	ldi	r22, 0x07	; 7
    11f8:	41 e0       	ldi	r20, 0x01	; 1
    11fa:	0e 94 9a 0c 	call	0x1934	; 0x1934 <DIO_setPinValue>
	DIO_setPinDirection(H_A3_PORT,H_A3_PIN,DIO_PIN_OUTPUT);
    11fe:	82 e0       	ldi	r24, 0x02	; 2
    1200:	65 e0       	ldi	r22, 0x05	; 5
    1202:	41 e0       	ldi	r20, 0x01	; 1
    1204:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <DIO_setPinDirection>
	DIO_setPinDirection(H_A4_PORT,H_A4_PIN,DIO_PIN_OUTPUT);
    1208:	82 e0       	ldi	r24, 0x02	; 2
    120a:	66 e0       	ldi	r22, 0x06	; 6
    120c:	41 e0       	ldi	r20, 0x01	; 1
    120e:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <DIO_setPinDirection>
	//motor a l9110
	DIO_setPinDirection(A_1A_PORT,A_1A_PIN,DIO_PIN_OUTPUT);
    1212:	81 e0       	ldi	r24, 0x01	; 1
    1214:	67 e0       	ldi	r22, 0x07	; 7
    1216:	41 e0       	ldi	r20, 0x01	; 1
    1218:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <DIO_setPinDirection>
			DIO_setPinDirection(A_2A_PORT,A_2A_PIN,DIO_PIN_OUTPUT);
    121c:	82 e0       	ldi	r24, 0x02	; 2
    121e:	61 e0       	ldi	r22, 0x01	; 1
    1220:	41 e0       	ldi	r20, 0x01	; 1
    1222:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <DIO_setPinDirection>
	//motor b l9110
			 DIO_setPinDirection(B_1A_PORT,B_1A_PIN,DIO_PIN_OUTPUT);
    1226:	81 e0       	ldi	r24, 0x01	; 1
    1228:	65 e0       	ldi	r22, 0x05	; 5
    122a:	41 e0       	ldi	r20, 0x01	; 1
    122c:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <DIO_setPinDirection>
					DIO_setPinDirection(B_2A_PORT,B_2A_PIN,DIO_PIN_OUTPUT);
    1230:	81 e0       	ldi	r24, 0x01	; 1
    1232:	66 e0       	ldi	r22, 0x06	; 6
    1234:	41 e0       	ldi	r20, 0x01	; 1
    1236:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <DIO_setPinDirection>
switch(direction)
    123a:	89 81       	ldd	r24, Y+1	; 0x01
    123c:	28 2f       	mov	r18, r24
    123e:	30 e0       	ldi	r19, 0x00	; 0
    1240:	3b 83       	std	Y+3, r19	; 0x03
    1242:	2a 83       	std	Y+2, r18	; 0x02
    1244:	8a 81       	ldd	r24, Y+2	; 0x02
    1246:	9b 81       	ldd	r25, Y+3	; 0x03
    1248:	81 30       	cpi	r24, 0x01	; 1
    124a:	91 05       	cpc	r25, r1
    124c:	31 f0       	breq	.+12     	; 0x125a <DCMOTOR_start+0xa6>
    124e:	2a 81       	ldd	r18, Y+2	; 0x02
    1250:	3b 81       	ldd	r19, Y+3	; 0x03
    1252:	22 30       	cpi	r18, 0x02	; 2
    1254:	31 05       	cpc	r19, r1
    1256:	51 f1       	breq	.+84     	; 0x12ac <DCMOTOR_start+0xf8>
    1258:	51 c0       	rjmp	.+162    	; 0x12fc <DCMOTOR_start+0x148>
{
case 1:
{//motor a l293d
	DIO_setPinValue(H_A1_PORT,H_A1_PIN,DIO_PIN_HIGH);
    125a:	82 e0       	ldi	r24, 0x02	; 2
    125c:	63 e0       	ldi	r22, 0x03	; 3
    125e:	41 e0       	ldi	r20, 0x01	; 1
    1260:	0e 94 9a 0c 	call	0x1934	; 0x1934 <DIO_setPinValue>
		DIO_setPinValue(H_A2_PORT,H_A2_PIN,DIO_PIN_LOW);
    1264:	82 e0       	ldi	r24, 0x02	; 2
    1266:	64 e0       	ldi	r22, 0x04	; 4
    1268:	40 e0       	ldi	r20, 0x00	; 0
    126a:	0e 94 9a 0c 	call	0x1934	; 0x1934 <DIO_setPinValue>
		//motor b l293d
		DIO_setPinValue(H_A3_PORT,H_A3_PIN,DIO_PIN_HIGH);
    126e:	82 e0       	ldi	r24, 0x02	; 2
    1270:	65 e0       	ldi	r22, 0x05	; 5
    1272:	41 e0       	ldi	r20, 0x01	; 1
    1274:	0e 94 9a 0c 	call	0x1934	; 0x1934 <DIO_setPinValue>
		DIO_setPinValue(H_A4_PORT,H_A4_PIN,DIO_PIN_LOW);
    1278:	82 e0       	ldi	r24, 0x02	; 2
    127a:	66 e0       	ldi	r22, 0x06	; 6
    127c:	40 e0       	ldi	r20, 0x00	; 0
    127e:	0e 94 9a 0c 	call	0x1934	; 0x1934 <DIO_setPinValue>
		//motor a l9110
		DIO_setPinValue(A_1A_PORT,A_1A_PIN,DIO_PIN_HIGH);
    1282:	81 e0       	ldi	r24, 0x01	; 1
    1284:	67 e0       	ldi	r22, 0x07	; 7
    1286:	41 e0       	ldi	r20, 0x01	; 1
    1288:	0e 94 9a 0c 	call	0x1934	; 0x1934 <DIO_setPinValue>
				DIO_setPinValue(A_2A_PORT,A_2A_PIN,DIO_PIN_LOW);
    128c:	82 e0       	ldi	r24, 0x02	; 2
    128e:	61 e0       	ldi	r22, 0x01	; 1
    1290:	40 e0       	ldi	r20, 0x00	; 0
    1292:	0e 94 9a 0c 	call	0x1934	; 0x1934 <DIO_setPinValue>
		//motor b l9110
				DIO_setPinValue(B_1A_PORT,B_1A_PIN,DIO_PIN_HIGH);
    1296:	81 e0       	ldi	r24, 0x01	; 1
    1298:	65 e0       	ldi	r22, 0x05	; 5
    129a:	41 e0       	ldi	r20, 0x01	; 1
    129c:	0e 94 9a 0c 	call	0x1934	; 0x1934 <DIO_setPinValue>
					DIO_setPinValue(B_2A_PORT,B_2A_PIN,DIO_PIN_LOW);
    12a0:	81 e0       	ldi	r24, 0x01	; 1
    12a2:	66 e0       	ldi	r22, 0x06	; 6
    12a4:	40 e0       	ldi	r20, 0x00	; 0
    12a6:	0e 94 9a 0c 	call	0x1934	; 0x1934 <DIO_setPinValue>
    12aa:	28 c0       	rjmp	.+80     	; 0x12fc <DCMOTOR_start+0x148>

	break;
}
case 2:
{//motor a l293d
	DIO_setPinValue(H_A1_PORT,H_A1_PIN,DIO_PIN_LOW);
    12ac:	82 e0       	ldi	r24, 0x02	; 2
    12ae:	63 e0       	ldi	r22, 0x03	; 3
    12b0:	40 e0       	ldi	r20, 0x00	; 0
    12b2:	0e 94 9a 0c 	call	0x1934	; 0x1934 <DIO_setPinValue>
		DIO_setPinValue(H_A2_PORT,H_A2_PIN,DIO_PIN_HIGH);
    12b6:	82 e0       	ldi	r24, 0x02	; 2
    12b8:	64 e0       	ldi	r22, 0x04	; 4
    12ba:	41 e0       	ldi	r20, 0x01	; 1
    12bc:	0e 94 9a 0c 	call	0x1934	; 0x1934 <DIO_setPinValue>
	//motor b l293d
		DIO_setPinValue(H_A3_PORT,H_A3_PIN,DIO_PIN_LOW);
    12c0:	82 e0       	ldi	r24, 0x02	; 2
    12c2:	65 e0       	ldi	r22, 0x05	; 5
    12c4:	40 e0       	ldi	r20, 0x00	; 0
    12c6:	0e 94 9a 0c 	call	0x1934	; 0x1934 <DIO_setPinValue>
			DIO_setPinValue(H_A4_PORT,H_A4_PIN,DIO_PIN_HIGH);
    12ca:	82 e0       	ldi	r24, 0x02	; 2
    12cc:	66 e0       	ldi	r22, 0x06	; 6
    12ce:	41 e0       	ldi	r20, 0x01	; 1
    12d0:	0e 94 9a 0c 	call	0x1934	; 0x1934 <DIO_setPinValue>
	//motor a l9110
			DIO_setPinValue(A_1A_PORT,A_1A_PIN,DIO_PIN_LOW);
    12d4:	81 e0       	ldi	r24, 0x01	; 1
    12d6:	67 e0       	ldi	r22, 0x07	; 7
    12d8:	40 e0       	ldi	r20, 0x00	; 0
    12da:	0e 94 9a 0c 	call	0x1934	; 0x1934 <DIO_setPinValue>
					DIO_setPinValue(A_2A_PORT,A_2A_PIN,DIO_PIN_HIGH);
    12de:	82 e0       	ldi	r24, 0x02	; 2
    12e0:	61 e0       	ldi	r22, 0x01	; 1
    12e2:	41 e0       	ldi	r20, 0x01	; 1
    12e4:	0e 94 9a 0c 	call	0x1934	; 0x1934 <DIO_setPinValue>
	//motor b l9110
					DIO_setPinValue(B_1A_PORT,B_1A_PIN,DIO_PIN_LOW);
    12e8:	81 e0       	ldi	r24, 0x01	; 1
    12ea:	65 e0       	ldi	r22, 0x05	; 5
    12ec:	40 e0       	ldi	r20, 0x00	; 0
    12ee:	0e 94 9a 0c 	call	0x1934	; 0x1934 <DIO_setPinValue>
						DIO_setPinValue(B_2A_PORT,B_2A_PIN,DIO_PIN_HIGH);
    12f2:	81 e0       	ldi	r24, 0x01	; 1
    12f4:	66 e0       	ldi	r22, 0x06	; 6
    12f6:	41 e0       	ldi	r20, 0x01	; 1
    12f8:	0e 94 9a 0c 	call	0x1934	; 0x1934 <DIO_setPinValue>





}
    12fc:	0f 90       	pop	r0
    12fe:	0f 90       	pop	r0
    1300:	0f 90       	pop	r0
    1302:	cf 91       	pop	r28
    1304:	df 91       	pop	r29
    1306:	08 95       	ret

00001308 <DCMOTOR_stop>:
void DCMOTOR_stop(void)
{
    1308:	df 93       	push	r29
    130a:	cf 93       	push	r28
    130c:	cd b7       	in	r28, 0x3d	; 61
    130e:	de b7       	in	r29, 0x3e	; 62
//l293d b
	DIO_setPinDirection(H_EN2_PORT,H_EN2_PIN,DIO_PIN_OUTPUT);
    1310:	83 e0       	ldi	r24, 0x03	; 3
    1312:	67 e0       	ldi	r22, 0x07	; 7
    1314:	41 e0       	ldi	r20, 0x01	; 1
    1316:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <DIO_setPinDirection>
		DIO_setPinValue(H_EN2_PORT,H_EN2_PIN,DIO_PIN_LOW);
    131a:	83 e0       	ldi	r24, 0x03	; 3
    131c:	67 e0       	ldi	r22, 0x07	; 7
    131e:	40 e0       	ldi	r20, 0x00	; 0
    1320:	0e 94 9a 0c 	call	0x1934	; 0x1934 <DIO_setPinValue>
	//l293d a
		DIO_setPinDirection(H_EN1_PORT,H_EN1_PIN,DIO_PIN_OUTPUT);
    1324:	83 e0       	ldi	r24, 0x03	; 3
    1326:	64 e0       	ldi	r22, 0x04	; 4
    1328:	41 e0       	ldi	r20, 0x01	; 1
    132a:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <DIO_setPinDirection>
			DIO_setPinValue(H_EN1_PORT,H_EN1_PIN,DIO_PIN_LOW);
    132e:	83 e0       	ldi	r24, 0x03	; 3
    1330:	64 e0       	ldi	r22, 0x04	; 4
    1332:	40 e0       	ldi	r20, 0x00	; 0
    1334:	0e 94 9a 0c 	call	0x1934	; 0x1934 <DIO_setPinValue>
	//l9110 a
			DIO_setPinDirection(A_1A_PORT,A_1A_PIN,DIO_PIN_OUTPUT);
    1338:	81 e0       	ldi	r24, 0x01	; 1
    133a:	67 e0       	ldi	r22, 0x07	; 7
    133c:	41 e0       	ldi	r20, 0x01	; 1
    133e:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <DIO_setPinDirection>
				DIO_setPinDirection(A_2A_PORT,A_2A_PIN,DIO_PIN_OUTPUT);
    1342:	82 e0       	ldi	r24, 0x02	; 2
    1344:	61 e0       	ldi	r22, 0x01	; 1
    1346:	41 e0       	ldi	r20, 0x01	; 1
    1348:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <DIO_setPinDirection>
				DIO_setPinValue(A_1A_PORT,A_1A_PIN,DIO_PIN_LOW);
    134c:	81 e0       	ldi	r24, 0x01	; 1
    134e:	67 e0       	ldi	r22, 0x07	; 7
    1350:	40 e0       	ldi	r20, 0x00	; 0
    1352:	0e 94 9a 0c 	call	0x1934	; 0x1934 <DIO_setPinValue>
				DIO_setPinValue(A_2A_PORT,A_2A_PIN,DIO_PIN_LOW);
    1356:	82 e0       	ldi	r24, 0x02	; 2
    1358:	61 e0       	ldi	r22, 0x01	; 1
    135a:	40 e0       	ldi	r20, 0x00	; 0
    135c:	0e 94 9a 0c 	call	0x1934	; 0x1934 <DIO_setPinValue>
	//l9110 b
				  DIO_setPinDirection(B_1A_PORT,B_1A_PIN,DIO_PIN_OUTPUT);
    1360:	81 e0       	ldi	r24, 0x01	; 1
    1362:	65 e0       	ldi	r22, 0x05	; 5
    1364:	41 e0       	ldi	r20, 0x01	; 1
    1366:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <DIO_setPinDirection>
					DIO_setPinDirection(B_2A_PORT,B_2A_PIN,DIO_PIN_OUTPUT);
    136a:	81 e0       	ldi	r24, 0x01	; 1
    136c:	66 e0       	ldi	r22, 0x06	; 6
    136e:	41 e0       	ldi	r20, 0x01	; 1
    1370:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <DIO_setPinDirection>
					DIO_setPinValue(B_1A_PORT,B_1A_PIN,DIO_PIN_LOW);
    1374:	81 e0       	ldi	r24, 0x01	; 1
    1376:	65 e0       	ldi	r22, 0x05	; 5
    1378:	40 e0       	ldi	r20, 0x00	; 0
    137a:	0e 94 9a 0c 	call	0x1934	; 0x1934 <DIO_setPinValue>
					DIO_setPinValue(B_2A_PORT,B_2A_PIN,DIO_PIN_LOW);
    137e:	81 e0       	ldi	r24, 0x01	; 1
    1380:	66 e0       	ldi	r22, 0x06	; 6
    1382:	40 e0       	ldi	r20, 0x00	; 0
    1384:	0e 94 9a 0c 	call	0x1934	; 0x1934 <DIO_setPinValue>
}
    1388:	cf 91       	pop	r28
    138a:	df 91       	pop	r29
    138c:	08 95       	ret

0000138e <DCMOTOR_right>:
void DCMOTOR_right(void)
{
    138e:	df 93       	push	r29
    1390:	cf 93       	push	r28
    1392:	cd b7       	in	r28, 0x3d	; 61
    1394:	de b7       	in	r29, 0x3e	; 62
    1396:	2e 97       	sbiw	r28, 0x0e	; 14
    1398:	0f b6       	in	r0, 0x3f	; 63
    139a:	f8 94       	cli
    139c:	de bf       	out	0x3e, r29	; 62
    139e:	0f be       	out	0x3f, r0	; 63
    13a0:	cd bf       	out	0x3d, r28	; 61
	L9110_DCMOTOR_start(1,'A');
    13a2:	81 e0       	ldi	r24, 0x01	; 1
    13a4:	61 e4       	ldi	r22, 0x41	; 65
    13a6:	0e 94 10 08 	call	0x1020	; 0x1020 <L9110_DCMOTOR_start>
	L9110_DCMOTOR_start(1,'B');
    13aa:	81 e0       	ldi	r24, 0x01	; 1
    13ac:	62 e4       	ldi	r22, 0x42	; 66
    13ae:	0e 94 10 08 	call	0x1020	; 0x1020 <L9110_DCMOTOR_start>
    13b2:	80 e0       	ldi	r24, 0x00	; 0
    13b4:	90 e8       	ldi	r25, 0x80	; 128
    13b6:	ab eb       	ldi	r26, 0xBB	; 187
    13b8:	b4 e4       	ldi	r27, 0x44	; 68
    13ba:	8b 87       	std	Y+11, r24	; 0x0b
    13bc:	9c 87       	std	Y+12, r25	; 0x0c
    13be:	ad 87       	std	Y+13, r26	; 0x0d
    13c0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13c2:	6b 85       	ldd	r22, Y+11	; 0x0b
    13c4:	7c 85       	ldd	r23, Y+12	; 0x0c
    13c6:	8d 85       	ldd	r24, Y+13	; 0x0d
    13c8:	9e 85       	ldd	r25, Y+14	; 0x0e
    13ca:	20 e0       	ldi	r18, 0x00	; 0
    13cc:	30 e0       	ldi	r19, 0x00	; 0
    13ce:	4a e7       	ldi	r20, 0x7A	; 122
    13d0:	55 e4       	ldi	r21, 0x45	; 69
    13d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13d6:	dc 01       	movw	r26, r24
    13d8:	cb 01       	movw	r24, r22
    13da:	8f 83       	std	Y+7, r24	; 0x07
    13dc:	98 87       	std	Y+8, r25	; 0x08
    13de:	a9 87       	std	Y+9, r26	; 0x09
    13e0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    13e2:	6f 81       	ldd	r22, Y+7	; 0x07
    13e4:	78 85       	ldd	r23, Y+8	; 0x08
    13e6:	89 85       	ldd	r24, Y+9	; 0x09
    13e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    13ea:	20 e0       	ldi	r18, 0x00	; 0
    13ec:	30 e0       	ldi	r19, 0x00	; 0
    13ee:	40 e8       	ldi	r20, 0x80	; 128
    13f0:	5f e3       	ldi	r21, 0x3F	; 63
    13f2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    13f6:	88 23       	and	r24, r24
    13f8:	2c f4       	brge	.+10     	; 0x1404 <DCMOTOR_right+0x76>
		__ticks = 1;
    13fa:	81 e0       	ldi	r24, 0x01	; 1
    13fc:	90 e0       	ldi	r25, 0x00	; 0
    13fe:	9e 83       	std	Y+6, r25	; 0x06
    1400:	8d 83       	std	Y+5, r24	; 0x05
    1402:	3f c0       	rjmp	.+126    	; 0x1482 <DCMOTOR_right+0xf4>
	else if (__tmp > 65535)
    1404:	6f 81       	ldd	r22, Y+7	; 0x07
    1406:	78 85       	ldd	r23, Y+8	; 0x08
    1408:	89 85       	ldd	r24, Y+9	; 0x09
    140a:	9a 85       	ldd	r25, Y+10	; 0x0a
    140c:	20 e0       	ldi	r18, 0x00	; 0
    140e:	3f ef       	ldi	r19, 0xFF	; 255
    1410:	4f e7       	ldi	r20, 0x7F	; 127
    1412:	57 e4       	ldi	r21, 0x47	; 71
    1414:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1418:	18 16       	cp	r1, r24
    141a:	4c f5       	brge	.+82     	; 0x146e <DCMOTOR_right+0xe0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    141c:	6b 85       	ldd	r22, Y+11	; 0x0b
    141e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1420:	8d 85       	ldd	r24, Y+13	; 0x0d
    1422:	9e 85       	ldd	r25, Y+14	; 0x0e
    1424:	20 e0       	ldi	r18, 0x00	; 0
    1426:	30 e0       	ldi	r19, 0x00	; 0
    1428:	40 e2       	ldi	r20, 0x20	; 32
    142a:	51 e4       	ldi	r21, 0x41	; 65
    142c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1430:	dc 01       	movw	r26, r24
    1432:	cb 01       	movw	r24, r22
    1434:	bc 01       	movw	r22, r24
    1436:	cd 01       	movw	r24, r26
    1438:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    143c:	dc 01       	movw	r26, r24
    143e:	cb 01       	movw	r24, r22
    1440:	9e 83       	std	Y+6, r25	; 0x06
    1442:	8d 83       	std	Y+5, r24	; 0x05
    1444:	0f c0       	rjmp	.+30     	; 0x1464 <DCMOTOR_right+0xd6>
    1446:	80 e9       	ldi	r24, 0x90	; 144
    1448:	91 e0       	ldi	r25, 0x01	; 1
    144a:	9c 83       	std	Y+4, r25	; 0x04
    144c:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    144e:	8b 81       	ldd	r24, Y+3	; 0x03
    1450:	9c 81       	ldd	r25, Y+4	; 0x04
    1452:	01 97       	sbiw	r24, 0x01	; 1
    1454:	f1 f7       	brne	.-4      	; 0x1452 <DCMOTOR_right+0xc4>
    1456:	9c 83       	std	Y+4, r25	; 0x04
    1458:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    145a:	8d 81       	ldd	r24, Y+5	; 0x05
    145c:	9e 81       	ldd	r25, Y+6	; 0x06
    145e:	01 97       	sbiw	r24, 0x01	; 1
    1460:	9e 83       	std	Y+6, r25	; 0x06
    1462:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1464:	8d 81       	ldd	r24, Y+5	; 0x05
    1466:	9e 81       	ldd	r25, Y+6	; 0x06
    1468:	00 97       	sbiw	r24, 0x00	; 0
    146a:	69 f7       	brne	.-38     	; 0x1446 <DCMOTOR_right+0xb8>
    146c:	14 c0       	rjmp	.+40     	; 0x1496 <DCMOTOR_right+0x108>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    146e:	6f 81       	ldd	r22, Y+7	; 0x07
    1470:	78 85       	ldd	r23, Y+8	; 0x08
    1472:	89 85       	ldd	r24, Y+9	; 0x09
    1474:	9a 85       	ldd	r25, Y+10	; 0x0a
    1476:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    147a:	dc 01       	movw	r26, r24
    147c:	cb 01       	movw	r24, r22
    147e:	9e 83       	std	Y+6, r25	; 0x06
    1480:	8d 83       	std	Y+5, r24	; 0x05
    1482:	8d 81       	ldd	r24, Y+5	; 0x05
    1484:	9e 81       	ldd	r25, Y+6	; 0x06
    1486:	9a 83       	std	Y+2, r25	; 0x02
    1488:	89 83       	std	Y+1, r24	; 0x01
    148a:	89 81       	ldd	r24, Y+1	; 0x01
    148c:	9a 81       	ldd	r25, Y+2	; 0x02
    148e:	01 97       	sbiw	r24, 0x01	; 1
    1490:	f1 f7       	brne	.-4      	; 0x148e <DCMOTOR_right+0x100>
    1492:	9a 83       	std	Y+2, r25	; 0x02
    1494:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1500);
	DCMOTOR_stop();
    1496:	0e 94 84 09 	call	0x1308	; 0x1308 <DCMOTOR_stop>


}
    149a:	2e 96       	adiw	r28, 0x0e	; 14
    149c:	0f b6       	in	r0, 0x3f	; 63
    149e:	f8 94       	cli
    14a0:	de bf       	out	0x3e, r29	; 62
    14a2:	0f be       	out	0x3f, r0	; 63
    14a4:	cd bf       	out	0x3d, r28	; 61
    14a6:	cf 91       	pop	r28
    14a8:	df 91       	pop	r29
    14aa:	08 95       	ret

000014ac <DCMOTOR_left>:
void DCMOTOR_left(void)
{
    14ac:	df 93       	push	r29
    14ae:	cf 93       	push	r28
    14b0:	cd b7       	in	r28, 0x3d	; 61
    14b2:	de b7       	in	r29, 0x3e	; 62
    14b4:	2e 97       	sbiw	r28, 0x0e	; 14
    14b6:	0f b6       	in	r0, 0x3f	; 63
    14b8:	f8 94       	cli
    14ba:	de bf       	out	0x3e, r29	; 62
    14bc:	0f be       	out	0x3f, r0	; 63
    14be:	cd bf       	out	0x3d, r28	; 61



	L293D_DCMOTOR_start(1,'A');
    14c0:	81 e0       	ldi	r24, 0x01	; 1
    14c2:	61 e4       	ldi	r22, 0x41	; 65
    14c4:	0e 94 47 07 	call	0xe8e	; 0xe8e <L293D_DCMOTOR_start>
	L293D_DCMOTOR_start(1,'B');
    14c8:	81 e0       	ldi	r24, 0x01	; 1
    14ca:	62 e4       	ldi	r22, 0x42	; 66
    14cc:	0e 94 47 07 	call	0xe8e	; 0xe8e <L293D_DCMOTOR_start>
    14d0:	80 e0       	ldi	r24, 0x00	; 0
    14d2:	90 e0       	ldi	r25, 0x00	; 0
    14d4:	aa ef       	ldi	r26, 0xFA	; 250
    14d6:	b4 e4       	ldi	r27, 0x44	; 68
    14d8:	8b 87       	std	Y+11, r24	; 0x0b
    14da:	9c 87       	std	Y+12, r25	; 0x0c
    14dc:	ad 87       	std	Y+13, r26	; 0x0d
    14de:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14e0:	6b 85       	ldd	r22, Y+11	; 0x0b
    14e2:	7c 85       	ldd	r23, Y+12	; 0x0c
    14e4:	8d 85       	ldd	r24, Y+13	; 0x0d
    14e6:	9e 85       	ldd	r25, Y+14	; 0x0e
    14e8:	20 e0       	ldi	r18, 0x00	; 0
    14ea:	30 e0       	ldi	r19, 0x00	; 0
    14ec:	4a e7       	ldi	r20, 0x7A	; 122
    14ee:	55 e4       	ldi	r21, 0x45	; 69
    14f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14f4:	dc 01       	movw	r26, r24
    14f6:	cb 01       	movw	r24, r22
    14f8:	8f 83       	std	Y+7, r24	; 0x07
    14fa:	98 87       	std	Y+8, r25	; 0x08
    14fc:	a9 87       	std	Y+9, r26	; 0x09
    14fe:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1500:	6f 81       	ldd	r22, Y+7	; 0x07
    1502:	78 85       	ldd	r23, Y+8	; 0x08
    1504:	89 85       	ldd	r24, Y+9	; 0x09
    1506:	9a 85       	ldd	r25, Y+10	; 0x0a
    1508:	20 e0       	ldi	r18, 0x00	; 0
    150a:	30 e0       	ldi	r19, 0x00	; 0
    150c:	40 e8       	ldi	r20, 0x80	; 128
    150e:	5f e3       	ldi	r21, 0x3F	; 63
    1510:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1514:	88 23       	and	r24, r24
    1516:	2c f4       	brge	.+10     	; 0x1522 <DCMOTOR_left+0x76>
		__ticks = 1;
    1518:	81 e0       	ldi	r24, 0x01	; 1
    151a:	90 e0       	ldi	r25, 0x00	; 0
    151c:	9e 83       	std	Y+6, r25	; 0x06
    151e:	8d 83       	std	Y+5, r24	; 0x05
    1520:	3f c0       	rjmp	.+126    	; 0x15a0 <DCMOTOR_left+0xf4>
	else if (__tmp > 65535)
    1522:	6f 81       	ldd	r22, Y+7	; 0x07
    1524:	78 85       	ldd	r23, Y+8	; 0x08
    1526:	89 85       	ldd	r24, Y+9	; 0x09
    1528:	9a 85       	ldd	r25, Y+10	; 0x0a
    152a:	20 e0       	ldi	r18, 0x00	; 0
    152c:	3f ef       	ldi	r19, 0xFF	; 255
    152e:	4f e7       	ldi	r20, 0x7F	; 127
    1530:	57 e4       	ldi	r21, 0x47	; 71
    1532:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1536:	18 16       	cp	r1, r24
    1538:	4c f5       	brge	.+82     	; 0x158c <DCMOTOR_left+0xe0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    153a:	6b 85       	ldd	r22, Y+11	; 0x0b
    153c:	7c 85       	ldd	r23, Y+12	; 0x0c
    153e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1540:	9e 85       	ldd	r25, Y+14	; 0x0e
    1542:	20 e0       	ldi	r18, 0x00	; 0
    1544:	30 e0       	ldi	r19, 0x00	; 0
    1546:	40 e2       	ldi	r20, 0x20	; 32
    1548:	51 e4       	ldi	r21, 0x41	; 65
    154a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    154e:	dc 01       	movw	r26, r24
    1550:	cb 01       	movw	r24, r22
    1552:	bc 01       	movw	r22, r24
    1554:	cd 01       	movw	r24, r26
    1556:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    155a:	dc 01       	movw	r26, r24
    155c:	cb 01       	movw	r24, r22
    155e:	9e 83       	std	Y+6, r25	; 0x06
    1560:	8d 83       	std	Y+5, r24	; 0x05
    1562:	0f c0       	rjmp	.+30     	; 0x1582 <DCMOTOR_left+0xd6>
    1564:	80 e9       	ldi	r24, 0x90	; 144
    1566:	91 e0       	ldi	r25, 0x01	; 1
    1568:	9c 83       	std	Y+4, r25	; 0x04
    156a:	8b 83       	std	Y+3, r24	; 0x03
    156c:	8b 81       	ldd	r24, Y+3	; 0x03
    156e:	9c 81       	ldd	r25, Y+4	; 0x04
    1570:	01 97       	sbiw	r24, 0x01	; 1
    1572:	f1 f7       	brne	.-4      	; 0x1570 <DCMOTOR_left+0xc4>
    1574:	9c 83       	std	Y+4, r25	; 0x04
    1576:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1578:	8d 81       	ldd	r24, Y+5	; 0x05
    157a:	9e 81       	ldd	r25, Y+6	; 0x06
    157c:	01 97       	sbiw	r24, 0x01	; 1
    157e:	9e 83       	std	Y+6, r25	; 0x06
    1580:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1582:	8d 81       	ldd	r24, Y+5	; 0x05
    1584:	9e 81       	ldd	r25, Y+6	; 0x06
    1586:	00 97       	sbiw	r24, 0x00	; 0
    1588:	69 f7       	brne	.-38     	; 0x1564 <DCMOTOR_left+0xb8>
    158a:	14 c0       	rjmp	.+40     	; 0x15b4 <DCMOTOR_left+0x108>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    158c:	6f 81       	ldd	r22, Y+7	; 0x07
    158e:	78 85       	ldd	r23, Y+8	; 0x08
    1590:	89 85       	ldd	r24, Y+9	; 0x09
    1592:	9a 85       	ldd	r25, Y+10	; 0x0a
    1594:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1598:	dc 01       	movw	r26, r24
    159a:	cb 01       	movw	r24, r22
    159c:	9e 83       	std	Y+6, r25	; 0x06
    159e:	8d 83       	std	Y+5, r24	; 0x05
    15a0:	8d 81       	ldd	r24, Y+5	; 0x05
    15a2:	9e 81       	ldd	r25, Y+6	; 0x06
    15a4:	9a 83       	std	Y+2, r25	; 0x02
    15a6:	89 83       	std	Y+1, r24	; 0x01
    15a8:	89 81       	ldd	r24, Y+1	; 0x01
    15aa:	9a 81       	ldd	r25, Y+2	; 0x02
    15ac:	01 97       	sbiw	r24, 0x01	; 1
    15ae:	f1 f7       	brne	.-4      	; 0x15ac <DCMOTOR_left+0x100>
    15b0:	9a 83       	std	Y+2, r25	; 0x02
    15b2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2000);
	DCMOTOR_stop();
    15b4:	0e 94 84 09 	call	0x1308	; 0x1308 <DCMOTOR_stop>
}
    15b8:	2e 96       	adiw	r28, 0x0e	; 14
    15ba:	0f b6       	in	r0, 0x3f	; 63
    15bc:	f8 94       	cli
    15be:	de bf       	out	0x3e, r29	; 62
    15c0:	0f be       	out	0x3f, r0	; 63
    15c2:	cd bf       	out	0x3d, r28	; 61
    15c4:	cf 91       	pop	r28
    15c6:	df 91       	pop	r29
    15c8:	08 95       	ret

000015ca <DCMOTOR_uturn>:
void DCMOTOR_uturn(void)
{
    15ca:	df 93       	push	r29
    15cc:	cf 93       	push	r28
    15ce:	cd b7       	in	r28, 0x3d	; 61
    15d0:	de b7       	in	r29, 0x3e	; 62
    15d2:	2e 97       	sbiw	r28, 0x0e	; 14
    15d4:	0f b6       	in	r0, 0x3f	; 63
    15d6:	f8 94       	cli
    15d8:	de bf       	out	0x3e, r29	; 62
    15da:	0f be       	out	0x3f, r0	; 63
    15dc:	cd bf       	out	0x3d, r28	; 61

	L293D_DCMOTOR_start(1,'A');
    15de:	81 e0       	ldi	r24, 0x01	; 1
    15e0:	61 e4       	ldi	r22, 0x41	; 65
    15e2:	0e 94 47 07 	call	0xe8e	; 0xe8e <L293D_DCMOTOR_start>
		L293D_DCMOTOR_start(1,'B');
    15e6:	81 e0       	ldi	r24, 0x01	; 1
    15e8:	62 e4       	ldi	r22, 0x42	; 66
    15ea:	0e 94 47 07 	call	0xe8e	; 0xe8e <L293D_DCMOTOR_start>
    15ee:	80 e0       	ldi	r24, 0x00	; 0
    15f0:	90 e8       	ldi	r25, 0x80	; 128
    15f2:	ab e3       	ldi	r26, 0x3B	; 59
    15f4:	b5 e4       	ldi	r27, 0x45	; 69
    15f6:	8b 87       	std	Y+11, r24	; 0x0b
    15f8:	9c 87       	std	Y+12, r25	; 0x0c
    15fa:	ad 87       	std	Y+13, r26	; 0x0d
    15fc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15fe:	6b 85       	ldd	r22, Y+11	; 0x0b
    1600:	7c 85       	ldd	r23, Y+12	; 0x0c
    1602:	8d 85       	ldd	r24, Y+13	; 0x0d
    1604:	9e 85       	ldd	r25, Y+14	; 0x0e
    1606:	20 e0       	ldi	r18, 0x00	; 0
    1608:	30 e0       	ldi	r19, 0x00	; 0
    160a:	4a e7       	ldi	r20, 0x7A	; 122
    160c:	55 e4       	ldi	r21, 0x45	; 69
    160e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1612:	dc 01       	movw	r26, r24
    1614:	cb 01       	movw	r24, r22
    1616:	8f 83       	std	Y+7, r24	; 0x07
    1618:	98 87       	std	Y+8, r25	; 0x08
    161a:	a9 87       	std	Y+9, r26	; 0x09
    161c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    161e:	6f 81       	ldd	r22, Y+7	; 0x07
    1620:	78 85       	ldd	r23, Y+8	; 0x08
    1622:	89 85       	ldd	r24, Y+9	; 0x09
    1624:	9a 85       	ldd	r25, Y+10	; 0x0a
    1626:	20 e0       	ldi	r18, 0x00	; 0
    1628:	30 e0       	ldi	r19, 0x00	; 0
    162a:	40 e8       	ldi	r20, 0x80	; 128
    162c:	5f e3       	ldi	r21, 0x3F	; 63
    162e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1632:	88 23       	and	r24, r24
    1634:	2c f4       	brge	.+10     	; 0x1640 <DCMOTOR_uturn+0x76>
		__ticks = 1;
    1636:	81 e0       	ldi	r24, 0x01	; 1
    1638:	90 e0       	ldi	r25, 0x00	; 0
    163a:	9e 83       	std	Y+6, r25	; 0x06
    163c:	8d 83       	std	Y+5, r24	; 0x05
    163e:	3f c0       	rjmp	.+126    	; 0x16be <DCMOTOR_uturn+0xf4>
	else if (__tmp > 65535)
    1640:	6f 81       	ldd	r22, Y+7	; 0x07
    1642:	78 85       	ldd	r23, Y+8	; 0x08
    1644:	89 85       	ldd	r24, Y+9	; 0x09
    1646:	9a 85       	ldd	r25, Y+10	; 0x0a
    1648:	20 e0       	ldi	r18, 0x00	; 0
    164a:	3f ef       	ldi	r19, 0xFF	; 255
    164c:	4f e7       	ldi	r20, 0x7F	; 127
    164e:	57 e4       	ldi	r21, 0x47	; 71
    1650:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1654:	18 16       	cp	r1, r24
    1656:	4c f5       	brge	.+82     	; 0x16aa <DCMOTOR_uturn+0xe0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1658:	6b 85       	ldd	r22, Y+11	; 0x0b
    165a:	7c 85       	ldd	r23, Y+12	; 0x0c
    165c:	8d 85       	ldd	r24, Y+13	; 0x0d
    165e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1660:	20 e0       	ldi	r18, 0x00	; 0
    1662:	30 e0       	ldi	r19, 0x00	; 0
    1664:	40 e2       	ldi	r20, 0x20	; 32
    1666:	51 e4       	ldi	r21, 0x41	; 65
    1668:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    166c:	dc 01       	movw	r26, r24
    166e:	cb 01       	movw	r24, r22
    1670:	bc 01       	movw	r22, r24
    1672:	cd 01       	movw	r24, r26
    1674:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1678:	dc 01       	movw	r26, r24
    167a:	cb 01       	movw	r24, r22
    167c:	9e 83       	std	Y+6, r25	; 0x06
    167e:	8d 83       	std	Y+5, r24	; 0x05
    1680:	0f c0       	rjmp	.+30     	; 0x16a0 <DCMOTOR_uturn+0xd6>
    1682:	80 e9       	ldi	r24, 0x90	; 144
    1684:	91 e0       	ldi	r25, 0x01	; 1
    1686:	9c 83       	std	Y+4, r25	; 0x04
    1688:	8b 83       	std	Y+3, r24	; 0x03
    168a:	8b 81       	ldd	r24, Y+3	; 0x03
    168c:	9c 81       	ldd	r25, Y+4	; 0x04
    168e:	01 97       	sbiw	r24, 0x01	; 1
    1690:	f1 f7       	brne	.-4      	; 0x168e <DCMOTOR_uturn+0xc4>
    1692:	9c 83       	std	Y+4, r25	; 0x04
    1694:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1696:	8d 81       	ldd	r24, Y+5	; 0x05
    1698:	9e 81       	ldd	r25, Y+6	; 0x06
    169a:	01 97       	sbiw	r24, 0x01	; 1
    169c:	9e 83       	std	Y+6, r25	; 0x06
    169e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16a0:	8d 81       	ldd	r24, Y+5	; 0x05
    16a2:	9e 81       	ldd	r25, Y+6	; 0x06
    16a4:	00 97       	sbiw	r24, 0x00	; 0
    16a6:	69 f7       	brne	.-38     	; 0x1682 <DCMOTOR_uturn+0xb8>
    16a8:	14 c0       	rjmp	.+40     	; 0x16d2 <DCMOTOR_uturn+0x108>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16aa:	6f 81       	ldd	r22, Y+7	; 0x07
    16ac:	78 85       	ldd	r23, Y+8	; 0x08
    16ae:	89 85       	ldd	r24, Y+9	; 0x09
    16b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    16b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16b6:	dc 01       	movw	r26, r24
    16b8:	cb 01       	movw	r24, r22
    16ba:	9e 83       	std	Y+6, r25	; 0x06
    16bc:	8d 83       	std	Y+5, r24	; 0x05
    16be:	8d 81       	ldd	r24, Y+5	; 0x05
    16c0:	9e 81       	ldd	r25, Y+6	; 0x06
    16c2:	9a 83       	std	Y+2, r25	; 0x02
    16c4:	89 83       	std	Y+1, r24	; 0x01
    16c6:	89 81       	ldd	r24, Y+1	; 0x01
    16c8:	9a 81       	ldd	r25, Y+2	; 0x02
    16ca:	01 97       	sbiw	r24, 0x01	; 1
    16cc:	f1 f7       	brne	.-4      	; 0x16ca <DCMOTOR_uturn+0x100>
    16ce:	9a 83       	std	Y+2, r25	; 0x02
    16d0:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(3000);
		DCMOTOR_stop();
    16d2:	0e 94 84 09 	call	0x1308	; 0x1308 <DCMOTOR_stop>


}
    16d6:	2e 96       	adiw	r28, 0x0e	; 14
    16d8:	0f b6       	in	r0, 0x3f	; 63
    16da:	f8 94       	cli
    16dc:	de bf       	out	0x3e, r29	; 62
    16de:	0f be       	out	0x3f, r0	; 63
    16e0:	cd bf       	out	0x3d, r28	; 61
    16e2:	cf 91       	pop	r28
    16e4:	df 91       	pop	r29
    16e6:	08 95       	ret

000016e8 <DIO_setPinDirection>:
#include "BIT_MATH.h"
#include "DIO_interface.h"
#include "DIO_private.h"

void DIO_setPinDirection(u8 PortId, u8 PinId, u8 PinDirection)
{
    16e8:	df 93       	push	r29
    16ea:	cf 93       	push	r28
    16ec:	cd b7       	in	r28, 0x3d	; 61
    16ee:	de b7       	in	r29, 0x3e	; 62
    16f0:	2d 97       	sbiw	r28, 0x0d	; 13
    16f2:	0f b6       	in	r0, 0x3f	; 63
    16f4:	f8 94       	cli
    16f6:	de bf       	out	0x3e, r29	; 62
    16f8:	0f be       	out	0x3f, r0	; 63
    16fa:	cd bf       	out	0x3d, r28	; 61
    16fc:	89 83       	std	Y+1, r24	; 0x01
    16fe:	6a 83       	std	Y+2, r22	; 0x02
    1700:	4b 83       	std	Y+3, r20	; 0x03
	if((PortId<=3)&&(PinId<=7)&&((PinDirection==DIO_PIN_OUTPUT)||(PinDirection==DIO_PIN_INPUT)))
    1702:	89 81       	ldd	r24, Y+1	; 0x01
    1704:	84 30       	cpi	r24, 0x04	; 4
    1706:	08 f0       	brcs	.+2      	; 0x170a <DIO_setPinDirection+0x22>
    1708:	0c c1       	rjmp	.+536    	; 0x1922 <DIO_setPinDirection+0x23a>
    170a:	8a 81       	ldd	r24, Y+2	; 0x02
    170c:	88 30       	cpi	r24, 0x08	; 8
    170e:	08 f0       	brcs	.+2      	; 0x1712 <DIO_setPinDirection+0x2a>
    1710:	08 c1       	rjmp	.+528    	; 0x1922 <DIO_setPinDirection+0x23a>
    1712:	8b 81       	ldd	r24, Y+3	; 0x03
    1714:	81 30       	cpi	r24, 0x01	; 1
    1716:	21 f0       	breq	.+8      	; 0x1720 <DIO_setPinDirection+0x38>
    1718:	8b 81       	ldd	r24, Y+3	; 0x03
    171a:	88 23       	and	r24, r24
    171c:	09 f0       	breq	.+2      	; 0x1720 <DIO_setPinDirection+0x38>
    171e:	01 c1       	rjmp	.+514    	; 0x1922 <DIO_setPinDirection+0x23a>
	{
	switch(PortId)
    1720:	89 81       	ldd	r24, Y+1	; 0x01
    1722:	28 2f       	mov	r18, r24
    1724:	30 e0       	ldi	r19, 0x00	; 0
    1726:	3d 87       	std	Y+13, r19	; 0x0d
    1728:	2c 87       	std	Y+12, r18	; 0x0c
    172a:	8c 85       	ldd	r24, Y+12	; 0x0c
    172c:	9d 85       	ldd	r25, Y+13	; 0x0d
    172e:	81 30       	cpi	r24, 0x01	; 1
    1730:	91 05       	cpc	r25, r1
    1732:	09 f4       	brne	.+2      	; 0x1736 <DIO_setPinDirection+0x4e>
    1734:	4f c0       	rjmp	.+158    	; 0x17d4 <DIO_setPinDirection+0xec>
    1736:	2c 85       	ldd	r18, Y+12	; 0x0c
    1738:	3d 85       	ldd	r19, Y+13	; 0x0d
    173a:	22 30       	cpi	r18, 0x02	; 2
    173c:	31 05       	cpc	r19, r1
    173e:	2c f4       	brge	.+10     	; 0x174a <DIO_setPinDirection+0x62>
    1740:	8c 85       	ldd	r24, Y+12	; 0x0c
    1742:	9d 85       	ldd	r25, Y+13	; 0x0d
    1744:	00 97       	sbiw	r24, 0x00	; 0
    1746:	71 f0       	breq	.+28     	; 0x1764 <DIO_setPinDirection+0x7c>
    1748:	ec c0       	rjmp	.+472    	; 0x1922 <DIO_setPinDirection+0x23a>
    174a:	2c 85       	ldd	r18, Y+12	; 0x0c
    174c:	3d 85       	ldd	r19, Y+13	; 0x0d
    174e:	22 30       	cpi	r18, 0x02	; 2
    1750:	31 05       	cpc	r19, r1
    1752:	09 f4       	brne	.+2      	; 0x1756 <DIO_setPinDirection+0x6e>
    1754:	77 c0       	rjmp	.+238    	; 0x1844 <DIO_setPinDirection+0x15c>
    1756:	8c 85       	ldd	r24, Y+12	; 0x0c
    1758:	9d 85       	ldd	r25, Y+13	; 0x0d
    175a:	83 30       	cpi	r24, 0x03	; 3
    175c:	91 05       	cpc	r25, r1
    175e:	09 f4       	brne	.+2      	; 0x1762 <DIO_setPinDirection+0x7a>
    1760:	a9 c0       	rjmp	.+338    	; 0x18b4 <DIO_setPinDirection+0x1cc>
    1762:	df c0       	rjmp	.+446    	; 0x1922 <DIO_setPinDirection+0x23a>
	{
		case DIO_PORTA:
		switch(PinDirection)
    1764:	8b 81       	ldd	r24, Y+3	; 0x03
    1766:	28 2f       	mov	r18, r24
    1768:	30 e0       	ldi	r19, 0x00	; 0
    176a:	3b 87       	std	Y+11, r19	; 0x0b
    176c:	2a 87       	std	Y+10, r18	; 0x0a
    176e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1770:	9b 85       	ldd	r25, Y+11	; 0x0b
    1772:	00 97       	sbiw	r24, 0x00	; 0
    1774:	31 f0       	breq	.+12     	; 0x1782 <DIO_setPinDirection+0x9a>
    1776:	2a 85       	ldd	r18, Y+10	; 0x0a
    1778:	3b 85       	ldd	r19, Y+11	; 0x0b
    177a:	21 30       	cpi	r18, 0x01	; 1
    177c:	31 05       	cpc	r19, r1
    177e:	b1 f0       	breq	.+44     	; 0x17ac <DIO_setPinDirection+0xc4>
    1780:	d0 c0       	rjmp	.+416    	; 0x1922 <DIO_setPinDirection+0x23a>
		{
			case DIO_PIN_INPUT:
			CLR_BIT(DDRA,PinId);
    1782:	aa e3       	ldi	r26, 0x3A	; 58
    1784:	b0 e0       	ldi	r27, 0x00	; 0
    1786:	ea e3       	ldi	r30, 0x3A	; 58
    1788:	f0 e0       	ldi	r31, 0x00	; 0
    178a:	80 81       	ld	r24, Z
    178c:	48 2f       	mov	r20, r24
    178e:	8a 81       	ldd	r24, Y+2	; 0x02
    1790:	28 2f       	mov	r18, r24
    1792:	30 e0       	ldi	r19, 0x00	; 0
    1794:	81 e0       	ldi	r24, 0x01	; 1
    1796:	90 e0       	ldi	r25, 0x00	; 0
    1798:	02 2e       	mov	r0, r18
    179a:	02 c0       	rjmp	.+4      	; 0x17a0 <DIO_setPinDirection+0xb8>
    179c:	88 0f       	add	r24, r24
    179e:	99 1f       	adc	r25, r25
    17a0:	0a 94       	dec	r0
    17a2:	e2 f7       	brpl	.-8      	; 0x179c <DIO_setPinDirection+0xb4>
    17a4:	80 95       	com	r24
    17a6:	84 23       	and	r24, r20
    17a8:	8c 93       	st	X, r24
    17aa:	bb c0       	rjmp	.+374    	; 0x1922 <DIO_setPinDirection+0x23a>
			break;

			case DIO_PIN_OUTPUT:
			SET_BIT(DDRA,PinId);
    17ac:	aa e3       	ldi	r26, 0x3A	; 58
    17ae:	b0 e0       	ldi	r27, 0x00	; 0
    17b0:	ea e3       	ldi	r30, 0x3A	; 58
    17b2:	f0 e0       	ldi	r31, 0x00	; 0
    17b4:	80 81       	ld	r24, Z
    17b6:	48 2f       	mov	r20, r24
    17b8:	8a 81       	ldd	r24, Y+2	; 0x02
    17ba:	28 2f       	mov	r18, r24
    17bc:	30 e0       	ldi	r19, 0x00	; 0
    17be:	81 e0       	ldi	r24, 0x01	; 1
    17c0:	90 e0       	ldi	r25, 0x00	; 0
    17c2:	02 2e       	mov	r0, r18
    17c4:	02 c0       	rjmp	.+4      	; 0x17ca <DIO_setPinDirection+0xe2>
    17c6:	88 0f       	add	r24, r24
    17c8:	99 1f       	adc	r25, r25
    17ca:	0a 94       	dec	r0
    17cc:	e2 f7       	brpl	.-8      	; 0x17c6 <DIO_setPinDirection+0xde>
    17ce:	84 2b       	or	r24, r20
    17d0:	8c 93       	st	X, r24
    17d2:	a7 c0       	rjmp	.+334    	; 0x1922 <DIO_setPinDirection+0x23a>
			break;
		}
		break;

		case DIO_PORTB:
		switch(PinDirection)
    17d4:	8b 81       	ldd	r24, Y+3	; 0x03
    17d6:	28 2f       	mov	r18, r24
    17d8:	30 e0       	ldi	r19, 0x00	; 0
    17da:	39 87       	std	Y+9, r19	; 0x09
    17dc:	28 87       	std	Y+8, r18	; 0x08
    17de:	88 85       	ldd	r24, Y+8	; 0x08
    17e0:	99 85       	ldd	r25, Y+9	; 0x09
    17e2:	00 97       	sbiw	r24, 0x00	; 0
    17e4:	31 f0       	breq	.+12     	; 0x17f2 <DIO_setPinDirection+0x10a>
    17e6:	28 85       	ldd	r18, Y+8	; 0x08
    17e8:	39 85       	ldd	r19, Y+9	; 0x09
    17ea:	21 30       	cpi	r18, 0x01	; 1
    17ec:	31 05       	cpc	r19, r1
    17ee:	b1 f0       	breq	.+44     	; 0x181c <DIO_setPinDirection+0x134>
    17f0:	98 c0       	rjmp	.+304    	; 0x1922 <DIO_setPinDirection+0x23a>
		{
			case DIO_PIN_INPUT:
			CLR_BIT(DDRB,PinId);
    17f2:	a7 e3       	ldi	r26, 0x37	; 55
    17f4:	b0 e0       	ldi	r27, 0x00	; 0
    17f6:	e7 e3       	ldi	r30, 0x37	; 55
    17f8:	f0 e0       	ldi	r31, 0x00	; 0
    17fa:	80 81       	ld	r24, Z
    17fc:	48 2f       	mov	r20, r24
    17fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1800:	28 2f       	mov	r18, r24
    1802:	30 e0       	ldi	r19, 0x00	; 0
    1804:	81 e0       	ldi	r24, 0x01	; 1
    1806:	90 e0       	ldi	r25, 0x00	; 0
    1808:	02 2e       	mov	r0, r18
    180a:	02 c0       	rjmp	.+4      	; 0x1810 <DIO_setPinDirection+0x128>
    180c:	88 0f       	add	r24, r24
    180e:	99 1f       	adc	r25, r25
    1810:	0a 94       	dec	r0
    1812:	e2 f7       	brpl	.-8      	; 0x180c <DIO_setPinDirection+0x124>
    1814:	80 95       	com	r24
    1816:	84 23       	and	r24, r20
    1818:	8c 93       	st	X, r24
    181a:	83 c0       	rjmp	.+262    	; 0x1922 <DIO_setPinDirection+0x23a>
			break;

			case DIO_PIN_OUTPUT:
			SET_BIT(DDRB,PinId);
    181c:	a7 e3       	ldi	r26, 0x37	; 55
    181e:	b0 e0       	ldi	r27, 0x00	; 0
    1820:	e7 e3       	ldi	r30, 0x37	; 55
    1822:	f0 e0       	ldi	r31, 0x00	; 0
    1824:	80 81       	ld	r24, Z
    1826:	48 2f       	mov	r20, r24
    1828:	8a 81       	ldd	r24, Y+2	; 0x02
    182a:	28 2f       	mov	r18, r24
    182c:	30 e0       	ldi	r19, 0x00	; 0
    182e:	81 e0       	ldi	r24, 0x01	; 1
    1830:	90 e0       	ldi	r25, 0x00	; 0
    1832:	02 2e       	mov	r0, r18
    1834:	02 c0       	rjmp	.+4      	; 0x183a <DIO_setPinDirection+0x152>
    1836:	88 0f       	add	r24, r24
    1838:	99 1f       	adc	r25, r25
    183a:	0a 94       	dec	r0
    183c:	e2 f7       	brpl	.-8      	; 0x1836 <DIO_setPinDirection+0x14e>
    183e:	84 2b       	or	r24, r20
    1840:	8c 93       	st	X, r24
    1842:	6f c0       	rjmp	.+222    	; 0x1922 <DIO_setPinDirection+0x23a>
			break;
		}
		break;

		case DIO_PORTC:
		switch(PinDirection)
    1844:	8b 81       	ldd	r24, Y+3	; 0x03
    1846:	28 2f       	mov	r18, r24
    1848:	30 e0       	ldi	r19, 0x00	; 0
    184a:	3f 83       	std	Y+7, r19	; 0x07
    184c:	2e 83       	std	Y+6, r18	; 0x06
    184e:	8e 81       	ldd	r24, Y+6	; 0x06
    1850:	9f 81       	ldd	r25, Y+7	; 0x07
    1852:	00 97       	sbiw	r24, 0x00	; 0
    1854:	31 f0       	breq	.+12     	; 0x1862 <DIO_setPinDirection+0x17a>
    1856:	2e 81       	ldd	r18, Y+6	; 0x06
    1858:	3f 81       	ldd	r19, Y+7	; 0x07
    185a:	21 30       	cpi	r18, 0x01	; 1
    185c:	31 05       	cpc	r19, r1
    185e:	b1 f0       	breq	.+44     	; 0x188c <DIO_setPinDirection+0x1a4>
    1860:	60 c0       	rjmp	.+192    	; 0x1922 <DIO_setPinDirection+0x23a>
		{
			case DIO_PIN_INPUT:
			CLR_BIT(DDRC,PinId);
    1862:	a4 e3       	ldi	r26, 0x34	; 52
    1864:	b0 e0       	ldi	r27, 0x00	; 0
    1866:	e4 e3       	ldi	r30, 0x34	; 52
    1868:	f0 e0       	ldi	r31, 0x00	; 0
    186a:	80 81       	ld	r24, Z
    186c:	48 2f       	mov	r20, r24
    186e:	8a 81       	ldd	r24, Y+2	; 0x02
    1870:	28 2f       	mov	r18, r24
    1872:	30 e0       	ldi	r19, 0x00	; 0
    1874:	81 e0       	ldi	r24, 0x01	; 1
    1876:	90 e0       	ldi	r25, 0x00	; 0
    1878:	02 2e       	mov	r0, r18
    187a:	02 c0       	rjmp	.+4      	; 0x1880 <DIO_setPinDirection+0x198>
    187c:	88 0f       	add	r24, r24
    187e:	99 1f       	adc	r25, r25
    1880:	0a 94       	dec	r0
    1882:	e2 f7       	brpl	.-8      	; 0x187c <DIO_setPinDirection+0x194>
    1884:	80 95       	com	r24
    1886:	84 23       	and	r24, r20
    1888:	8c 93       	st	X, r24
    188a:	4b c0       	rjmp	.+150    	; 0x1922 <DIO_setPinDirection+0x23a>
			break;

			case DIO_PIN_OUTPUT:
			SET_BIT(DDRC,PinId);
    188c:	a4 e3       	ldi	r26, 0x34	; 52
    188e:	b0 e0       	ldi	r27, 0x00	; 0
    1890:	e4 e3       	ldi	r30, 0x34	; 52
    1892:	f0 e0       	ldi	r31, 0x00	; 0
    1894:	80 81       	ld	r24, Z
    1896:	48 2f       	mov	r20, r24
    1898:	8a 81       	ldd	r24, Y+2	; 0x02
    189a:	28 2f       	mov	r18, r24
    189c:	30 e0       	ldi	r19, 0x00	; 0
    189e:	81 e0       	ldi	r24, 0x01	; 1
    18a0:	90 e0       	ldi	r25, 0x00	; 0
    18a2:	02 2e       	mov	r0, r18
    18a4:	02 c0       	rjmp	.+4      	; 0x18aa <DIO_setPinDirection+0x1c2>
    18a6:	88 0f       	add	r24, r24
    18a8:	99 1f       	adc	r25, r25
    18aa:	0a 94       	dec	r0
    18ac:	e2 f7       	brpl	.-8      	; 0x18a6 <DIO_setPinDirection+0x1be>
    18ae:	84 2b       	or	r24, r20
    18b0:	8c 93       	st	X, r24
    18b2:	37 c0       	rjmp	.+110    	; 0x1922 <DIO_setPinDirection+0x23a>
			break;
		}
		break;

		case DIO_PORTD:
		switch(PinDirection)
    18b4:	8b 81       	ldd	r24, Y+3	; 0x03
    18b6:	28 2f       	mov	r18, r24
    18b8:	30 e0       	ldi	r19, 0x00	; 0
    18ba:	3d 83       	std	Y+5, r19	; 0x05
    18bc:	2c 83       	std	Y+4, r18	; 0x04
    18be:	8c 81       	ldd	r24, Y+4	; 0x04
    18c0:	9d 81       	ldd	r25, Y+5	; 0x05
    18c2:	00 97       	sbiw	r24, 0x00	; 0
    18c4:	31 f0       	breq	.+12     	; 0x18d2 <DIO_setPinDirection+0x1ea>
    18c6:	2c 81       	ldd	r18, Y+4	; 0x04
    18c8:	3d 81       	ldd	r19, Y+5	; 0x05
    18ca:	21 30       	cpi	r18, 0x01	; 1
    18cc:	31 05       	cpc	r19, r1
    18ce:	b1 f0       	breq	.+44     	; 0x18fc <DIO_setPinDirection+0x214>
    18d0:	28 c0       	rjmp	.+80     	; 0x1922 <DIO_setPinDirection+0x23a>
		{
			case DIO_PIN_INPUT:
			CLR_BIT(DDRD,PinId);
    18d2:	a1 e3       	ldi	r26, 0x31	; 49
    18d4:	b0 e0       	ldi	r27, 0x00	; 0
    18d6:	e1 e3       	ldi	r30, 0x31	; 49
    18d8:	f0 e0       	ldi	r31, 0x00	; 0
    18da:	80 81       	ld	r24, Z
    18dc:	48 2f       	mov	r20, r24
    18de:	8a 81       	ldd	r24, Y+2	; 0x02
    18e0:	28 2f       	mov	r18, r24
    18e2:	30 e0       	ldi	r19, 0x00	; 0
    18e4:	81 e0       	ldi	r24, 0x01	; 1
    18e6:	90 e0       	ldi	r25, 0x00	; 0
    18e8:	02 2e       	mov	r0, r18
    18ea:	02 c0       	rjmp	.+4      	; 0x18f0 <DIO_setPinDirection+0x208>
    18ec:	88 0f       	add	r24, r24
    18ee:	99 1f       	adc	r25, r25
    18f0:	0a 94       	dec	r0
    18f2:	e2 f7       	brpl	.-8      	; 0x18ec <DIO_setPinDirection+0x204>
    18f4:	80 95       	com	r24
    18f6:	84 23       	and	r24, r20
    18f8:	8c 93       	st	X, r24
    18fa:	13 c0       	rjmp	.+38     	; 0x1922 <DIO_setPinDirection+0x23a>
			break;

			case DIO_PIN_OUTPUT:
			SET_BIT(DDRD,PinId);
    18fc:	a1 e3       	ldi	r26, 0x31	; 49
    18fe:	b0 e0       	ldi	r27, 0x00	; 0
    1900:	e1 e3       	ldi	r30, 0x31	; 49
    1902:	f0 e0       	ldi	r31, 0x00	; 0
    1904:	80 81       	ld	r24, Z
    1906:	48 2f       	mov	r20, r24
    1908:	8a 81       	ldd	r24, Y+2	; 0x02
    190a:	28 2f       	mov	r18, r24
    190c:	30 e0       	ldi	r19, 0x00	; 0
    190e:	81 e0       	ldi	r24, 0x01	; 1
    1910:	90 e0       	ldi	r25, 0x00	; 0
    1912:	02 2e       	mov	r0, r18
    1914:	02 c0       	rjmp	.+4      	; 0x191a <DIO_setPinDirection+0x232>
    1916:	88 0f       	add	r24, r24
    1918:	99 1f       	adc	r25, r25
    191a:	0a 94       	dec	r0
    191c:	e2 f7       	brpl	.-8      	; 0x1916 <DIO_setPinDirection+0x22e>
    191e:	84 2b       	or	r24, r20
    1920:	8c 93       	st	X, r24
	}
	else
	{
		//Do Nothing
	}
}
    1922:	2d 96       	adiw	r28, 0x0d	; 13
    1924:	0f b6       	in	r0, 0x3f	; 63
    1926:	f8 94       	cli
    1928:	de bf       	out	0x3e, r29	; 62
    192a:	0f be       	out	0x3f, r0	; 63
    192c:	cd bf       	out	0x3d, r28	; 61
    192e:	cf 91       	pop	r28
    1930:	df 91       	pop	r29
    1932:	08 95       	ret

00001934 <DIO_setPinValue>:


void DIO_setPinValue(u8 PortId, u8 PinId, u8 PinValue)
{
    1934:	df 93       	push	r29
    1936:	cf 93       	push	r28
    1938:	cd b7       	in	r28, 0x3d	; 61
    193a:	de b7       	in	r29, 0x3e	; 62
    193c:	2d 97       	sbiw	r28, 0x0d	; 13
    193e:	0f b6       	in	r0, 0x3f	; 63
    1940:	f8 94       	cli
    1942:	de bf       	out	0x3e, r29	; 62
    1944:	0f be       	out	0x3f, r0	; 63
    1946:	cd bf       	out	0x3d, r28	; 61
    1948:	89 83       	std	Y+1, r24	; 0x01
    194a:	6a 83       	std	Y+2, r22	; 0x02
    194c:	4b 83       	std	Y+3, r20	; 0x03
	if((PortId<=3)&&(PinId<=7)&&((PinValue==DIO_PIN_HIGH)||(PinValue==DIO_PIN_LOW)))
    194e:	89 81       	ldd	r24, Y+1	; 0x01
    1950:	84 30       	cpi	r24, 0x04	; 4
    1952:	08 f0       	brcs	.+2      	; 0x1956 <DIO_setPinValue+0x22>
    1954:	0c c1       	rjmp	.+536    	; 0x1b6e <DIO_setPinValue+0x23a>
    1956:	8a 81       	ldd	r24, Y+2	; 0x02
    1958:	88 30       	cpi	r24, 0x08	; 8
    195a:	08 f0       	brcs	.+2      	; 0x195e <DIO_setPinValue+0x2a>
    195c:	08 c1       	rjmp	.+528    	; 0x1b6e <DIO_setPinValue+0x23a>
    195e:	8b 81       	ldd	r24, Y+3	; 0x03
    1960:	81 30       	cpi	r24, 0x01	; 1
    1962:	21 f0       	breq	.+8      	; 0x196c <DIO_setPinValue+0x38>
    1964:	8b 81       	ldd	r24, Y+3	; 0x03
    1966:	88 23       	and	r24, r24
    1968:	09 f0       	breq	.+2      	; 0x196c <DIO_setPinValue+0x38>
    196a:	01 c1       	rjmp	.+514    	; 0x1b6e <DIO_setPinValue+0x23a>
	{
		switch(PortId)
    196c:	89 81       	ldd	r24, Y+1	; 0x01
    196e:	28 2f       	mov	r18, r24
    1970:	30 e0       	ldi	r19, 0x00	; 0
    1972:	3d 87       	std	Y+13, r19	; 0x0d
    1974:	2c 87       	std	Y+12, r18	; 0x0c
    1976:	8c 85       	ldd	r24, Y+12	; 0x0c
    1978:	9d 85       	ldd	r25, Y+13	; 0x0d
    197a:	81 30       	cpi	r24, 0x01	; 1
    197c:	91 05       	cpc	r25, r1
    197e:	09 f4       	brne	.+2      	; 0x1982 <DIO_setPinValue+0x4e>
    1980:	4f c0       	rjmp	.+158    	; 0x1a20 <DIO_setPinValue+0xec>
    1982:	2c 85       	ldd	r18, Y+12	; 0x0c
    1984:	3d 85       	ldd	r19, Y+13	; 0x0d
    1986:	22 30       	cpi	r18, 0x02	; 2
    1988:	31 05       	cpc	r19, r1
    198a:	2c f4       	brge	.+10     	; 0x1996 <DIO_setPinValue+0x62>
    198c:	8c 85       	ldd	r24, Y+12	; 0x0c
    198e:	9d 85       	ldd	r25, Y+13	; 0x0d
    1990:	00 97       	sbiw	r24, 0x00	; 0
    1992:	71 f0       	breq	.+28     	; 0x19b0 <DIO_setPinValue+0x7c>
    1994:	ec c0       	rjmp	.+472    	; 0x1b6e <DIO_setPinValue+0x23a>
    1996:	2c 85       	ldd	r18, Y+12	; 0x0c
    1998:	3d 85       	ldd	r19, Y+13	; 0x0d
    199a:	22 30       	cpi	r18, 0x02	; 2
    199c:	31 05       	cpc	r19, r1
    199e:	09 f4       	brne	.+2      	; 0x19a2 <DIO_setPinValue+0x6e>
    19a0:	77 c0       	rjmp	.+238    	; 0x1a90 <DIO_setPinValue+0x15c>
    19a2:	8c 85       	ldd	r24, Y+12	; 0x0c
    19a4:	9d 85       	ldd	r25, Y+13	; 0x0d
    19a6:	83 30       	cpi	r24, 0x03	; 3
    19a8:	91 05       	cpc	r25, r1
    19aa:	09 f4       	brne	.+2      	; 0x19ae <DIO_setPinValue+0x7a>
    19ac:	a9 c0       	rjmp	.+338    	; 0x1b00 <DIO_setPinValue+0x1cc>
    19ae:	df c0       	rjmp	.+446    	; 0x1b6e <DIO_setPinValue+0x23a>
	{
		case DIO_PORTA:
		switch(PinValue)
    19b0:	8b 81       	ldd	r24, Y+3	; 0x03
    19b2:	28 2f       	mov	r18, r24
    19b4:	30 e0       	ldi	r19, 0x00	; 0
    19b6:	3b 87       	std	Y+11, r19	; 0x0b
    19b8:	2a 87       	std	Y+10, r18	; 0x0a
    19ba:	8a 85       	ldd	r24, Y+10	; 0x0a
    19bc:	9b 85       	ldd	r25, Y+11	; 0x0b
    19be:	00 97       	sbiw	r24, 0x00	; 0
    19c0:	31 f0       	breq	.+12     	; 0x19ce <DIO_setPinValue+0x9a>
    19c2:	2a 85       	ldd	r18, Y+10	; 0x0a
    19c4:	3b 85       	ldd	r19, Y+11	; 0x0b
    19c6:	21 30       	cpi	r18, 0x01	; 1
    19c8:	31 05       	cpc	r19, r1
    19ca:	b1 f0       	breq	.+44     	; 0x19f8 <DIO_setPinValue+0xc4>
    19cc:	d0 c0       	rjmp	.+416    	; 0x1b6e <DIO_setPinValue+0x23a>
		{
			case DIO_PIN_LOW:
			CLR_BIT(PORTA,PinId);
    19ce:	ab e3       	ldi	r26, 0x3B	; 59
    19d0:	b0 e0       	ldi	r27, 0x00	; 0
    19d2:	eb e3       	ldi	r30, 0x3B	; 59
    19d4:	f0 e0       	ldi	r31, 0x00	; 0
    19d6:	80 81       	ld	r24, Z
    19d8:	48 2f       	mov	r20, r24
    19da:	8a 81       	ldd	r24, Y+2	; 0x02
    19dc:	28 2f       	mov	r18, r24
    19de:	30 e0       	ldi	r19, 0x00	; 0
    19e0:	81 e0       	ldi	r24, 0x01	; 1
    19e2:	90 e0       	ldi	r25, 0x00	; 0
    19e4:	02 2e       	mov	r0, r18
    19e6:	02 c0       	rjmp	.+4      	; 0x19ec <DIO_setPinValue+0xb8>
    19e8:	88 0f       	add	r24, r24
    19ea:	99 1f       	adc	r25, r25
    19ec:	0a 94       	dec	r0
    19ee:	e2 f7       	brpl	.-8      	; 0x19e8 <DIO_setPinValue+0xb4>
    19f0:	80 95       	com	r24
    19f2:	84 23       	and	r24, r20
    19f4:	8c 93       	st	X, r24
    19f6:	bb c0       	rjmp	.+374    	; 0x1b6e <DIO_setPinValue+0x23a>
			break;

			case DIO_PIN_HIGH:
			SET_BIT(PORTA,PinId);
    19f8:	ab e3       	ldi	r26, 0x3B	; 59
    19fa:	b0 e0       	ldi	r27, 0x00	; 0
    19fc:	eb e3       	ldi	r30, 0x3B	; 59
    19fe:	f0 e0       	ldi	r31, 0x00	; 0
    1a00:	80 81       	ld	r24, Z
    1a02:	48 2f       	mov	r20, r24
    1a04:	8a 81       	ldd	r24, Y+2	; 0x02
    1a06:	28 2f       	mov	r18, r24
    1a08:	30 e0       	ldi	r19, 0x00	; 0
    1a0a:	81 e0       	ldi	r24, 0x01	; 1
    1a0c:	90 e0       	ldi	r25, 0x00	; 0
    1a0e:	02 2e       	mov	r0, r18
    1a10:	02 c0       	rjmp	.+4      	; 0x1a16 <DIO_setPinValue+0xe2>
    1a12:	88 0f       	add	r24, r24
    1a14:	99 1f       	adc	r25, r25
    1a16:	0a 94       	dec	r0
    1a18:	e2 f7       	brpl	.-8      	; 0x1a12 <DIO_setPinValue+0xde>
    1a1a:	84 2b       	or	r24, r20
    1a1c:	8c 93       	st	X, r24
    1a1e:	a7 c0       	rjmp	.+334    	; 0x1b6e <DIO_setPinValue+0x23a>
			break;
		}
		break;

		case DIO_PORTB:
		switch(PinValue)
    1a20:	8b 81       	ldd	r24, Y+3	; 0x03
    1a22:	28 2f       	mov	r18, r24
    1a24:	30 e0       	ldi	r19, 0x00	; 0
    1a26:	39 87       	std	Y+9, r19	; 0x09
    1a28:	28 87       	std	Y+8, r18	; 0x08
    1a2a:	88 85       	ldd	r24, Y+8	; 0x08
    1a2c:	99 85       	ldd	r25, Y+9	; 0x09
    1a2e:	00 97       	sbiw	r24, 0x00	; 0
    1a30:	31 f0       	breq	.+12     	; 0x1a3e <DIO_setPinValue+0x10a>
    1a32:	28 85       	ldd	r18, Y+8	; 0x08
    1a34:	39 85       	ldd	r19, Y+9	; 0x09
    1a36:	21 30       	cpi	r18, 0x01	; 1
    1a38:	31 05       	cpc	r19, r1
    1a3a:	b1 f0       	breq	.+44     	; 0x1a68 <DIO_setPinValue+0x134>
    1a3c:	98 c0       	rjmp	.+304    	; 0x1b6e <DIO_setPinValue+0x23a>
		{
			case DIO_PIN_LOW:
			CLR_BIT(PORTB,PinId);
    1a3e:	a8 e3       	ldi	r26, 0x38	; 56
    1a40:	b0 e0       	ldi	r27, 0x00	; 0
    1a42:	e8 e3       	ldi	r30, 0x38	; 56
    1a44:	f0 e0       	ldi	r31, 0x00	; 0
    1a46:	80 81       	ld	r24, Z
    1a48:	48 2f       	mov	r20, r24
    1a4a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a4c:	28 2f       	mov	r18, r24
    1a4e:	30 e0       	ldi	r19, 0x00	; 0
    1a50:	81 e0       	ldi	r24, 0x01	; 1
    1a52:	90 e0       	ldi	r25, 0x00	; 0
    1a54:	02 2e       	mov	r0, r18
    1a56:	02 c0       	rjmp	.+4      	; 0x1a5c <DIO_setPinValue+0x128>
    1a58:	88 0f       	add	r24, r24
    1a5a:	99 1f       	adc	r25, r25
    1a5c:	0a 94       	dec	r0
    1a5e:	e2 f7       	brpl	.-8      	; 0x1a58 <DIO_setPinValue+0x124>
    1a60:	80 95       	com	r24
    1a62:	84 23       	and	r24, r20
    1a64:	8c 93       	st	X, r24
    1a66:	83 c0       	rjmp	.+262    	; 0x1b6e <DIO_setPinValue+0x23a>
			break;

			case DIO_PIN_HIGH:
			SET_BIT(PORTB,PinId);
    1a68:	a8 e3       	ldi	r26, 0x38	; 56
    1a6a:	b0 e0       	ldi	r27, 0x00	; 0
    1a6c:	e8 e3       	ldi	r30, 0x38	; 56
    1a6e:	f0 e0       	ldi	r31, 0x00	; 0
    1a70:	80 81       	ld	r24, Z
    1a72:	48 2f       	mov	r20, r24
    1a74:	8a 81       	ldd	r24, Y+2	; 0x02
    1a76:	28 2f       	mov	r18, r24
    1a78:	30 e0       	ldi	r19, 0x00	; 0
    1a7a:	81 e0       	ldi	r24, 0x01	; 1
    1a7c:	90 e0       	ldi	r25, 0x00	; 0
    1a7e:	02 2e       	mov	r0, r18
    1a80:	02 c0       	rjmp	.+4      	; 0x1a86 <DIO_setPinValue+0x152>
    1a82:	88 0f       	add	r24, r24
    1a84:	99 1f       	adc	r25, r25
    1a86:	0a 94       	dec	r0
    1a88:	e2 f7       	brpl	.-8      	; 0x1a82 <DIO_setPinValue+0x14e>
    1a8a:	84 2b       	or	r24, r20
    1a8c:	8c 93       	st	X, r24
    1a8e:	6f c0       	rjmp	.+222    	; 0x1b6e <DIO_setPinValue+0x23a>
			break;
		}
		break;

		case DIO_PORTC:
		switch(PinValue)
    1a90:	8b 81       	ldd	r24, Y+3	; 0x03
    1a92:	28 2f       	mov	r18, r24
    1a94:	30 e0       	ldi	r19, 0x00	; 0
    1a96:	3f 83       	std	Y+7, r19	; 0x07
    1a98:	2e 83       	std	Y+6, r18	; 0x06
    1a9a:	8e 81       	ldd	r24, Y+6	; 0x06
    1a9c:	9f 81       	ldd	r25, Y+7	; 0x07
    1a9e:	00 97       	sbiw	r24, 0x00	; 0
    1aa0:	31 f0       	breq	.+12     	; 0x1aae <DIO_setPinValue+0x17a>
    1aa2:	2e 81       	ldd	r18, Y+6	; 0x06
    1aa4:	3f 81       	ldd	r19, Y+7	; 0x07
    1aa6:	21 30       	cpi	r18, 0x01	; 1
    1aa8:	31 05       	cpc	r19, r1
    1aaa:	b1 f0       	breq	.+44     	; 0x1ad8 <DIO_setPinValue+0x1a4>
    1aac:	60 c0       	rjmp	.+192    	; 0x1b6e <DIO_setPinValue+0x23a>
		{
			case DIO_PIN_LOW:
			CLR_BIT(PORTC,PinId);
    1aae:	a5 e3       	ldi	r26, 0x35	; 53
    1ab0:	b0 e0       	ldi	r27, 0x00	; 0
    1ab2:	e5 e3       	ldi	r30, 0x35	; 53
    1ab4:	f0 e0       	ldi	r31, 0x00	; 0
    1ab6:	80 81       	ld	r24, Z
    1ab8:	48 2f       	mov	r20, r24
    1aba:	8a 81       	ldd	r24, Y+2	; 0x02
    1abc:	28 2f       	mov	r18, r24
    1abe:	30 e0       	ldi	r19, 0x00	; 0
    1ac0:	81 e0       	ldi	r24, 0x01	; 1
    1ac2:	90 e0       	ldi	r25, 0x00	; 0
    1ac4:	02 2e       	mov	r0, r18
    1ac6:	02 c0       	rjmp	.+4      	; 0x1acc <DIO_setPinValue+0x198>
    1ac8:	88 0f       	add	r24, r24
    1aca:	99 1f       	adc	r25, r25
    1acc:	0a 94       	dec	r0
    1ace:	e2 f7       	brpl	.-8      	; 0x1ac8 <DIO_setPinValue+0x194>
    1ad0:	80 95       	com	r24
    1ad2:	84 23       	and	r24, r20
    1ad4:	8c 93       	st	X, r24
    1ad6:	4b c0       	rjmp	.+150    	; 0x1b6e <DIO_setPinValue+0x23a>
			break;

			case DIO_PIN_HIGH:
			SET_BIT(PORTC,PinId);
    1ad8:	a5 e3       	ldi	r26, 0x35	; 53
    1ada:	b0 e0       	ldi	r27, 0x00	; 0
    1adc:	e5 e3       	ldi	r30, 0x35	; 53
    1ade:	f0 e0       	ldi	r31, 0x00	; 0
    1ae0:	80 81       	ld	r24, Z
    1ae2:	48 2f       	mov	r20, r24
    1ae4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ae6:	28 2f       	mov	r18, r24
    1ae8:	30 e0       	ldi	r19, 0x00	; 0
    1aea:	81 e0       	ldi	r24, 0x01	; 1
    1aec:	90 e0       	ldi	r25, 0x00	; 0
    1aee:	02 2e       	mov	r0, r18
    1af0:	02 c0       	rjmp	.+4      	; 0x1af6 <DIO_setPinValue+0x1c2>
    1af2:	88 0f       	add	r24, r24
    1af4:	99 1f       	adc	r25, r25
    1af6:	0a 94       	dec	r0
    1af8:	e2 f7       	brpl	.-8      	; 0x1af2 <DIO_setPinValue+0x1be>
    1afa:	84 2b       	or	r24, r20
    1afc:	8c 93       	st	X, r24
    1afe:	37 c0       	rjmp	.+110    	; 0x1b6e <DIO_setPinValue+0x23a>
			break;
		}
		break;

		case DIO_PORTD:
		switch(PinValue)
    1b00:	8b 81       	ldd	r24, Y+3	; 0x03
    1b02:	28 2f       	mov	r18, r24
    1b04:	30 e0       	ldi	r19, 0x00	; 0
    1b06:	3d 83       	std	Y+5, r19	; 0x05
    1b08:	2c 83       	std	Y+4, r18	; 0x04
    1b0a:	8c 81       	ldd	r24, Y+4	; 0x04
    1b0c:	9d 81       	ldd	r25, Y+5	; 0x05
    1b0e:	00 97       	sbiw	r24, 0x00	; 0
    1b10:	31 f0       	breq	.+12     	; 0x1b1e <DIO_setPinValue+0x1ea>
    1b12:	2c 81       	ldd	r18, Y+4	; 0x04
    1b14:	3d 81       	ldd	r19, Y+5	; 0x05
    1b16:	21 30       	cpi	r18, 0x01	; 1
    1b18:	31 05       	cpc	r19, r1
    1b1a:	b1 f0       	breq	.+44     	; 0x1b48 <DIO_setPinValue+0x214>
    1b1c:	28 c0       	rjmp	.+80     	; 0x1b6e <DIO_setPinValue+0x23a>
		{
			case DIO_PIN_LOW:
			CLR_BIT(PORTD,PinId);
    1b1e:	a2 e3       	ldi	r26, 0x32	; 50
    1b20:	b0 e0       	ldi	r27, 0x00	; 0
    1b22:	e2 e3       	ldi	r30, 0x32	; 50
    1b24:	f0 e0       	ldi	r31, 0x00	; 0
    1b26:	80 81       	ld	r24, Z
    1b28:	48 2f       	mov	r20, r24
    1b2a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b2c:	28 2f       	mov	r18, r24
    1b2e:	30 e0       	ldi	r19, 0x00	; 0
    1b30:	81 e0       	ldi	r24, 0x01	; 1
    1b32:	90 e0       	ldi	r25, 0x00	; 0
    1b34:	02 2e       	mov	r0, r18
    1b36:	02 c0       	rjmp	.+4      	; 0x1b3c <DIO_setPinValue+0x208>
    1b38:	88 0f       	add	r24, r24
    1b3a:	99 1f       	adc	r25, r25
    1b3c:	0a 94       	dec	r0
    1b3e:	e2 f7       	brpl	.-8      	; 0x1b38 <DIO_setPinValue+0x204>
    1b40:	80 95       	com	r24
    1b42:	84 23       	and	r24, r20
    1b44:	8c 93       	st	X, r24
    1b46:	13 c0       	rjmp	.+38     	; 0x1b6e <DIO_setPinValue+0x23a>
			break;

			case DIO_PIN_HIGH:
			SET_BIT(PORTD,PinId);
    1b48:	a2 e3       	ldi	r26, 0x32	; 50
    1b4a:	b0 e0       	ldi	r27, 0x00	; 0
    1b4c:	e2 e3       	ldi	r30, 0x32	; 50
    1b4e:	f0 e0       	ldi	r31, 0x00	; 0
    1b50:	80 81       	ld	r24, Z
    1b52:	48 2f       	mov	r20, r24
    1b54:	8a 81       	ldd	r24, Y+2	; 0x02
    1b56:	28 2f       	mov	r18, r24
    1b58:	30 e0       	ldi	r19, 0x00	; 0
    1b5a:	81 e0       	ldi	r24, 0x01	; 1
    1b5c:	90 e0       	ldi	r25, 0x00	; 0
    1b5e:	02 2e       	mov	r0, r18
    1b60:	02 c0       	rjmp	.+4      	; 0x1b66 <DIO_setPinValue+0x232>
    1b62:	88 0f       	add	r24, r24
    1b64:	99 1f       	adc	r25, r25
    1b66:	0a 94       	dec	r0
    1b68:	e2 f7       	brpl	.-8      	; 0x1b62 <DIO_setPinValue+0x22e>
    1b6a:	84 2b       	or	r24, r20
    1b6c:	8c 93       	st	X, r24
	}
	else
	{
		//Do Nothing
	}
}
    1b6e:	2d 96       	adiw	r28, 0x0d	; 13
    1b70:	0f b6       	in	r0, 0x3f	; 63
    1b72:	f8 94       	cli
    1b74:	de bf       	out	0x3e, r29	; 62
    1b76:	0f be       	out	0x3f, r0	; 63
    1b78:	cd bf       	out	0x3d, r28	; 61
    1b7a:	cf 91       	pop	r28
    1b7c:	df 91       	pop	r29
    1b7e:	08 95       	ret

00001b80 <DIO_getPinValue>:


void DIO_getPinValue(u8 PortId, u8 PinId, u8* PinValue)
{
    1b80:	df 93       	push	r29
    1b82:	cf 93       	push	r28
    1b84:	00 d0       	rcall	.+0      	; 0x1b86 <DIO_getPinValue+0x6>
    1b86:	00 d0       	rcall	.+0      	; 0x1b88 <DIO_getPinValue+0x8>
    1b88:	00 d0       	rcall	.+0      	; 0x1b8a <DIO_getPinValue+0xa>
    1b8a:	cd b7       	in	r28, 0x3d	; 61
    1b8c:	de b7       	in	r29, 0x3e	; 62
    1b8e:	89 83       	std	Y+1, r24	; 0x01
    1b90:	6a 83       	std	Y+2, r22	; 0x02
    1b92:	5c 83       	std	Y+4, r21	; 0x04
    1b94:	4b 83       	std	Y+3, r20	; 0x03
	if((PortId<=3)&&(PinId<=7)&&(PinValue!=NULL))
    1b96:	89 81       	ldd	r24, Y+1	; 0x01
    1b98:	84 30       	cpi	r24, 0x04	; 4
    1b9a:	08 f0       	brcs	.+2      	; 0x1b9e <DIO_getPinValue+0x1e>
    1b9c:	79 c0       	rjmp	.+242    	; 0x1c90 <DIO_getPinValue+0x110>
    1b9e:	8a 81       	ldd	r24, Y+2	; 0x02
    1ba0:	88 30       	cpi	r24, 0x08	; 8
    1ba2:	08 f0       	brcs	.+2      	; 0x1ba6 <DIO_getPinValue+0x26>
    1ba4:	75 c0       	rjmp	.+234    	; 0x1c90 <DIO_getPinValue+0x110>
    1ba6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ba8:	9c 81       	ldd	r25, Y+4	; 0x04
    1baa:	00 97       	sbiw	r24, 0x00	; 0
    1bac:	09 f4       	brne	.+2      	; 0x1bb0 <DIO_getPinValue+0x30>
    1bae:	70 c0       	rjmp	.+224    	; 0x1c90 <DIO_getPinValue+0x110>
	{
		switch(PortId)
    1bb0:	89 81       	ldd	r24, Y+1	; 0x01
    1bb2:	28 2f       	mov	r18, r24
    1bb4:	30 e0       	ldi	r19, 0x00	; 0
    1bb6:	3e 83       	std	Y+6, r19	; 0x06
    1bb8:	2d 83       	std	Y+5, r18	; 0x05
    1bba:	4d 81       	ldd	r20, Y+5	; 0x05
    1bbc:	5e 81       	ldd	r21, Y+6	; 0x06
    1bbe:	41 30       	cpi	r20, 0x01	; 1
    1bc0:	51 05       	cpc	r21, r1
    1bc2:	59 f1       	breq	.+86     	; 0x1c1a <DIO_getPinValue+0x9a>
    1bc4:	8d 81       	ldd	r24, Y+5	; 0x05
    1bc6:	9e 81       	ldd	r25, Y+6	; 0x06
    1bc8:	82 30       	cpi	r24, 0x02	; 2
    1bca:	91 05       	cpc	r25, r1
    1bcc:	34 f4       	brge	.+12     	; 0x1bda <DIO_getPinValue+0x5a>
    1bce:	2d 81       	ldd	r18, Y+5	; 0x05
    1bd0:	3e 81       	ldd	r19, Y+6	; 0x06
    1bd2:	21 15       	cp	r18, r1
    1bd4:	31 05       	cpc	r19, r1
    1bd6:	69 f0       	breq	.+26     	; 0x1bf2 <DIO_getPinValue+0x72>
    1bd8:	5b c0       	rjmp	.+182    	; 0x1c90 <DIO_getPinValue+0x110>
    1bda:	4d 81       	ldd	r20, Y+5	; 0x05
    1bdc:	5e 81       	ldd	r21, Y+6	; 0x06
    1bde:	42 30       	cpi	r20, 0x02	; 2
    1be0:	51 05       	cpc	r21, r1
    1be2:	79 f1       	breq	.+94     	; 0x1c42 <DIO_getPinValue+0xc2>
    1be4:	8d 81       	ldd	r24, Y+5	; 0x05
    1be6:	9e 81       	ldd	r25, Y+6	; 0x06
    1be8:	83 30       	cpi	r24, 0x03	; 3
    1bea:	91 05       	cpc	r25, r1
    1bec:	09 f4       	brne	.+2      	; 0x1bf0 <DIO_getPinValue+0x70>
    1bee:	3d c0       	rjmp	.+122    	; 0x1c6a <DIO_getPinValue+0xea>
    1bf0:	4f c0       	rjmp	.+158    	; 0x1c90 <DIO_getPinValue+0x110>
	{
		case DIO_PORTA:
		*PinValue = GET_BIT(PINA,PinId);
    1bf2:	e9 e3       	ldi	r30, 0x39	; 57
    1bf4:	f0 e0       	ldi	r31, 0x00	; 0
    1bf6:	80 81       	ld	r24, Z
    1bf8:	28 2f       	mov	r18, r24
    1bfa:	30 e0       	ldi	r19, 0x00	; 0
    1bfc:	8a 81       	ldd	r24, Y+2	; 0x02
    1bfe:	88 2f       	mov	r24, r24
    1c00:	90 e0       	ldi	r25, 0x00	; 0
    1c02:	a9 01       	movw	r20, r18
    1c04:	02 c0       	rjmp	.+4      	; 0x1c0a <DIO_getPinValue+0x8a>
    1c06:	55 95       	asr	r21
    1c08:	47 95       	ror	r20
    1c0a:	8a 95       	dec	r24
    1c0c:	e2 f7       	brpl	.-8      	; 0x1c06 <DIO_getPinValue+0x86>
    1c0e:	ca 01       	movw	r24, r20
    1c10:	81 70       	andi	r24, 0x01	; 1
    1c12:	eb 81       	ldd	r30, Y+3	; 0x03
    1c14:	fc 81       	ldd	r31, Y+4	; 0x04
    1c16:	80 83       	st	Z, r24
    1c18:	3b c0       	rjmp	.+118    	; 0x1c90 <DIO_getPinValue+0x110>
		break;

		case DIO_PORTB:
		*PinValue = GET_BIT(PINB,PinId);
    1c1a:	e6 e3       	ldi	r30, 0x36	; 54
    1c1c:	f0 e0       	ldi	r31, 0x00	; 0
    1c1e:	80 81       	ld	r24, Z
    1c20:	28 2f       	mov	r18, r24
    1c22:	30 e0       	ldi	r19, 0x00	; 0
    1c24:	8a 81       	ldd	r24, Y+2	; 0x02
    1c26:	88 2f       	mov	r24, r24
    1c28:	90 e0       	ldi	r25, 0x00	; 0
    1c2a:	a9 01       	movw	r20, r18
    1c2c:	02 c0       	rjmp	.+4      	; 0x1c32 <DIO_getPinValue+0xb2>
    1c2e:	55 95       	asr	r21
    1c30:	47 95       	ror	r20
    1c32:	8a 95       	dec	r24
    1c34:	e2 f7       	brpl	.-8      	; 0x1c2e <DIO_getPinValue+0xae>
    1c36:	ca 01       	movw	r24, r20
    1c38:	81 70       	andi	r24, 0x01	; 1
    1c3a:	eb 81       	ldd	r30, Y+3	; 0x03
    1c3c:	fc 81       	ldd	r31, Y+4	; 0x04
    1c3e:	80 83       	st	Z, r24
    1c40:	27 c0       	rjmp	.+78     	; 0x1c90 <DIO_getPinValue+0x110>
		break;

		case DIO_PORTC:
		*PinValue = GET_BIT(PINC,PinId);
    1c42:	e3 e3       	ldi	r30, 0x33	; 51
    1c44:	f0 e0       	ldi	r31, 0x00	; 0
    1c46:	80 81       	ld	r24, Z
    1c48:	28 2f       	mov	r18, r24
    1c4a:	30 e0       	ldi	r19, 0x00	; 0
    1c4c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c4e:	88 2f       	mov	r24, r24
    1c50:	90 e0       	ldi	r25, 0x00	; 0
    1c52:	a9 01       	movw	r20, r18
    1c54:	02 c0       	rjmp	.+4      	; 0x1c5a <DIO_getPinValue+0xda>
    1c56:	55 95       	asr	r21
    1c58:	47 95       	ror	r20
    1c5a:	8a 95       	dec	r24
    1c5c:	e2 f7       	brpl	.-8      	; 0x1c56 <DIO_getPinValue+0xd6>
    1c5e:	ca 01       	movw	r24, r20
    1c60:	81 70       	andi	r24, 0x01	; 1
    1c62:	eb 81       	ldd	r30, Y+3	; 0x03
    1c64:	fc 81       	ldd	r31, Y+4	; 0x04
    1c66:	80 83       	st	Z, r24
    1c68:	13 c0       	rjmp	.+38     	; 0x1c90 <DIO_getPinValue+0x110>
		break;

		case DIO_PORTD:
		*PinValue = GET_BIT(PIND,PinId);
    1c6a:	e0 e3       	ldi	r30, 0x30	; 48
    1c6c:	f0 e0       	ldi	r31, 0x00	; 0
    1c6e:	80 81       	ld	r24, Z
    1c70:	28 2f       	mov	r18, r24
    1c72:	30 e0       	ldi	r19, 0x00	; 0
    1c74:	8a 81       	ldd	r24, Y+2	; 0x02
    1c76:	88 2f       	mov	r24, r24
    1c78:	90 e0       	ldi	r25, 0x00	; 0
    1c7a:	a9 01       	movw	r20, r18
    1c7c:	02 c0       	rjmp	.+4      	; 0x1c82 <DIO_getPinValue+0x102>
    1c7e:	55 95       	asr	r21
    1c80:	47 95       	ror	r20
    1c82:	8a 95       	dec	r24
    1c84:	e2 f7       	brpl	.-8      	; 0x1c7e <DIO_getPinValue+0xfe>
    1c86:	ca 01       	movw	r24, r20
    1c88:	81 70       	andi	r24, 0x01	; 1
    1c8a:	eb 81       	ldd	r30, Y+3	; 0x03
    1c8c:	fc 81       	ldd	r31, Y+4	; 0x04
    1c8e:	80 83       	st	Z, r24
	}
	else
	{
		//Do Nothing
	}
}
    1c90:	26 96       	adiw	r28, 0x06	; 6
    1c92:	0f b6       	in	r0, 0x3f	; 63
    1c94:	f8 94       	cli
    1c96:	de bf       	out	0x3e, r29	; 62
    1c98:	0f be       	out	0x3f, r0	; 63
    1c9a:	cd bf       	out	0x3d, r28	; 61
    1c9c:	cf 91       	pop	r28
    1c9e:	df 91       	pop	r29
    1ca0:	08 95       	ret

00001ca2 <DIO_togglePinValue>:


void DIO_togglePinValue(u8 PortId, u8 PinId)
{
    1ca2:	df 93       	push	r29
    1ca4:	cf 93       	push	r28
    1ca6:	00 d0       	rcall	.+0      	; 0x1ca8 <DIO_togglePinValue+0x6>
    1ca8:	00 d0       	rcall	.+0      	; 0x1caa <DIO_togglePinValue+0x8>
    1caa:	cd b7       	in	r28, 0x3d	; 61
    1cac:	de b7       	in	r29, 0x3e	; 62
    1cae:	89 83       	std	Y+1, r24	; 0x01
    1cb0:	6a 83       	std	Y+2, r22	; 0x02
	if((PortId<=3) && (PinId<=7))
    1cb2:	89 81       	ldd	r24, Y+1	; 0x01
    1cb4:	84 30       	cpi	r24, 0x04	; 4
    1cb6:	08 f0       	brcs	.+2      	; 0x1cba <DIO_togglePinValue+0x18>
    1cb8:	72 c0       	rjmp	.+228    	; 0x1d9e <DIO_togglePinValue+0xfc>
    1cba:	8a 81       	ldd	r24, Y+2	; 0x02
    1cbc:	88 30       	cpi	r24, 0x08	; 8
    1cbe:	08 f0       	brcs	.+2      	; 0x1cc2 <DIO_togglePinValue+0x20>
    1cc0:	6e c0       	rjmp	.+220    	; 0x1d9e <DIO_togglePinValue+0xfc>
	{
		switch(PortId)
    1cc2:	89 81       	ldd	r24, Y+1	; 0x01
    1cc4:	28 2f       	mov	r18, r24
    1cc6:	30 e0       	ldi	r19, 0x00	; 0
    1cc8:	3c 83       	std	Y+4, r19	; 0x04
    1cca:	2b 83       	std	Y+3, r18	; 0x03
    1ccc:	8b 81       	ldd	r24, Y+3	; 0x03
    1cce:	9c 81       	ldd	r25, Y+4	; 0x04
    1cd0:	81 30       	cpi	r24, 0x01	; 1
    1cd2:	91 05       	cpc	r25, r1
    1cd4:	49 f1       	breq	.+82     	; 0x1d28 <DIO_togglePinValue+0x86>
    1cd6:	2b 81       	ldd	r18, Y+3	; 0x03
    1cd8:	3c 81       	ldd	r19, Y+4	; 0x04
    1cda:	22 30       	cpi	r18, 0x02	; 2
    1cdc:	31 05       	cpc	r19, r1
    1cde:	2c f4       	brge	.+10     	; 0x1cea <DIO_togglePinValue+0x48>
    1ce0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ce2:	9c 81       	ldd	r25, Y+4	; 0x04
    1ce4:	00 97       	sbiw	r24, 0x00	; 0
    1ce6:	61 f0       	breq	.+24     	; 0x1d00 <DIO_togglePinValue+0x5e>
    1ce8:	5a c0       	rjmp	.+180    	; 0x1d9e <DIO_togglePinValue+0xfc>
    1cea:	2b 81       	ldd	r18, Y+3	; 0x03
    1cec:	3c 81       	ldd	r19, Y+4	; 0x04
    1cee:	22 30       	cpi	r18, 0x02	; 2
    1cf0:	31 05       	cpc	r19, r1
    1cf2:	71 f1       	breq	.+92     	; 0x1d50 <DIO_togglePinValue+0xae>
    1cf4:	8b 81       	ldd	r24, Y+3	; 0x03
    1cf6:	9c 81       	ldd	r25, Y+4	; 0x04
    1cf8:	83 30       	cpi	r24, 0x03	; 3
    1cfa:	91 05       	cpc	r25, r1
    1cfc:	e9 f1       	breq	.+122    	; 0x1d78 <DIO_togglePinValue+0xd6>
    1cfe:	4f c0       	rjmp	.+158    	; 0x1d9e <DIO_togglePinValue+0xfc>
		{
			case DIO_PORTA:
			TOG_BIT(PORTA,PinId);
    1d00:	ab e3       	ldi	r26, 0x3B	; 59
    1d02:	b0 e0       	ldi	r27, 0x00	; 0
    1d04:	eb e3       	ldi	r30, 0x3B	; 59
    1d06:	f0 e0       	ldi	r31, 0x00	; 0
    1d08:	80 81       	ld	r24, Z
    1d0a:	48 2f       	mov	r20, r24
    1d0c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d0e:	28 2f       	mov	r18, r24
    1d10:	30 e0       	ldi	r19, 0x00	; 0
    1d12:	81 e0       	ldi	r24, 0x01	; 1
    1d14:	90 e0       	ldi	r25, 0x00	; 0
    1d16:	02 2e       	mov	r0, r18
    1d18:	02 c0       	rjmp	.+4      	; 0x1d1e <DIO_togglePinValue+0x7c>
    1d1a:	88 0f       	add	r24, r24
    1d1c:	99 1f       	adc	r25, r25
    1d1e:	0a 94       	dec	r0
    1d20:	e2 f7       	brpl	.-8      	; 0x1d1a <DIO_togglePinValue+0x78>
    1d22:	84 27       	eor	r24, r20
    1d24:	8c 93       	st	X, r24
    1d26:	3b c0       	rjmp	.+118    	; 0x1d9e <DIO_togglePinValue+0xfc>
			break;

			case DIO_PORTB:
			TOG_BIT(PORTB,PinId);
    1d28:	a8 e3       	ldi	r26, 0x38	; 56
    1d2a:	b0 e0       	ldi	r27, 0x00	; 0
    1d2c:	e8 e3       	ldi	r30, 0x38	; 56
    1d2e:	f0 e0       	ldi	r31, 0x00	; 0
    1d30:	80 81       	ld	r24, Z
    1d32:	48 2f       	mov	r20, r24
    1d34:	8a 81       	ldd	r24, Y+2	; 0x02
    1d36:	28 2f       	mov	r18, r24
    1d38:	30 e0       	ldi	r19, 0x00	; 0
    1d3a:	81 e0       	ldi	r24, 0x01	; 1
    1d3c:	90 e0       	ldi	r25, 0x00	; 0
    1d3e:	02 2e       	mov	r0, r18
    1d40:	02 c0       	rjmp	.+4      	; 0x1d46 <DIO_togglePinValue+0xa4>
    1d42:	88 0f       	add	r24, r24
    1d44:	99 1f       	adc	r25, r25
    1d46:	0a 94       	dec	r0
    1d48:	e2 f7       	brpl	.-8      	; 0x1d42 <DIO_togglePinValue+0xa0>
    1d4a:	84 27       	eor	r24, r20
    1d4c:	8c 93       	st	X, r24
    1d4e:	27 c0       	rjmp	.+78     	; 0x1d9e <DIO_togglePinValue+0xfc>
			break;

			case DIO_PORTC:
			TOG_BIT(PORTC,PinId);
    1d50:	a5 e3       	ldi	r26, 0x35	; 53
    1d52:	b0 e0       	ldi	r27, 0x00	; 0
    1d54:	e5 e3       	ldi	r30, 0x35	; 53
    1d56:	f0 e0       	ldi	r31, 0x00	; 0
    1d58:	80 81       	ld	r24, Z
    1d5a:	48 2f       	mov	r20, r24
    1d5c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d5e:	28 2f       	mov	r18, r24
    1d60:	30 e0       	ldi	r19, 0x00	; 0
    1d62:	81 e0       	ldi	r24, 0x01	; 1
    1d64:	90 e0       	ldi	r25, 0x00	; 0
    1d66:	02 2e       	mov	r0, r18
    1d68:	02 c0       	rjmp	.+4      	; 0x1d6e <DIO_togglePinValue+0xcc>
    1d6a:	88 0f       	add	r24, r24
    1d6c:	99 1f       	adc	r25, r25
    1d6e:	0a 94       	dec	r0
    1d70:	e2 f7       	brpl	.-8      	; 0x1d6a <DIO_togglePinValue+0xc8>
    1d72:	84 27       	eor	r24, r20
    1d74:	8c 93       	st	X, r24
    1d76:	13 c0       	rjmp	.+38     	; 0x1d9e <DIO_togglePinValue+0xfc>
			break;

			case DIO_PORTD:
			TOG_BIT(PORTD,PinId);
    1d78:	a2 e3       	ldi	r26, 0x32	; 50
    1d7a:	b0 e0       	ldi	r27, 0x00	; 0
    1d7c:	e2 e3       	ldi	r30, 0x32	; 50
    1d7e:	f0 e0       	ldi	r31, 0x00	; 0
    1d80:	80 81       	ld	r24, Z
    1d82:	48 2f       	mov	r20, r24
    1d84:	8a 81       	ldd	r24, Y+2	; 0x02
    1d86:	28 2f       	mov	r18, r24
    1d88:	30 e0       	ldi	r19, 0x00	; 0
    1d8a:	81 e0       	ldi	r24, 0x01	; 1
    1d8c:	90 e0       	ldi	r25, 0x00	; 0
    1d8e:	02 2e       	mov	r0, r18
    1d90:	02 c0       	rjmp	.+4      	; 0x1d96 <DIO_togglePinValue+0xf4>
    1d92:	88 0f       	add	r24, r24
    1d94:	99 1f       	adc	r25, r25
    1d96:	0a 94       	dec	r0
    1d98:	e2 f7       	brpl	.-8      	; 0x1d92 <DIO_togglePinValue+0xf0>
    1d9a:	84 27       	eor	r24, r20
    1d9c:	8c 93       	st	X, r24
	}
	else
	{
		//Do Nothing
	}
}
    1d9e:	0f 90       	pop	r0
    1da0:	0f 90       	pop	r0
    1da2:	0f 90       	pop	r0
    1da4:	0f 90       	pop	r0
    1da6:	cf 91       	pop	r28
    1da8:	df 91       	pop	r29
    1daa:	08 95       	ret

00001dac <DIO_activePinInPullUpResistance>:


void DIO_activePinInPullUpResistance(u8 PortId, u8 PinId)
{
    1dac:	df 93       	push	r29
    1dae:	cf 93       	push	r28
    1db0:	00 d0       	rcall	.+0      	; 0x1db2 <DIO_activePinInPullUpResistance+0x6>
    1db2:	00 d0       	rcall	.+0      	; 0x1db4 <DIO_activePinInPullUpResistance+0x8>
    1db4:	cd b7       	in	r28, 0x3d	; 61
    1db6:	de b7       	in	r29, 0x3e	; 62
    1db8:	89 83       	std	Y+1, r24	; 0x01
    1dba:	6a 83       	std	Y+2, r22	; 0x02
	if((PortId<=3) && (PinId<=7))
    1dbc:	89 81       	ldd	r24, Y+1	; 0x01
    1dbe:	84 30       	cpi	r24, 0x04	; 4
    1dc0:	08 f0       	brcs	.+2      	; 0x1dc4 <DIO_activePinInPullUpResistance+0x18>
    1dc2:	72 c0       	rjmp	.+228    	; 0x1ea8 <DIO_activePinInPullUpResistance+0xfc>
    1dc4:	8a 81       	ldd	r24, Y+2	; 0x02
    1dc6:	88 30       	cpi	r24, 0x08	; 8
    1dc8:	08 f0       	brcs	.+2      	; 0x1dcc <DIO_activePinInPullUpResistance+0x20>
    1dca:	6e c0       	rjmp	.+220    	; 0x1ea8 <DIO_activePinInPullUpResistance+0xfc>
	{
		switch(PortId)
    1dcc:	89 81       	ldd	r24, Y+1	; 0x01
    1dce:	28 2f       	mov	r18, r24
    1dd0:	30 e0       	ldi	r19, 0x00	; 0
    1dd2:	3c 83       	std	Y+4, r19	; 0x04
    1dd4:	2b 83       	std	Y+3, r18	; 0x03
    1dd6:	8b 81       	ldd	r24, Y+3	; 0x03
    1dd8:	9c 81       	ldd	r25, Y+4	; 0x04
    1dda:	81 30       	cpi	r24, 0x01	; 1
    1ddc:	91 05       	cpc	r25, r1
    1dde:	49 f1       	breq	.+82     	; 0x1e32 <DIO_activePinInPullUpResistance+0x86>
    1de0:	2b 81       	ldd	r18, Y+3	; 0x03
    1de2:	3c 81       	ldd	r19, Y+4	; 0x04
    1de4:	22 30       	cpi	r18, 0x02	; 2
    1de6:	31 05       	cpc	r19, r1
    1de8:	2c f4       	brge	.+10     	; 0x1df4 <DIO_activePinInPullUpResistance+0x48>
    1dea:	8b 81       	ldd	r24, Y+3	; 0x03
    1dec:	9c 81       	ldd	r25, Y+4	; 0x04
    1dee:	00 97       	sbiw	r24, 0x00	; 0
    1df0:	61 f0       	breq	.+24     	; 0x1e0a <DIO_activePinInPullUpResistance+0x5e>
    1df2:	5a c0       	rjmp	.+180    	; 0x1ea8 <DIO_activePinInPullUpResistance+0xfc>
    1df4:	2b 81       	ldd	r18, Y+3	; 0x03
    1df6:	3c 81       	ldd	r19, Y+4	; 0x04
    1df8:	22 30       	cpi	r18, 0x02	; 2
    1dfa:	31 05       	cpc	r19, r1
    1dfc:	71 f1       	breq	.+92     	; 0x1e5a <DIO_activePinInPullUpResistance+0xae>
    1dfe:	8b 81       	ldd	r24, Y+3	; 0x03
    1e00:	9c 81       	ldd	r25, Y+4	; 0x04
    1e02:	83 30       	cpi	r24, 0x03	; 3
    1e04:	91 05       	cpc	r25, r1
    1e06:	e9 f1       	breq	.+122    	; 0x1e82 <DIO_activePinInPullUpResistance+0xd6>
    1e08:	4f c0       	rjmp	.+158    	; 0x1ea8 <DIO_activePinInPullUpResistance+0xfc>
		{
			case DIO_PORTA:
			SET_BIT(PORTA,PinId);
    1e0a:	ab e3       	ldi	r26, 0x3B	; 59
    1e0c:	b0 e0       	ldi	r27, 0x00	; 0
    1e0e:	eb e3       	ldi	r30, 0x3B	; 59
    1e10:	f0 e0       	ldi	r31, 0x00	; 0
    1e12:	80 81       	ld	r24, Z
    1e14:	48 2f       	mov	r20, r24
    1e16:	8a 81       	ldd	r24, Y+2	; 0x02
    1e18:	28 2f       	mov	r18, r24
    1e1a:	30 e0       	ldi	r19, 0x00	; 0
    1e1c:	81 e0       	ldi	r24, 0x01	; 1
    1e1e:	90 e0       	ldi	r25, 0x00	; 0
    1e20:	02 2e       	mov	r0, r18
    1e22:	02 c0       	rjmp	.+4      	; 0x1e28 <DIO_activePinInPullUpResistance+0x7c>
    1e24:	88 0f       	add	r24, r24
    1e26:	99 1f       	adc	r25, r25
    1e28:	0a 94       	dec	r0
    1e2a:	e2 f7       	brpl	.-8      	; 0x1e24 <DIO_activePinInPullUpResistance+0x78>
    1e2c:	84 2b       	or	r24, r20
    1e2e:	8c 93       	st	X, r24
    1e30:	3b c0       	rjmp	.+118    	; 0x1ea8 <DIO_activePinInPullUpResistance+0xfc>
			break;

			case DIO_PORTB:
			SET_BIT(PORTB,PinId);
    1e32:	a8 e3       	ldi	r26, 0x38	; 56
    1e34:	b0 e0       	ldi	r27, 0x00	; 0
    1e36:	e8 e3       	ldi	r30, 0x38	; 56
    1e38:	f0 e0       	ldi	r31, 0x00	; 0
    1e3a:	80 81       	ld	r24, Z
    1e3c:	48 2f       	mov	r20, r24
    1e3e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e40:	28 2f       	mov	r18, r24
    1e42:	30 e0       	ldi	r19, 0x00	; 0
    1e44:	81 e0       	ldi	r24, 0x01	; 1
    1e46:	90 e0       	ldi	r25, 0x00	; 0
    1e48:	02 2e       	mov	r0, r18
    1e4a:	02 c0       	rjmp	.+4      	; 0x1e50 <DIO_activePinInPullUpResistance+0xa4>
    1e4c:	88 0f       	add	r24, r24
    1e4e:	99 1f       	adc	r25, r25
    1e50:	0a 94       	dec	r0
    1e52:	e2 f7       	brpl	.-8      	; 0x1e4c <DIO_activePinInPullUpResistance+0xa0>
    1e54:	84 2b       	or	r24, r20
    1e56:	8c 93       	st	X, r24
    1e58:	27 c0       	rjmp	.+78     	; 0x1ea8 <DIO_activePinInPullUpResistance+0xfc>
			break;

			case DIO_PORTC:
			SET_BIT(PORTC,PinId);
    1e5a:	a5 e3       	ldi	r26, 0x35	; 53
    1e5c:	b0 e0       	ldi	r27, 0x00	; 0
    1e5e:	e5 e3       	ldi	r30, 0x35	; 53
    1e60:	f0 e0       	ldi	r31, 0x00	; 0
    1e62:	80 81       	ld	r24, Z
    1e64:	48 2f       	mov	r20, r24
    1e66:	8a 81       	ldd	r24, Y+2	; 0x02
    1e68:	28 2f       	mov	r18, r24
    1e6a:	30 e0       	ldi	r19, 0x00	; 0
    1e6c:	81 e0       	ldi	r24, 0x01	; 1
    1e6e:	90 e0       	ldi	r25, 0x00	; 0
    1e70:	02 2e       	mov	r0, r18
    1e72:	02 c0       	rjmp	.+4      	; 0x1e78 <DIO_activePinInPullUpResistance+0xcc>
    1e74:	88 0f       	add	r24, r24
    1e76:	99 1f       	adc	r25, r25
    1e78:	0a 94       	dec	r0
    1e7a:	e2 f7       	brpl	.-8      	; 0x1e74 <DIO_activePinInPullUpResistance+0xc8>
    1e7c:	84 2b       	or	r24, r20
    1e7e:	8c 93       	st	X, r24
    1e80:	13 c0       	rjmp	.+38     	; 0x1ea8 <DIO_activePinInPullUpResistance+0xfc>
			break;

			case DIO_PORTD:
			SET_BIT(PORTD,PinId);
    1e82:	a2 e3       	ldi	r26, 0x32	; 50
    1e84:	b0 e0       	ldi	r27, 0x00	; 0
    1e86:	e2 e3       	ldi	r30, 0x32	; 50
    1e88:	f0 e0       	ldi	r31, 0x00	; 0
    1e8a:	80 81       	ld	r24, Z
    1e8c:	48 2f       	mov	r20, r24
    1e8e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e90:	28 2f       	mov	r18, r24
    1e92:	30 e0       	ldi	r19, 0x00	; 0
    1e94:	81 e0       	ldi	r24, 0x01	; 1
    1e96:	90 e0       	ldi	r25, 0x00	; 0
    1e98:	02 2e       	mov	r0, r18
    1e9a:	02 c0       	rjmp	.+4      	; 0x1ea0 <DIO_activePinInPullUpResistance+0xf4>
    1e9c:	88 0f       	add	r24, r24
    1e9e:	99 1f       	adc	r25, r25
    1ea0:	0a 94       	dec	r0
    1ea2:	e2 f7       	brpl	.-8      	; 0x1e9c <DIO_activePinInPullUpResistance+0xf0>
    1ea4:	84 2b       	or	r24, r20
    1ea6:	8c 93       	st	X, r24
	}
	else
	{
		//Do Nothing
	}
}
    1ea8:	0f 90       	pop	r0
    1eaa:	0f 90       	pop	r0
    1eac:	0f 90       	pop	r0
    1eae:	0f 90       	pop	r0
    1eb0:	cf 91       	pop	r28
    1eb2:	df 91       	pop	r29
    1eb4:	08 95       	ret

00001eb6 <GIR_enable>:
#include "STD_TYPES.h"
#include "GIR_interface.h"
#include "GIR_private.h"

void GIR_enable(void)
{
    1eb6:	df 93       	push	r29
    1eb8:	cf 93       	push	r28
    1eba:	cd b7       	in	r28, 0x3d	; 61
    1ebc:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,I);
    1ebe:	af e5       	ldi	r26, 0x5F	; 95
    1ec0:	b0 e0       	ldi	r27, 0x00	; 0
    1ec2:	ef e5       	ldi	r30, 0x5F	; 95
    1ec4:	f0 e0       	ldi	r31, 0x00	; 0
    1ec6:	80 81       	ld	r24, Z
    1ec8:	80 68       	ori	r24, 0x80	; 128
    1eca:	8c 93       	st	X, r24

}
    1ecc:	cf 91       	pop	r28
    1ece:	df 91       	pop	r29
    1ed0:	08 95       	ret

00001ed2 <GIR_disable>:

void GIR_disable(void)
{
    1ed2:	df 93       	push	r29
    1ed4:	cf 93       	push	r28
    1ed6:	cd b7       	in	r28, 0x3d	; 61
    1ed8:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,I);
    1eda:	af e5       	ldi	r26, 0x5F	; 95
    1edc:	b0 e0       	ldi	r27, 0x00	; 0
    1ede:	ef e5       	ldi	r30, 0x5F	; 95
    1ee0:	f0 e0       	ldi	r31, 0x00	; 0
    1ee2:	80 81       	ld	r24, Z
    1ee4:	8f 77       	andi	r24, 0x7F	; 127
    1ee6:	8c 93       	st	X, r24

}
    1ee8:	cf 91       	pop	r28
    1eea:	df 91       	pop	r29
    1eec:	08 95       	ret

00001eee <LCD_init>:




void LCD_init(void)
{
    1eee:	0f 93       	push	r16
    1ef0:	1f 93       	push	r17
    1ef2:	df 93       	push	r29
    1ef4:	cf 93       	push	r28
    1ef6:	cd b7       	in	r28, 0x3d	; 61
    1ef8:	de b7       	in	r29, 0x3e	; 62
    1efa:	ca 55       	subi	r28, 0x5A	; 90
    1efc:	d0 40       	sbci	r29, 0x00	; 0
    1efe:	0f b6       	in	r0, 0x3f	; 63
    1f00:	f8 94       	cli
    1f02:	de bf       	out	0x3e, r29	; 62
    1f04:	0f be       	out	0x3f, r0	; 63
    1f06:	cd bf       	out	0x3d, r28	; 61
	// Intialize LCD pins As OutPut Pins
	DIO_setPinDirection(LCD_RW_PORT,LCD_RW_PIN,DIO_PIN_OUTPUT);
    1f08:	81 e0       	ldi	r24, 0x01	; 1
    1f0a:	62 e0       	ldi	r22, 0x02	; 2
    1f0c:	41 e0       	ldi	r20, 0x01	; 1
    1f0e:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <DIO_setPinDirection>
	DIO_setPinDirection(LCD_RS_PORT,LCD_RS_PIN,DIO_PIN_OUTPUT);
    1f12:	81 e0       	ldi	r24, 0x01	; 1
    1f14:	61 e0       	ldi	r22, 0x01	; 1
    1f16:	41 e0       	ldi	r20, 0x01	; 1
    1f18:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <DIO_setPinDirection>
	DIO_setPinDirection(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_OUTPUT);
    1f1c:	81 e0       	ldi	r24, 0x01	; 1
    1f1e:	63 e0       	ldi	r22, 0x03	; 3
    1f20:	41 e0       	ldi	r20, 0x01	; 1
    1f22:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <DIO_setPinDirection>
	DIO_setPinDirection(LCD_D4_PORT,LCD_D4_PIN,DIO_PIN_OUTPUT);
    1f26:	80 e0       	ldi	r24, 0x00	; 0
    1f28:	64 e0       	ldi	r22, 0x04	; 4
    1f2a:	41 e0       	ldi	r20, 0x01	; 1
    1f2c:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <DIO_setPinDirection>
	DIO_setPinDirection(LCD_D5_PORT,LCD_D5_PIN,DIO_PIN_OUTPUT);
    1f30:	80 e0       	ldi	r24, 0x00	; 0
    1f32:	65 e0       	ldi	r22, 0x05	; 5
    1f34:	41 e0       	ldi	r20, 0x01	; 1
    1f36:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <DIO_setPinDirection>
	DIO_setPinDirection(LCD_D6_PORT,LCD_D6_PIN,DIO_PIN_OUTPUT);
    1f3a:	80 e0       	ldi	r24, 0x00	; 0
    1f3c:	66 e0       	ldi	r22, 0x06	; 6
    1f3e:	41 e0       	ldi	r20, 0x01	; 1
    1f40:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <DIO_setPinDirection>
	DIO_setPinDirection(LCD_D7_PORT,LCD_D7_PIN,DIO_PIN_OUTPUT);
    1f44:	80 e0       	ldi	r24, 0x00	; 0
    1f46:	67 e0       	ldi	r22, 0x07	; 7
    1f48:	41 e0       	ldi	r20, 0x01	; 1
    1f4a:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <DIO_setPinDirection>
    1f4e:	fe 01       	movw	r30, r28
    1f50:	e9 5a       	subi	r30, 0xA9	; 169
    1f52:	ff 4f       	sbci	r31, 0xFF	; 255
    1f54:	80 e0       	ldi	r24, 0x00	; 0
    1f56:	90 e0       	ldi	r25, 0x00	; 0
    1f58:	ac e0       	ldi	r26, 0x0C	; 12
    1f5a:	b2 e4       	ldi	r27, 0x42	; 66
    1f5c:	80 83       	st	Z, r24
    1f5e:	91 83       	std	Z+1, r25	; 0x01
    1f60:	a2 83       	std	Z+2, r26	; 0x02
    1f62:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f64:	8e 01       	movw	r16, r28
    1f66:	0d 5a       	subi	r16, 0xAD	; 173
    1f68:	1f 4f       	sbci	r17, 0xFF	; 255
    1f6a:	fe 01       	movw	r30, r28
    1f6c:	e9 5a       	subi	r30, 0xA9	; 169
    1f6e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f70:	60 81       	ld	r22, Z
    1f72:	71 81       	ldd	r23, Z+1	; 0x01
    1f74:	82 81       	ldd	r24, Z+2	; 0x02
    1f76:	93 81       	ldd	r25, Z+3	; 0x03
    1f78:	20 e0       	ldi	r18, 0x00	; 0
    1f7a:	30 e0       	ldi	r19, 0x00	; 0
    1f7c:	4a e7       	ldi	r20, 0x7A	; 122
    1f7e:	55 e4       	ldi	r21, 0x45	; 69
    1f80:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f84:	dc 01       	movw	r26, r24
    1f86:	cb 01       	movw	r24, r22
    1f88:	f8 01       	movw	r30, r16
    1f8a:	80 83       	st	Z, r24
    1f8c:	91 83       	std	Z+1, r25	; 0x01
    1f8e:	a2 83       	std	Z+2, r26	; 0x02
    1f90:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1f92:	fe 01       	movw	r30, r28
    1f94:	ed 5a       	subi	r30, 0xAD	; 173
    1f96:	ff 4f       	sbci	r31, 0xFF	; 255
    1f98:	60 81       	ld	r22, Z
    1f9a:	71 81       	ldd	r23, Z+1	; 0x01
    1f9c:	82 81       	ldd	r24, Z+2	; 0x02
    1f9e:	93 81       	ldd	r25, Z+3	; 0x03
    1fa0:	20 e0       	ldi	r18, 0x00	; 0
    1fa2:	30 e0       	ldi	r19, 0x00	; 0
    1fa4:	40 e8       	ldi	r20, 0x80	; 128
    1fa6:	5f e3       	ldi	r21, 0x3F	; 63
    1fa8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1fac:	88 23       	and	r24, r24
    1fae:	44 f4       	brge	.+16     	; 0x1fc0 <LCD_init+0xd2>
		__ticks = 1;
    1fb0:	fe 01       	movw	r30, r28
    1fb2:	ef 5a       	subi	r30, 0xAF	; 175
    1fb4:	ff 4f       	sbci	r31, 0xFF	; 255
    1fb6:	81 e0       	ldi	r24, 0x01	; 1
    1fb8:	90 e0       	ldi	r25, 0x00	; 0
    1fba:	91 83       	std	Z+1, r25	; 0x01
    1fbc:	80 83       	st	Z, r24
    1fbe:	64 c0       	rjmp	.+200    	; 0x2088 <LCD_init+0x19a>
	else if (__tmp > 65535)
    1fc0:	fe 01       	movw	r30, r28
    1fc2:	ed 5a       	subi	r30, 0xAD	; 173
    1fc4:	ff 4f       	sbci	r31, 0xFF	; 255
    1fc6:	60 81       	ld	r22, Z
    1fc8:	71 81       	ldd	r23, Z+1	; 0x01
    1fca:	82 81       	ldd	r24, Z+2	; 0x02
    1fcc:	93 81       	ldd	r25, Z+3	; 0x03
    1fce:	20 e0       	ldi	r18, 0x00	; 0
    1fd0:	3f ef       	ldi	r19, 0xFF	; 255
    1fd2:	4f e7       	ldi	r20, 0x7F	; 127
    1fd4:	57 e4       	ldi	r21, 0x47	; 71
    1fd6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1fda:	18 16       	cp	r1, r24
    1fdc:	0c f0       	brlt	.+2      	; 0x1fe0 <LCD_init+0xf2>
    1fde:	43 c0       	rjmp	.+134    	; 0x2066 <LCD_init+0x178>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fe0:	fe 01       	movw	r30, r28
    1fe2:	e9 5a       	subi	r30, 0xA9	; 169
    1fe4:	ff 4f       	sbci	r31, 0xFF	; 255
    1fe6:	60 81       	ld	r22, Z
    1fe8:	71 81       	ldd	r23, Z+1	; 0x01
    1fea:	82 81       	ldd	r24, Z+2	; 0x02
    1fec:	93 81       	ldd	r25, Z+3	; 0x03
    1fee:	20 e0       	ldi	r18, 0x00	; 0
    1ff0:	30 e0       	ldi	r19, 0x00	; 0
    1ff2:	40 e2       	ldi	r20, 0x20	; 32
    1ff4:	51 e4       	ldi	r21, 0x41	; 65
    1ff6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ffa:	dc 01       	movw	r26, r24
    1ffc:	cb 01       	movw	r24, r22
    1ffe:	8e 01       	movw	r16, r28
    2000:	0f 5a       	subi	r16, 0xAF	; 175
    2002:	1f 4f       	sbci	r17, 0xFF	; 255
    2004:	bc 01       	movw	r22, r24
    2006:	cd 01       	movw	r24, r26
    2008:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    200c:	dc 01       	movw	r26, r24
    200e:	cb 01       	movw	r24, r22
    2010:	f8 01       	movw	r30, r16
    2012:	91 83       	std	Z+1, r25	; 0x01
    2014:	80 83       	st	Z, r24
    2016:	1f c0       	rjmp	.+62     	; 0x2056 <LCD_init+0x168>
    2018:	fe 01       	movw	r30, r28
    201a:	e1 5b       	subi	r30, 0xB1	; 177
    201c:	ff 4f       	sbci	r31, 0xFF	; 255
    201e:	80 e9       	ldi	r24, 0x90	; 144
    2020:	91 e0       	ldi	r25, 0x01	; 1
    2022:	91 83       	std	Z+1, r25	; 0x01
    2024:	80 83       	st	Z, r24
    2026:	fe 01       	movw	r30, r28
    2028:	e1 5b       	subi	r30, 0xB1	; 177
    202a:	ff 4f       	sbci	r31, 0xFF	; 255
    202c:	80 81       	ld	r24, Z
    202e:	91 81       	ldd	r25, Z+1	; 0x01
    2030:	01 97       	sbiw	r24, 0x01	; 1
    2032:	f1 f7       	brne	.-4      	; 0x2030 <LCD_init+0x142>
    2034:	fe 01       	movw	r30, r28
    2036:	e1 5b       	subi	r30, 0xB1	; 177
    2038:	ff 4f       	sbci	r31, 0xFF	; 255
    203a:	91 83       	std	Z+1, r25	; 0x01
    203c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    203e:	de 01       	movw	r26, r28
    2040:	af 5a       	subi	r26, 0xAF	; 175
    2042:	bf 4f       	sbci	r27, 0xFF	; 255
    2044:	fe 01       	movw	r30, r28
    2046:	ef 5a       	subi	r30, 0xAF	; 175
    2048:	ff 4f       	sbci	r31, 0xFF	; 255
    204a:	80 81       	ld	r24, Z
    204c:	91 81       	ldd	r25, Z+1	; 0x01
    204e:	01 97       	sbiw	r24, 0x01	; 1
    2050:	11 96       	adiw	r26, 0x01	; 1
    2052:	9c 93       	st	X, r25
    2054:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2056:	fe 01       	movw	r30, r28
    2058:	ef 5a       	subi	r30, 0xAF	; 175
    205a:	ff 4f       	sbci	r31, 0xFF	; 255
    205c:	80 81       	ld	r24, Z
    205e:	91 81       	ldd	r25, Z+1	; 0x01
    2060:	00 97       	sbiw	r24, 0x00	; 0
    2062:	d1 f6       	brne	.-76     	; 0x2018 <LCD_init+0x12a>
    2064:	27 c0       	rjmp	.+78     	; 0x20b4 <LCD_init+0x1c6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2066:	8e 01       	movw	r16, r28
    2068:	0f 5a       	subi	r16, 0xAF	; 175
    206a:	1f 4f       	sbci	r17, 0xFF	; 255
    206c:	fe 01       	movw	r30, r28
    206e:	ed 5a       	subi	r30, 0xAD	; 173
    2070:	ff 4f       	sbci	r31, 0xFF	; 255
    2072:	60 81       	ld	r22, Z
    2074:	71 81       	ldd	r23, Z+1	; 0x01
    2076:	82 81       	ldd	r24, Z+2	; 0x02
    2078:	93 81       	ldd	r25, Z+3	; 0x03
    207a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    207e:	dc 01       	movw	r26, r24
    2080:	cb 01       	movw	r24, r22
    2082:	f8 01       	movw	r30, r16
    2084:	91 83       	std	Z+1, r25	; 0x01
    2086:	80 83       	st	Z, r24
    2088:	de 01       	movw	r26, r28
    208a:	a3 5b       	subi	r26, 0xB3	; 179
    208c:	bf 4f       	sbci	r27, 0xFF	; 255
    208e:	fe 01       	movw	r30, r28
    2090:	ef 5a       	subi	r30, 0xAF	; 175
    2092:	ff 4f       	sbci	r31, 0xFF	; 255
    2094:	80 81       	ld	r24, Z
    2096:	91 81       	ldd	r25, Z+1	; 0x01
    2098:	8d 93       	st	X+, r24
    209a:	9c 93       	st	X, r25
    209c:	fe 01       	movw	r30, r28
    209e:	e3 5b       	subi	r30, 0xB3	; 179
    20a0:	ff 4f       	sbci	r31, 0xFF	; 255
    20a2:	80 81       	ld	r24, Z
    20a4:	91 81       	ldd	r25, Z+1	; 0x01
    20a6:	01 97       	sbiw	r24, 0x01	; 1
    20a8:	f1 f7       	brne	.-4      	; 0x20a6 <LCD_init+0x1b8>
    20aa:	fe 01       	movw	r30, r28
    20ac:	e3 5b       	subi	r30, 0xB3	; 179
    20ae:	ff 4f       	sbci	r31, 0xFF	; 255
    20b0:	91 83       	std	Z+1, r25	; 0x01
    20b2:	80 83       	st	Z, r24

	_delay_ms(35);

	// set Rs pin = 0 (write command)
	DIO_setPinValue(LCD_RS_PORT, LCD_RS_PIN, DIO_PIN_LOW);
    20b4:	81 e0       	ldi	r24, 0x01	; 1
    20b6:	61 e0       	ldi	r22, 0x01	; 1
    20b8:	40 e0       	ldi	r20, 0x00	; 0
    20ba:	0e 94 9a 0c 	call	0x1934	; 0x1934 <DIO_setPinValue>
	// set Rw pin = 0 (write)
	DIO_setPinValue(LCD_RW_PORT, LCD_RW_PIN, DIO_PIN_LOW);
    20be:	81 e0       	ldi	r24, 0x01	; 1
    20c0:	62 e0       	ldi	r22, 0x02	; 2
    20c2:	40 e0       	ldi	r20, 0x00	; 0
    20c4:	0e 94 9a 0c 	call	0x1934	; 0x1934 <DIO_setPinValue>
	private_writeHalfPort(0b0010);
    20c8:	82 e0       	ldi	r24, 0x02	; 2
    20ca:	0e 94 63 15 	call	0x2ac6	; 0x2ac6 <private_writeHalfPort>
	DIO_setPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_HIGH);
    20ce:	81 e0       	ldi	r24, 0x01	; 1
    20d0:	63 e0       	ldi	r22, 0x03	; 3
    20d2:	41 e0       	ldi	r20, 0x01	; 1
    20d4:	0e 94 9a 0c 	call	0x1934	; 0x1934 <DIO_setPinValue>
    20d8:	fe 01       	movw	r30, r28
    20da:	e7 5b       	subi	r30, 0xB7	; 183
    20dc:	ff 4f       	sbci	r31, 0xFF	; 255
    20de:	80 e0       	ldi	r24, 0x00	; 0
    20e0:	90 e0       	ldi	r25, 0x00	; 0
    20e2:	a0 e8       	ldi	r26, 0x80	; 128
    20e4:	bf e3       	ldi	r27, 0x3F	; 63
    20e6:	80 83       	st	Z, r24
    20e8:	91 83       	std	Z+1, r25	; 0x01
    20ea:	a2 83       	std	Z+2, r26	; 0x02
    20ec:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20ee:	8e 01       	movw	r16, r28
    20f0:	0b 5b       	subi	r16, 0xBB	; 187
    20f2:	1f 4f       	sbci	r17, 0xFF	; 255
    20f4:	fe 01       	movw	r30, r28
    20f6:	e7 5b       	subi	r30, 0xB7	; 183
    20f8:	ff 4f       	sbci	r31, 0xFF	; 255
    20fa:	60 81       	ld	r22, Z
    20fc:	71 81       	ldd	r23, Z+1	; 0x01
    20fe:	82 81       	ldd	r24, Z+2	; 0x02
    2100:	93 81       	ldd	r25, Z+3	; 0x03
    2102:	20 e0       	ldi	r18, 0x00	; 0
    2104:	30 e0       	ldi	r19, 0x00	; 0
    2106:	4a e7       	ldi	r20, 0x7A	; 122
    2108:	55 e4       	ldi	r21, 0x45	; 69
    210a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    210e:	dc 01       	movw	r26, r24
    2110:	cb 01       	movw	r24, r22
    2112:	f8 01       	movw	r30, r16
    2114:	80 83       	st	Z, r24
    2116:	91 83       	std	Z+1, r25	; 0x01
    2118:	a2 83       	std	Z+2, r26	; 0x02
    211a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    211c:	fe 01       	movw	r30, r28
    211e:	eb 5b       	subi	r30, 0xBB	; 187
    2120:	ff 4f       	sbci	r31, 0xFF	; 255
    2122:	60 81       	ld	r22, Z
    2124:	71 81       	ldd	r23, Z+1	; 0x01
    2126:	82 81       	ldd	r24, Z+2	; 0x02
    2128:	93 81       	ldd	r25, Z+3	; 0x03
    212a:	20 e0       	ldi	r18, 0x00	; 0
    212c:	30 e0       	ldi	r19, 0x00	; 0
    212e:	40 e8       	ldi	r20, 0x80	; 128
    2130:	5f e3       	ldi	r21, 0x3F	; 63
    2132:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2136:	88 23       	and	r24, r24
    2138:	44 f4       	brge	.+16     	; 0x214a <LCD_init+0x25c>
		__ticks = 1;
    213a:	fe 01       	movw	r30, r28
    213c:	ed 5b       	subi	r30, 0xBD	; 189
    213e:	ff 4f       	sbci	r31, 0xFF	; 255
    2140:	81 e0       	ldi	r24, 0x01	; 1
    2142:	90 e0       	ldi	r25, 0x00	; 0
    2144:	91 83       	std	Z+1, r25	; 0x01
    2146:	80 83       	st	Z, r24
    2148:	64 c0       	rjmp	.+200    	; 0x2212 <LCD_init+0x324>
	else if (__tmp > 65535)
    214a:	fe 01       	movw	r30, r28
    214c:	eb 5b       	subi	r30, 0xBB	; 187
    214e:	ff 4f       	sbci	r31, 0xFF	; 255
    2150:	60 81       	ld	r22, Z
    2152:	71 81       	ldd	r23, Z+1	; 0x01
    2154:	82 81       	ldd	r24, Z+2	; 0x02
    2156:	93 81       	ldd	r25, Z+3	; 0x03
    2158:	20 e0       	ldi	r18, 0x00	; 0
    215a:	3f ef       	ldi	r19, 0xFF	; 255
    215c:	4f e7       	ldi	r20, 0x7F	; 127
    215e:	57 e4       	ldi	r21, 0x47	; 71
    2160:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2164:	18 16       	cp	r1, r24
    2166:	0c f0       	brlt	.+2      	; 0x216a <LCD_init+0x27c>
    2168:	43 c0       	rjmp	.+134    	; 0x21f0 <LCD_init+0x302>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    216a:	fe 01       	movw	r30, r28
    216c:	e7 5b       	subi	r30, 0xB7	; 183
    216e:	ff 4f       	sbci	r31, 0xFF	; 255
    2170:	60 81       	ld	r22, Z
    2172:	71 81       	ldd	r23, Z+1	; 0x01
    2174:	82 81       	ldd	r24, Z+2	; 0x02
    2176:	93 81       	ldd	r25, Z+3	; 0x03
    2178:	20 e0       	ldi	r18, 0x00	; 0
    217a:	30 e0       	ldi	r19, 0x00	; 0
    217c:	40 e2       	ldi	r20, 0x20	; 32
    217e:	51 e4       	ldi	r21, 0x41	; 65
    2180:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2184:	dc 01       	movw	r26, r24
    2186:	cb 01       	movw	r24, r22
    2188:	8e 01       	movw	r16, r28
    218a:	0d 5b       	subi	r16, 0xBD	; 189
    218c:	1f 4f       	sbci	r17, 0xFF	; 255
    218e:	bc 01       	movw	r22, r24
    2190:	cd 01       	movw	r24, r26
    2192:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2196:	dc 01       	movw	r26, r24
    2198:	cb 01       	movw	r24, r22
    219a:	f8 01       	movw	r30, r16
    219c:	91 83       	std	Z+1, r25	; 0x01
    219e:	80 83       	st	Z, r24
    21a0:	1f c0       	rjmp	.+62     	; 0x21e0 <LCD_init+0x2f2>
    21a2:	fe 01       	movw	r30, r28
    21a4:	ef 5b       	subi	r30, 0xBF	; 191
    21a6:	ff 4f       	sbci	r31, 0xFF	; 255
    21a8:	80 e9       	ldi	r24, 0x90	; 144
    21aa:	91 e0       	ldi	r25, 0x01	; 1
    21ac:	91 83       	std	Z+1, r25	; 0x01
    21ae:	80 83       	st	Z, r24
    21b0:	fe 01       	movw	r30, r28
    21b2:	ef 5b       	subi	r30, 0xBF	; 191
    21b4:	ff 4f       	sbci	r31, 0xFF	; 255
    21b6:	80 81       	ld	r24, Z
    21b8:	91 81       	ldd	r25, Z+1	; 0x01
    21ba:	01 97       	sbiw	r24, 0x01	; 1
    21bc:	f1 f7       	brne	.-4      	; 0x21ba <LCD_init+0x2cc>
    21be:	fe 01       	movw	r30, r28
    21c0:	ef 5b       	subi	r30, 0xBF	; 191
    21c2:	ff 4f       	sbci	r31, 0xFF	; 255
    21c4:	91 83       	std	Z+1, r25	; 0x01
    21c6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21c8:	de 01       	movw	r26, r28
    21ca:	ad 5b       	subi	r26, 0xBD	; 189
    21cc:	bf 4f       	sbci	r27, 0xFF	; 255
    21ce:	fe 01       	movw	r30, r28
    21d0:	ed 5b       	subi	r30, 0xBD	; 189
    21d2:	ff 4f       	sbci	r31, 0xFF	; 255
    21d4:	80 81       	ld	r24, Z
    21d6:	91 81       	ldd	r25, Z+1	; 0x01
    21d8:	01 97       	sbiw	r24, 0x01	; 1
    21da:	11 96       	adiw	r26, 0x01	; 1
    21dc:	9c 93       	st	X, r25
    21de:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21e0:	fe 01       	movw	r30, r28
    21e2:	ed 5b       	subi	r30, 0xBD	; 189
    21e4:	ff 4f       	sbci	r31, 0xFF	; 255
    21e6:	80 81       	ld	r24, Z
    21e8:	91 81       	ldd	r25, Z+1	; 0x01
    21ea:	00 97       	sbiw	r24, 0x00	; 0
    21ec:	d1 f6       	brne	.-76     	; 0x21a2 <LCD_init+0x2b4>
    21ee:	24 c0       	rjmp	.+72     	; 0x2238 <LCD_init+0x34a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21f0:	8e 01       	movw	r16, r28
    21f2:	0d 5b       	subi	r16, 0xBD	; 189
    21f4:	1f 4f       	sbci	r17, 0xFF	; 255
    21f6:	fe 01       	movw	r30, r28
    21f8:	eb 5b       	subi	r30, 0xBB	; 187
    21fa:	ff 4f       	sbci	r31, 0xFF	; 255
    21fc:	60 81       	ld	r22, Z
    21fe:	71 81       	ldd	r23, Z+1	; 0x01
    2200:	82 81       	ldd	r24, Z+2	; 0x02
    2202:	93 81       	ldd	r25, Z+3	; 0x03
    2204:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2208:	dc 01       	movw	r26, r24
    220a:	cb 01       	movw	r24, r22
    220c:	f8 01       	movw	r30, r16
    220e:	91 83       	std	Z+1, r25	; 0x01
    2210:	80 83       	st	Z, r24
    2212:	fe 01       	movw	r30, r28
    2214:	ed 5b       	subi	r30, 0xBD	; 189
    2216:	ff 4f       	sbci	r31, 0xFF	; 255
    2218:	80 81       	ld	r24, Z
    221a:	91 81       	ldd	r25, Z+1	; 0x01
    221c:	fe 01       	movw	r30, r28
    221e:	ff 96       	adiw	r30, 0x3f	; 63
    2220:	91 83       	std	Z+1, r25	; 0x01
    2222:	80 83       	st	Z, r24
    2224:	fe 01       	movw	r30, r28
    2226:	ff 96       	adiw	r30, 0x3f	; 63
    2228:	80 81       	ld	r24, Z
    222a:	91 81       	ldd	r25, Z+1	; 0x01
    222c:	01 97       	sbiw	r24, 0x01	; 1
    222e:	f1 f7       	brne	.-4      	; 0x222c <LCD_init+0x33e>
    2230:	fe 01       	movw	r30, r28
    2232:	ff 96       	adiw	r30, 0x3f	; 63
    2234:	91 83       	std	Z+1, r25	; 0x01
    2236:	80 83       	st	Z, r24
	_delay_ms(1);
	DIO_setPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_LOW);
    2238:	81 e0       	ldi	r24, 0x01	; 1
    223a:	63 e0       	ldi	r22, 0x03	; 3
    223c:	40 e0       	ldi	r20, 0x00	; 0
    223e:	0e 94 9a 0c 	call	0x1934	; 0x1934 <DIO_setPinValue>
	// Function Set command 2*16 LCD, 4 Bit Mode, 5*7 Font
	LCD_sendCmnd(0b00101000);
    2242:	88 e2       	ldi	r24, 0x28	; 40
    2244:	0e 94 27 13 	call	0x264e	; 0x264e <LCD_sendCmnd>
    2248:	80 e0       	ldi	r24, 0x00	; 0
    224a:	90 e0       	ldi	r25, 0x00	; 0
    224c:	a4 e3       	ldi	r26, 0x34	; 52
    224e:	b2 e4       	ldi	r27, 0x42	; 66
    2250:	8b af       	std	Y+59, r24	; 0x3b
    2252:	9c af       	std	Y+60, r25	; 0x3c
    2254:	ad af       	std	Y+61, r26	; 0x3d
    2256:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2258:	6b ad       	ldd	r22, Y+59	; 0x3b
    225a:	7c ad       	ldd	r23, Y+60	; 0x3c
    225c:	8d ad       	ldd	r24, Y+61	; 0x3d
    225e:	9e ad       	ldd	r25, Y+62	; 0x3e
    2260:	2b ea       	ldi	r18, 0xAB	; 171
    2262:	3a ea       	ldi	r19, 0xAA	; 170
    2264:	4a ea       	ldi	r20, 0xAA	; 170
    2266:	50 e4       	ldi	r21, 0x40	; 64
    2268:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    226c:	dc 01       	movw	r26, r24
    226e:	cb 01       	movw	r24, r22
    2270:	8f ab       	std	Y+55, r24	; 0x37
    2272:	98 af       	std	Y+56, r25	; 0x38
    2274:	a9 af       	std	Y+57, r26	; 0x39
    2276:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    2278:	6f a9       	ldd	r22, Y+55	; 0x37
    227a:	78 ad       	ldd	r23, Y+56	; 0x38
    227c:	89 ad       	ldd	r24, Y+57	; 0x39
    227e:	9a ad       	ldd	r25, Y+58	; 0x3a
    2280:	20 e0       	ldi	r18, 0x00	; 0
    2282:	30 e0       	ldi	r19, 0x00	; 0
    2284:	40 e8       	ldi	r20, 0x80	; 128
    2286:	5f e3       	ldi	r21, 0x3F	; 63
    2288:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    228c:	88 23       	and	r24, r24
    228e:	1c f4       	brge	.+6      	; 0x2296 <LCD_init+0x3a8>
		__ticks = 1;
    2290:	81 e0       	ldi	r24, 0x01	; 1
    2292:	8e ab       	std	Y+54, r24	; 0x36
    2294:	91 c0       	rjmp	.+290    	; 0x23b8 <LCD_init+0x4ca>
	else if (__tmp > 255)
    2296:	6f a9       	ldd	r22, Y+55	; 0x37
    2298:	78 ad       	ldd	r23, Y+56	; 0x38
    229a:	89 ad       	ldd	r24, Y+57	; 0x39
    229c:	9a ad       	ldd	r25, Y+58	; 0x3a
    229e:	20 e0       	ldi	r18, 0x00	; 0
    22a0:	30 e0       	ldi	r19, 0x00	; 0
    22a2:	4f e7       	ldi	r20, 0x7F	; 127
    22a4:	53 e4       	ldi	r21, 0x43	; 67
    22a6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    22aa:	18 16       	cp	r1, r24
    22ac:	0c f0       	brlt	.+2      	; 0x22b0 <LCD_init+0x3c2>
    22ae:	7b c0       	rjmp	.+246    	; 0x23a6 <LCD_init+0x4b8>
	{
		_delay_ms(__us / 1000.0);
    22b0:	6b ad       	ldd	r22, Y+59	; 0x3b
    22b2:	7c ad       	ldd	r23, Y+60	; 0x3c
    22b4:	8d ad       	ldd	r24, Y+61	; 0x3d
    22b6:	9e ad       	ldd	r25, Y+62	; 0x3e
    22b8:	20 e0       	ldi	r18, 0x00	; 0
    22ba:	30 e0       	ldi	r19, 0x00	; 0
    22bc:	4a e7       	ldi	r20, 0x7A	; 122
    22be:	54 e4       	ldi	r21, 0x44	; 68
    22c0:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    22c4:	dc 01       	movw	r26, r24
    22c6:	cb 01       	movw	r24, r22
    22c8:	8a ab       	std	Y+50, r24	; 0x32
    22ca:	9b ab       	std	Y+51, r25	; 0x33
    22cc:	ac ab       	std	Y+52, r26	; 0x34
    22ce:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22d0:	6a a9       	ldd	r22, Y+50	; 0x32
    22d2:	7b a9       	ldd	r23, Y+51	; 0x33
    22d4:	8c a9       	ldd	r24, Y+52	; 0x34
    22d6:	9d a9       	ldd	r25, Y+53	; 0x35
    22d8:	20 e0       	ldi	r18, 0x00	; 0
    22da:	30 e0       	ldi	r19, 0x00	; 0
    22dc:	4a e7       	ldi	r20, 0x7A	; 122
    22de:	55 e4       	ldi	r21, 0x45	; 69
    22e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22e4:	dc 01       	movw	r26, r24
    22e6:	cb 01       	movw	r24, r22
    22e8:	8e a7       	std	Y+46, r24	; 0x2e
    22ea:	9f a7       	std	Y+47, r25	; 0x2f
    22ec:	a8 ab       	std	Y+48, r26	; 0x30
    22ee:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    22f0:	6e a5       	ldd	r22, Y+46	; 0x2e
    22f2:	7f a5       	ldd	r23, Y+47	; 0x2f
    22f4:	88 a9       	ldd	r24, Y+48	; 0x30
    22f6:	99 a9       	ldd	r25, Y+49	; 0x31
    22f8:	20 e0       	ldi	r18, 0x00	; 0
    22fa:	30 e0       	ldi	r19, 0x00	; 0
    22fc:	40 e8       	ldi	r20, 0x80	; 128
    22fe:	5f e3       	ldi	r21, 0x3F	; 63
    2300:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2304:	88 23       	and	r24, r24
    2306:	2c f4       	brge	.+10     	; 0x2312 <LCD_init+0x424>
		__ticks = 1;
    2308:	81 e0       	ldi	r24, 0x01	; 1
    230a:	90 e0       	ldi	r25, 0x00	; 0
    230c:	9d a7       	std	Y+45, r25	; 0x2d
    230e:	8c a7       	std	Y+44, r24	; 0x2c
    2310:	3f c0       	rjmp	.+126    	; 0x2390 <LCD_init+0x4a2>
	else if (__tmp > 65535)
    2312:	6e a5       	ldd	r22, Y+46	; 0x2e
    2314:	7f a5       	ldd	r23, Y+47	; 0x2f
    2316:	88 a9       	ldd	r24, Y+48	; 0x30
    2318:	99 a9       	ldd	r25, Y+49	; 0x31
    231a:	20 e0       	ldi	r18, 0x00	; 0
    231c:	3f ef       	ldi	r19, 0xFF	; 255
    231e:	4f e7       	ldi	r20, 0x7F	; 127
    2320:	57 e4       	ldi	r21, 0x47	; 71
    2322:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2326:	18 16       	cp	r1, r24
    2328:	4c f5       	brge	.+82     	; 0x237c <LCD_init+0x48e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    232a:	6a a9       	ldd	r22, Y+50	; 0x32
    232c:	7b a9       	ldd	r23, Y+51	; 0x33
    232e:	8c a9       	ldd	r24, Y+52	; 0x34
    2330:	9d a9       	ldd	r25, Y+53	; 0x35
    2332:	20 e0       	ldi	r18, 0x00	; 0
    2334:	30 e0       	ldi	r19, 0x00	; 0
    2336:	40 e2       	ldi	r20, 0x20	; 32
    2338:	51 e4       	ldi	r21, 0x41	; 65
    233a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    233e:	dc 01       	movw	r26, r24
    2340:	cb 01       	movw	r24, r22
    2342:	bc 01       	movw	r22, r24
    2344:	cd 01       	movw	r24, r26
    2346:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    234a:	dc 01       	movw	r26, r24
    234c:	cb 01       	movw	r24, r22
    234e:	9d a7       	std	Y+45, r25	; 0x2d
    2350:	8c a7       	std	Y+44, r24	; 0x2c
    2352:	0f c0       	rjmp	.+30     	; 0x2372 <LCD_init+0x484>
    2354:	80 e9       	ldi	r24, 0x90	; 144
    2356:	91 e0       	ldi	r25, 0x01	; 1
    2358:	9b a7       	std	Y+43, r25	; 0x2b
    235a:	8a a7       	std	Y+42, r24	; 0x2a
    235c:	8a a5       	ldd	r24, Y+42	; 0x2a
    235e:	9b a5       	ldd	r25, Y+43	; 0x2b
    2360:	01 97       	sbiw	r24, 0x01	; 1
    2362:	f1 f7       	brne	.-4      	; 0x2360 <LCD_init+0x472>
    2364:	9b a7       	std	Y+43, r25	; 0x2b
    2366:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2368:	8c a5       	ldd	r24, Y+44	; 0x2c
    236a:	9d a5       	ldd	r25, Y+45	; 0x2d
    236c:	01 97       	sbiw	r24, 0x01	; 1
    236e:	9d a7       	std	Y+45, r25	; 0x2d
    2370:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2372:	8c a5       	ldd	r24, Y+44	; 0x2c
    2374:	9d a5       	ldd	r25, Y+45	; 0x2d
    2376:	00 97       	sbiw	r24, 0x00	; 0
    2378:	69 f7       	brne	.-38     	; 0x2354 <LCD_init+0x466>
    237a:	24 c0       	rjmp	.+72     	; 0x23c4 <LCD_init+0x4d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    237c:	6e a5       	ldd	r22, Y+46	; 0x2e
    237e:	7f a5       	ldd	r23, Y+47	; 0x2f
    2380:	88 a9       	ldd	r24, Y+48	; 0x30
    2382:	99 a9       	ldd	r25, Y+49	; 0x31
    2384:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2388:	dc 01       	movw	r26, r24
    238a:	cb 01       	movw	r24, r22
    238c:	9d a7       	std	Y+45, r25	; 0x2d
    238e:	8c a7       	std	Y+44, r24	; 0x2c
    2390:	8c a5       	ldd	r24, Y+44	; 0x2c
    2392:	9d a5       	ldd	r25, Y+45	; 0x2d
    2394:	99 a7       	std	Y+41, r25	; 0x29
    2396:	88 a7       	std	Y+40, r24	; 0x28
    2398:	88 a5       	ldd	r24, Y+40	; 0x28
    239a:	99 a5       	ldd	r25, Y+41	; 0x29
    239c:	01 97       	sbiw	r24, 0x01	; 1
    239e:	f1 f7       	brne	.-4      	; 0x239c <LCD_init+0x4ae>
    23a0:	99 a7       	std	Y+41, r25	; 0x29
    23a2:	88 a7       	std	Y+40, r24	; 0x28
    23a4:	0f c0       	rjmp	.+30     	; 0x23c4 <LCD_init+0x4d6>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    23a6:	6f a9       	ldd	r22, Y+55	; 0x37
    23a8:	78 ad       	ldd	r23, Y+56	; 0x38
    23aa:	89 ad       	ldd	r24, Y+57	; 0x39
    23ac:	9a ad       	ldd	r25, Y+58	; 0x3a
    23ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23b2:	dc 01       	movw	r26, r24
    23b4:	cb 01       	movw	r24, r22
    23b6:	8e ab       	std	Y+54, r24	; 0x36
    23b8:	8e a9       	ldd	r24, Y+54	; 0x36
    23ba:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    23bc:	8f a1       	ldd	r24, Y+39	; 0x27
    23be:	8a 95       	dec	r24
    23c0:	f1 f7       	brne	.-4      	; 0x23be <LCD_init+0x4d0>
    23c2:	8f a3       	std	Y+39, r24	; 0x27
	_delay_us(45);

	// Display on off Control(DisplayOn, Cursor on, Blink on)
	LCD_sendCmnd(0b00001111);
    23c4:	8f e0       	ldi	r24, 0x0F	; 15
    23c6:	0e 94 27 13 	call	0x264e	; 0x264e <LCD_sendCmnd>
    23ca:	80 e0       	ldi	r24, 0x00	; 0
    23cc:	90 e0       	ldi	r25, 0x00	; 0
    23ce:	a4 e3       	ldi	r26, 0x34	; 52
    23d0:	b2 e4       	ldi	r27, 0x42	; 66
    23d2:	8b a3       	std	Y+35, r24	; 0x23
    23d4:	9c a3       	std	Y+36, r25	; 0x24
    23d6:	ad a3       	std	Y+37, r26	; 0x25
    23d8:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    23da:	6b a1       	ldd	r22, Y+35	; 0x23
    23dc:	7c a1       	ldd	r23, Y+36	; 0x24
    23de:	8d a1       	ldd	r24, Y+37	; 0x25
    23e0:	9e a1       	ldd	r25, Y+38	; 0x26
    23e2:	2b ea       	ldi	r18, 0xAB	; 171
    23e4:	3a ea       	ldi	r19, 0xAA	; 170
    23e6:	4a ea       	ldi	r20, 0xAA	; 170
    23e8:	50 e4       	ldi	r21, 0x40	; 64
    23ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23ee:	dc 01       	movw	r26, r24
    23f0:	cb 01       	movw	r24, r22
    23f2:	8f 8f       	std	Y+31, r24	; 0x1f
    23f4:	98 a3       	std	Y+32, r25	; 0x20
    23f6:	a9 a3       	std	Y+33, r26	; 0x21
    23f8:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    23fa:	6f 8d       	ldd	r22, Y+31	; 0x1f
    23fc:	78 a1       	ldd	r23, Y+32	; 0x20
    23fe:	89 a1       	ldd	r24, Y+33	; 0x21
    2400:	9a a1       	ldd	r25, Y+34	; 0x22
    2402:	20 e0       	ldi	r18, 0x00	; 0
    2404:	30 e0       	ldi	r19, 0x00	; 0
    2406:	40 e8       	ldi	r20, 0x80	; 128
    2408:	5f e3       	ldi	r21, 0x3F	; 63
    240a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    240e:	88 23       	and	r24, r24
    2410:	1c f4       	brge	.+6      	; 0x2418 <LCD_init+0x52a>
		__ticks = 1;
    2412:	81 e0       	ldi	r24, 0x01	; 1
    2414:	8e 8f       	std	Y+30, r24	; 0x1e
    2416:	91 c0       	rjmp	.+290    	; 0x253a <LCD_init+0x64c>
	else if (__tmp > 255)
    2418:	6f 8d       	ldd	r22, Y+31	; 0x1f
    241a:	78 a1       	ldd	r23, Y+32	; 0x20
    241c:	89 a1       	ldd	r24, Y+33	; 0x21
    241e:	9a a1       	ldd	r25, Y+34	; 0x22
    2420:	20 e0       	ldi	r18, 0x00	; 0
    2422:	30 e0       	ldi	r19, 0x00	; 0
    2424:	4f e7       	ldi	r20, 0x7F	; 127
    2426:	53 e4       	ldi	r21, 0x43	; 67
    2428:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    242c:	18 16       	cp	r1, r24
    242e:	0c f0       	brlt	.+2      	; 0x2432 <LCD_init+0x544>
    2430:	7b c0       	rjmp	.+246    	; 0x2528 <LCD_init+0x63a>
	{
		_delay_ms(__us / 1000.0);
    2432:	6b a1       	ldd	r22, Y+35	; 0x23
    2434:	7c a1       	ldd	r23, Y+36	; 0x24
    2436:	8d a1       	ldd	r24, Y+37	; 0x25
    2438:	9e a1       	ldd	r25, Y+38	; 0x26
    243a:	20 e0       	ldi	r18, 0x00	; 0
    243c:	30 e0       	ldi	r19, 0x00	; 0
    243e:	4a e7       	ldi	r20, 0x7A	; 122
    2440:	54 e4       	ldi	r21, 0x44	; 68
    2442:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2446:	dc 01       	movw	r26, r24
    2448:	cb 01       	movw	r24, r22
    244a:	8a 8f       	std	Y+26, r24	; 0x1a
    244c:	9b 8f       	std	Y+27, r25	; 0x1b
    244e:	ac 8f       	std	Y+28, r26	; 0x1c
    2450:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2452:	6a 8d       	ldd	r22, Y+26	; 0x1a
    2454:	7b 8d       	ldd	r23, Y+27	; 0x1b
    2456:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2458:	9d 8d       	ldd	r25, Y+29	; 0x1d
    245a:	20 e0       	ldi	r18, 0x00	; 0
    245c:	30 e0       	ldi	r19, 0x00	; 0
    245e:	4a e7       	ldi	r20, 0x7A	; 122
    2460:	55 e4       	ldi	r21, 0x45	; 69
    2462:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2466:	dc 01       	movw	r26, r24
    2468:	cb 01       	movw	r24, r22
    246a:	8e 8b       	std	Y+22, r24	; 0x16
    246c:	9f 8b       	std	Y+23, r25	; 0x17
    246e:	a8 8f       	std	Y+24, r26	; 0x18
    2470:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    2472:	6e 89       	ldd	r22, Y+22	; 0x16
    2474:	7f 89       	ldd	r23, Y+23	; 0x17
    2476:	88 8d       	ldd	r24, Y+24	; 0x18
    2478:	99 8d       	ldd	r25, Y+25	; 0x19
    247a:	20 e0       	ldi	r18, 0x00	; 0
    247c:	30 e0       	ldi	r19, 0x00	; 0
    247e:	40 e8       	ldi	r20, 0x80	; 128
    2480:	5f e3       	ldi	r21, 0x3F	; 63
    2482:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2486:	88 23       	and	r24, r24
    2488:	2c f4       	brge	.+10     	; 0x2494 <LCD_init+0x5a6>
		__ticks = 1;
    248a:	81 e0       	ldi	r24, 0x01	; 1
    248c:	90 e0       	ldi	r25, 0x00	; 0
    248e:	9d 8b       	std	Y+21, r25	; 0x15
    2490:	8c 8b       	std	Y+20, r24	; 0x14
    2492:	3f c0       	rjmp	.+126    	; 0x2512 <LCD_init+0x624>
	else if (__tmp > 65535)
    2494:	6e 89       	ldd	r22, Y+22	; 0x16
    2496:	7f 89       	ldd	r23, Y+23	; 0x17
    2498:	88 8d       	ldd	r24, Y+24	; 0x18
    249a:	99 8d       	ldd	r25, Y+25	; 0x19
    249c:	20 e0       	ldi	r18, 0x00	; 0
    249e:	3f ef       	ldi	r19, 0xFF	; 255
    24a0:	4f e7       	ldi	r20, 0x7F	; 127
    24a2:	57 e4       	ldi	r21, 0x47	; 71
    24a4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    24a8:	18 16       	cp	r1, r24
    24aa:	4c f5       	brge	.+82     	; 0x24fe <LCD_init+0x610>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24ac:	6a 8d       	ldd	r22, Y+26	; 0x1a
    24ae:	7b 8d       	ldd	r23, Y+27	; 0x1b
    24b0:	8c 8d       	ldd	r24, Y+28	; 0x1c
    24b2:	9d 8d       	ldd	r25, Y+29	; 0x1d
    24b4:	20 e0       	ldi	r18, 0x00	; 0
    24b6:	30 e0       	ldi	r19, 0x00	; 0
    24b8:	40 e2       	ldi	r20, 0x20	; 32
    24ba:	51 e4       	ldi	r21, 0x41	; 65
    24bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24c0:	dc 01       	movw	r26, r24
    24c2:	cb 01       	movw	r24, r22
    24c4:	bc 01       	movw	r22, r24
    24c6:	cd 01       	movw	r24, r26
    24c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24cc:	dc 01       	movw	r26, r24
    24ce:	cb 01       	movw	r24, r22
    24d0:	9d 8b       	std	Y+21, r25	; 0x15
    24d2:	8c 8b       	std	Y+20, r24	; 0x14
    24d4:	0f c0       	rjmp	.+30     	; 0x24f4 <LCD_init+0x606>
    24d6:	80 e9       	ldi	r24, 0x90	; 144
    24d8:	91 e0       	ldi	r25, 0x01	; 1
    24da:	9b 8b       	std	Y+19, r25	; 0x13
    24dc:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    24de:	8a 89       	ldd	r24, Y+18	; 0x12
    24e0:	9b 89       	ldd	r25, Y+19	; 0x13
    24e2:	01 97       	sbiw	r24, 0x01	; 1
    24e4:	f1 f7       	brne	.-4      	; 0x24e2 <LCD_init+0x5f4>
    24e6:	9b 8b       	std	Y+19, r25	; 0x13
    24e8:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24ea:	8c 89       	ldd	r24, Y+20	; 0x14
    24ec:	9d 89       	ldd	r25, Y+21	; 0x15
    24ee:	01 97       	sbiw	r24, 0x01	; 1
    24f0:	9d 8b       	std	Y+21, r25	; 0x15
    24f2:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24f4:	8c 89       	ldd	r24, Y+20	; 0x14
    24f6:	9d 89       	ldd	r25, Y+21	; 0x15
    24f8:	00 97       	sbiw	r24, 0x00	; 0
    24fa:	69 f7       	brne	.-38     	; 0x24d6 <LCD_init+0x5e8>
    24fc:	24 c0       	rjmp	.+72     	; 0x2546 <LCD_init+0x658>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24fe:	6e 89       	ldd	r22, Y+22	; 0x16
    2500:	7f 89       	ldd	r23, Y+23	; 0x17
    2502:	88 8d       	ldd	r24, Y+24	; 0x18
    2504:	99 8d       	ldd	r25, Y+25	; 0x19
    2506:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    250a:	dc 01       	movw	r26, r24
    250c:	cb 01       	movw	r24, r22
    250e:	9d 8b       	std	Y+21, r25	; 0x15
    2510:	8c 8b       	std	Y+20, r24	; 0x14
    2512:	8c 89       	ldd	r24, Y+20	; 0x14
    2514:	9d 89       	ldd	r25, Y+21	; 0x15
    2516:	99 8b       	std	Y+17, r25	; 0x11
    2518:	88 8b       	std	Y+16, r24	; 0x10
    251a:	88 89       	ldd	r24, Y+16	; 0x10
    251c:	99 89       	ldd	r25, Y+17	; 0x11
    251e:	01 97       	sbiw	r24, 0x01	; 1
    2520:	f1 f7       	brne	.-4      	; 0x251e <LCD_init+0x630>
    2522:	99 8b       	std	Y+17, r25	; 0x11
    2524:	88 8b       	std	Y+16, r24	; 0x10
    2526:	0f c0       	rjmp	.+30     	; 0x2546 <LCD_init+0x658>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2528:	6f 8d       	ldd	r22, Y+31	; 0x1f
    252a:	78 a1       	ldd	r23, Y+32	; 0x20
    252c:	89 a1       	ldd	r24, Y+33	; 0x21
    252e:	9a a1       	ldd	r25, Y+34	; 0x22
    2530:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2534:	dc 01       	movw	r26, r24
    2536:	cb 01       	movw	r24, r22
    2538:	8e 8f       	std	Y+30, r24	; 0x1e
    253a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    253c:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    253e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2540:	8a 95       	dec	r24
    2542:	f1 f7       	brne	.-4      	; 0x2540 <LCD_init+0x652>
    2544:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_us(45);

	// Clear Display
	LCD_sendCmnd(0b00000001);
    2546:	81 e0       	ldi	r24, 0x01	; 1
    2548:	0e 94 27 13 	call	0x264e	; 0x264e <LCD_sendCmnd>
    254c:	80 e0       	ldi	r24, 0x00	; 0
    254e:	90 e0       	ldi	r25, 0x00	; 0
    2550:	a0 e0       	ldi	r26, 0x00	; 0
    2552:	b0 e4       	ldi	r27, 0x40	; 64
    2554:	8b 87       	std	Y+11, r24	; 0x0b
    2556:	9c 87       	std	Y+12, r25	; 0x0c
    2558:	ad 87       	std	Y+13, r26	; 0x0d
    255a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    255c:	6b 85       	ldd	r22, Y+11	; 0x0b
    255e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2560:	8d 85       	ldd	r24, Y+13	; 0x0d
    2562:	9e 85       	ldd	r25, Y+14	; 0x0e
    2564:	20 e0       	ldi	r18, 0x00	; 0
    2566:	30 e0       	ldi	r19, 0x00	; 0
    2568:	4a e7       	ldi	r20, 0x7A	; 122
    256a:	55 e4       	ldi	r21, 0x45	; 69
    256c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2570:	dc 01       	movw	r26, r24
    2572:	cb 01       	movw	r24, r22
    2574:	8f 83       	std	Y+7, r24	; 0x07
    2576:	98 87       	std	Y+8, r25	; 0x08
    2578:	a9 87       	std	Y+9, r26	; 0x09
    257a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    257c:	6f 81       	ldd	r22, Y+7	; 0x07
    257e:	78 85       	ldd	r23, Y+8	; 0x08
    2580:	89 85       	ldd	r24, Y+9	; 0x09
    2582:	9a 85       	ldd	r25, Y+10	; 0x0a
    2584:	20 e0       	ldi	r18, 0x00	; 0
    2586:	30 e0       	ldi	r19, 0x00	; 0
    2588:	40 e8       	ldi	r20, 0x80	; 128
    258a:	5f e3       	ldi	r21, 0x3F	; 63
    258c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2590:	88 23       	and	r24, r24
    2592:	2c f4       	brge	.+10     	; 0x259e <LCD_init+0x6b0>
		__ticks = 1;
    2594:	81 e0       	ldi	r24, 0x01	; 1
    2596:	90 e0       	ldi	r25, 0x00	; 0
    2598:	9e 83       	std	Y+6, r25	; 0x06
    259a:	8d 83       	std	Y+5, r24	; 0x05
    259c:	3f c0       	rjmp	.+126    	; 0x261c <LCD_init+0x72e>
	else if (__tmp > 65535)
    259e:	6f 81       	ldd	r22, Y+7	; 0x07
    25a0:	78 85       	ldd	r23, Y+8	; 0x08
    25a2:	89 85       	ldd	r24, Y+9	; 0x09
    25a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    25a6:	20 e0       	ldi	r18, 0x00	; 0
    25a8:	3f ef       	ldi	r19, 0xFF	; 255
    25aa:	4f e7       	ldi	r20, 0x7F	; 127
    25ac:	57 e4       	ldi	r21, 0x47	; 71
    25ae:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    25b2:	18 16       	cp	r1, r24
    25b4:	4c f5       	brge	.+82     	; 0x2608 <LCD_init+0x71a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25b6:	6b 85       	ldd	r22, Y+11	; 0x0b
    25b8:	7c 85       	ldd	r23, Y+12	; 0x0c
    25ba:	8d 85       	ldd	r24, Y+13	; 0x0d
    25bc:	9e 85       	ldd	r25, Y+14	; 0x0e
    25be:	20 e0       	ldi	r18, 0x00	; 0
    25c0:	30 e0       	ldi	r19, 0x00	; 0
    25c2:	40 e2       	ldi	r20, 0x20	; 32
    25c4:	51 e4       	ldi	r21, 0x41	; 65
    25c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25ca:	dc 01       	movw	r26, r24
    25cc:	cb 01       	movw	r24, r22
    25ce:	bc 01       	movw	r22, r24
    25d0:	cd 01       	movw	r24, r26
    25d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25d6:	dc 01       	movw	r26, r24
    25d8:	cb 01       	movw	r24, r22
    25da:	9e 83       	std	Y+6, r25	; 0x06
    25dc:	8d 83       	std	Y+5, r24	; 0x05
    25de:	0f c0       	rjmp	.+30     	; 0x25fe <LCD_init+0x710>
    25e0:	80 e9       	ldi	r24, 0x90	; 144
    25e2:	91 e0       	ldi	r25, 0x01	; 1
    25e4:	9c 83       	std	Y+4, r25	; 0x04
    25e6:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    25e8:	8b 81       	ldd	r24, Y+3	; 0x03
    25ea:	9c 81       	ldd	r25, Y+4	; 0x04
    25ec:	01 97       	sbiw	r24, 0x01	; 1
    25ee:	f1 f7       	brne	.-4      	; 0x25ec <LCD_init+0x6fe>
    25f0:	9c 83       	std	Y+4, r25	; 0x04
    25f2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25f4:	8d 81       	ldd	r24, Y+5	; 0x05
    25f6:	9e 81       	ldd	r25, Y+6	; 0x06
    25f8:	01 97       	sbiw	r24, 0x01	; 1
    25fa:	9e 83       	std	Y+6, r25	; 0x06
    25fc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25fe:	8d 81       	ldd	r24, Y+5	; 0x05
    2600:	9e 81       	ldd	r25, Y+6	; 0x06
    2602:	00 97       	sbiw	r24, 0x00	; 0
    2604:	69 f7       	brne	.-38     	; 0x25e0 <LCD_init+0x6f2>
    2606:	14 c0       	rjmp	.+40     	; 0x2630 <LCD_init+0x742>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2608:	6f 81       	ldd	r22, Y+7	; 0x07
    260a:	78 85       	ldd	r23, Y+8	; 0x08
    260c:	89 85       	ldd	r24, Y+9	; 0x09
    260e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2610:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2614:	dc 01       	movw	r26, r24
    2616:	cb 01       	movw	r24, r22
    2618:	9e 83       	std	Y+6, r25	; 0x06
    261a:	8d 83       	std	Y+5, r24	; 0x05
    261c:	8d 81       	ldd	r24, Y+5	; 0x05
    261e:	9e 81       	ldd	r25, Y+6	; 0x06
    2620:	9a 83       	std	Y+2, r25	; 0x02
    2622:	89 83       	std	Y+1, r24	; 0x01
    2624:	89 81       	ldd	r24, Y+1	; 0x01
    2626:	9a 81       	ldd	r25, Y+2	; 0x02
    2628:	01 97       	sbiw	r24, 0x01	; 1
    262a:	f1 f7       	brne	.-4      	; 0x2628 <LCD_init+0x73a>
    262c:	9a 83       	std	Y+2, r25	; 0x02
    262e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);

	// Entry Mode(IncrementOn, ShiftOff)
	LCD_sendCmnd(0b00000110);
    2630:	86 e0       	ldi	r24, 0x06	; 6
    2632:	0e 94 27 13 	call	0x264e	; 0x264e <LCD_sendCmnd>
}
    2636:	c6 5a       	subi	r28, 0xA6	; 166
    2638:	df 4f       	sbci	r29, 0xFF	; 255
    263a:	0f b6       	in	r0, 0x3f	; 63
    263c:	f8 94       	cli
    263e:	de bf       	out	0x3e, r29	; 62
    2640:	0f be       	out	0x3f, r0	; 63
    2642:	cd bf       	out	0x3d, r28	; 61
    2644:	cf 91       	pop	r28
    2646:	df 91       	pop	r29
    2648:	1f 91       	pop	r17
    264a:	0f 91       	pop	r16
    264c:	08 95       	ret

0000264e <LCD_sendCmnd>:


void LCD_sendCmnd(u8 cmnd)
{
    264e:	df 93       	push	r29
    2650:	cf 93       	push	r28
    2652:	cd b7       	in	r28, 0x3d	; 61
    2654:	de b7       	in	r29, 0x3e	; 62
    2656:	6d 97       	sbiw	r28, 0x1d	; 29
    2658:	0f b6       	in	r0, 0x3f	; 63
    265a:	f8 94       	cli
    265c:	de bf       	out	0x3e, r29	; 62
    265e:	0f be       	out	0x3f, r0	; 63
    2660:	cd bf       	out	0x3d, r28	; 61
    2662:	8d 8f       	std	Y+29, r24	; 0x1d
	// set Rs pin = 0 (write command)
	DIO_setPinValue(LCD_RS_PORT, LCD_RS_PIN, DIO_PIN_LOW);
    2664:	81 e0       	ldi	r24, 0x01	; 1
    2666:	61 e0       	ldi	r22, 0x01	; 1
    2668:	40 e0       	ldi	r20, 0x00	; 0
    266a:	0e 94 9a 0c 	call	0x1934	; 0x1934 <DIO_setPinValue>

	// set Rw pin = 0 (write)
	DIO_setPinValue(LCD_RW_PORT, LCD_RW_PIN, DIO_PIN_LOW);
    266e:	81 e0       	ldi	r24, 0x01	; 1
    2670:	62 e0       	ldi	r22, 0x02	; 2
    2672:	40 e0       	ldi	r20, 0x00	; 0
    2674:	0e 94 9a 0c 	call	0x1934	; 0x1934 <DIO_setPinValue>

	// Write The Most 4 bits Of command on Data Pins
	private_writeHalfPort(cmnd>>4);
    2678:	8d 8d       	ldd	r24, Y+29	; 0x1d
    267a:	82 95       	swap	r24
    267c:	8f 70       	andi	r24, 0x0F	; 15
    267e:	0e 94 63 15 	call	0x2ac6	; 0x2ac6 <private_writeHalfPort>

	/* Enable Pulse *//* H => L */
	DIO_setPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_HIGH);
    2682:	81 e0       	ldi	r24, 0x01	; 1
    2684:	63 e0       	ldi	r22, 0x03	; 3
    2686:	41 e0       	ldi	r20, 0x01	; 1
    2688:	0e 94 9a 0c 	call	0x1934	; 0x1934 <DIO_setPinValue>
    268c:	80 e0       	ldi	r24, 0x00	; 0
    268e:	90 e0       	ldi	r25, 0x00	; 0
    2690:	a0 e8       	ldi	r26, 0x80	; 128
    2692:	bf e3       	ldi	r27, 0x3F	; 63
    2694:	89 8f       	std	Y+25, r24	; 0x19
    2696:	9a 8f       	std	Y+26, r25	; 0x1a
    2698:	ab 8f       	std	Y+27, r26	; 0x1b
    269a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    269c:	69 8d       	ldd	r22, Y+25	; 0x19
    269e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    26a0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    26a2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    26a4:	20 e0       	ldi	r18, 0x00	; 0
    26a6:	30 e0       	ldi	r19, 0x00	; 0
    26a8:	4a e7       	ldi	r20, 0x7A	; 122
    26aa:	55 e4       	ldi	r21, 0x45	; 69
    26ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26b0:	dc 01       	movw	r26, r24
    26b2:	cb 01       	movw	r24, r22
    26b4:	8d 8b       	std	Y+21, r24	; 0x15
    26b6:	9e 8b       	std	Y+22, r25	; 0x16
    26b8:	af 8b       	std	Y+23, r26	; 0x17
    26ba:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    26bc:	6d 89       	ldd	r22, Y+21	; 0x15
    26be:	7e 89       	ldd	r23, Y+22	; 0x16
    26c0:	8f 89       	ldd	r24, Y+23	; 0x17
    26c2:	98 8d       	ldd	r25, Y+24	; 0x18
    26c4:	20 e0       	ldi	r18, 0x00	; 0
    26c6:	30 e0       	ldi	r19, 0x00	; 0
    26c8:	40 e8       	ldi	r20, 0x80	; 128
    26ca:	5f e3       	ldi	r21, 0x3F	; 63
    26cc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    26d0:	88 23       	and	r24, r24
    26d2:	2c f4       	brge	.+10     	; 0x26de <LCD_sendCmnd+0x90>
		__ticks = 1;
    26d4:	81 e0       	ldi	r24, 0x01	; 1
    26d6:	90 e0       	ldi	r25, 0x00	; 0
    26d8:	9c 8b       	std	Y+20, r25	; 0x14
    26da:	8b 8b       	std	Y+19, r24	; 0x13
    26dc:	3f c0       	rjmp	.+126    	; 0x275c <LCD_sendCmnd+0x10e>
	else if (__tmp > 65535)
    26de:	6d 89       	ldd	r22, Y+21	; 0x15
    26e0:	7e 89       	ldd	r23, Y+22	; 0x16
    26e2:	8f 89       	ldd	r24, Y+23	; 0x17
    26e4:	98 8d       	ldd	r25, Y+24	; 0x18
    26e6:	20 e0       	ldi	r18, 0x00	; 0
    26e8:	3f ef       	ldi	r19, 0xFF	; 255
    26ea:	4f e7       	ldi	r20, 0x7F	; 127
    26ec:	57 e4       	ldi	r21, 0x47	; 71
    26ee:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    26f2:	18 16       	cp	r1, r24
    26f4:	4c f5       	brge	.+82     	; 0x2748 <LCD_sendCmnd+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26f6:	69 8d       	ldd	r22, Y+25	; 0x19
    26f8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    26fa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    26fc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    26fe:	20 e0       	ldi	r18, 0x00	; 0
    2700:	30 e0       	ldi	r19, 0x00	; 0
    2702:	40 e2       	ldi	r20, 0x20	; 32
    2704:	51 e4       	ldi	r21, 0x41	; 65
    2706:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    270a:	dc 01       	movw	r26, r24
    270c:	cb 01       	movw	r24, r22
    270e:	bc 01       	movw	r22, r24
    2710:	cd 01       	movw	r24, r26
    2712:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2716:	dc 01       	movw	r26, r24
    2718:	cb 01       	movw	r24, r22
    271a:	9c 8b       	std	Y+20, r25	; 0x14
    271c:	8b 8b       	std	Y+19, r24	; 0x13
    271e:	0f c0       	rjmp	.+30     	; 0x273e <LCD_sendCmnd+0xf0>
    2720:	80 e9       	ldi	r24, 0x90	; 144
    2722:	91 e0       	ldi	r25, 0x01	; 1
    2724:	9a 8b       	std	Y+18, r25	; 0x12
    2726:	89 8b       	std	Y+17, r24	; 0x11
    2728:	89 89       	ldd	r24, Y+17	; 0x11
    272a:	9a 89       	ldd	r25, Y+18	; 0x12
    272c:	01 97       	sbiw	r24, 0x01	; 1
    272e:	f1 f7       	brne	.-4      	; 0x272c <LCD_sendCmnd+0xde>
    2730:	9a 8b       	std	Y+18, r25	; 0x12
    2732:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2734:	8b 89       	ldd	r24, Y+19	; 0x13
    2736:	9c 89       	ldd	r25, Y+20	; 0x14
    2738:	01 97       	sbiw	r24, 0x01	; 1
    273a:	9c 8b       	std	Y+20, r25	; 0x14
    273c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    273e:	8b 89       	ldd	r24, Y+19	; 0x13
    2740:	9c 89       	ldd	r25, Y+20	; 0x14
    2742:	00 97       	sbiw	r24, 0x00	; 0
    2744:	69 f7       	brne	.-38     	; 0x2720 <LCD_sendCmnd+0xd2>
    2746:	14 c0       	rjmp	.+40     	; 0x2770 <LCD_sendCmnd+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2748:	6d 89       	ldd	r22, Y+21	; 0x15
    274a:	7e 89       	ldd	r23, Y+22	; 0x16
    274c:	8f 89       	ldd	r24, Y+23	; 0x17
    274e:	98 8d       	ldd	r25, Y+24	; 0x18
    2750:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2754:	dc 01       	movw	r26, r24
    2756:	cb 01       	movw	r24, r22
    2758:	9c 8b       	std	Y+20, r25	; 0x14
    275a:	8b 8b       	std	Y+19, r24	; 0x13
    275c:	8b 89       	ldd	r24, Y+19	; 0x13
    275e:	9c 89       	ldd	r25, Y+20	; 0x14
    2760:	98 8b       	std	Y+16, r25	; 0x10
    2762:	8f 87       	std	Y+15, r24	; 0x0f
    2764:	8f 85       	ldd	r24, Y+15	; 0x0f
    2766:	98 89       	ldd	r25, Y+16	; 0x10
    2768:	01 97       	sbiw	r24, 0x01	; 1
    276a:	f1 f7       	brne	.-4      	; 0x2768 <LCD_sendCmnd+0x11a>
    276c:	98 8b       	std	Y+16, r25	; 0x10
    276e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_setPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_LOW);
    2770:	81 e0       	ldi	r24, 0x01	; 1
    2772:	63 e0       	ldi	r22, 0x03	; 3
    2774:	40 e0       	ldi	r20, 0x00	; 0
    2776:	0e 94 9a 0c 	call	0x1934	; 0x1934 <DIO_setPinValue>

	// Write The Least 4 bits Of command on Data Pins
	private_writeHalfPort(cmnd);
    277a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    277c:	0e 94 63 15 	call	0x2ac6	; 0x2ac6 <private_writeHalfPort>

	/* Enable Pulse *//* H => L */
	DIO_setPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_HIGH);
    2780:	81 e0       	ldi	r24, 0x01	; 1
    2782:	63 e0       	ldi	r22, 0x03	; 3
    2784:	41 e0       	ldi	r20, 0x01	; 1
    2786:	0e 94 9a 0c 	call	0x1934	; 0x1934 <DIO_setPinValue>
    278a:	80 e0       	ldi	r24, 0x00	; 0
    278c:	90 e0       	ldi	r25, 0x00	; 0
    278e:	a0 e8       	ldi	r26, 0x80	; 128
    2790:	bf e3       	ldi	r27, 0x3F	; 63
    2792:	8b 87       	std	Y+11, r24	; 0x0b
    2794:	9c 87       	std	Y+12, r25	; 0x0c
    2796:	ad 87       	std	Y+13, r26	; 0x0d
    2798:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    279a:	6b 85       	ldd	r22, Y+11	; 0x0b
    279c:	7c 85       	ldd	r23, Y+12	; 0x0c
    279e:	8d 85       	ldd	r24, Y+13	; 0x0d
    27a0:	9e 85       	ldd	r25, Y+14	; 0x0e
    27a2:	20 e0       	ldi	r18, 0x00	; 0
    27a4:	30 e0       	ldi	r19, 0x00	; 0
    27a6:	4a e7       	ldi	r20, 0x7A	; 122
    27a8:	55 e4       	ldi	r21, 0x45	; 69
    27aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27ae:	dc 01       	movw	r26, r24
    27b0:	cb 01       	movw	r24, r22
    27b2:	8f 83       	std	Y+7, r24	; 0x07
    27b4:	98 87       	std	Y+8, r25	; 0x08
    27b6:	a9 87       	std	Y+9, r26	; 0x09
    27b8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    27ba:	6f 81       	ldd	r22, Y+7	; 0x07
    27bc:	78 85       	ldd	r23, Y+8	; 0x08
    27be:	89 85       	ldd	r24, Y+9	; 0x09
    27c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    27c2:	20 e0       	ldi	r18, 0x00	; 0
    27c4:	30 e0       	ldi	r19, 0x00	; 0
    27c6:	40 e8       	ldi	r20, 0x80	; 128
    27c8:	5f e3       	ldi	r21, 0x3F	; 63
    27ca:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    27ce:	88 23       	and	r24, r24
    27d0:	2c f4       	brge	.+10     	; 0x27dc <LCD_sendCmnd+0x18e>
		__ticks = 1;
    27d2:	81 e0       	ldi	r24, 0x01	; 1
    27d4:	90 e0       	ldi	r25, 0x00	; 0
    27d6:	9e 83       	std	Y+6, r25	; 0x06
    27d8:	8d 83       	std	Y+5, r24	; 0x05
    27da:	3f c0       	rjmp	.+126    	; 0x285a <LCD_sendCmnd+0x20c>
	else if (__tmp > 65535)
    27dc:	6f 81       	ldd	r22, Y+7	; 0x07
    27de:	78 85       	ldd	r23, Y+8	; 0x08
    27e0:	89 85       	ldd	r24, Y+9	; 0x09
    27e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    27e4:	20 e0       	ldi	r18, 0x00	; 0
    27e6:	3f ef       	ldi	r19, 0xFF	; 255
    27e8:	4f e7       	ldi	r20, 0x7F	; 127
    27ea:	57 e4       	ldi	r21, 0x47	; 71
    27ec:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    27f0:	18 16       	cp	r1, r24
    27f2:	4c f5       	brge	.+82     	; 0x2846 <LCD_sendCmnd+0x1f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27f4:	6b 85       	ldd	r22, Y+11	; 0x0b
    27f6:	7c 85       	ldd	r23, Y+12	; 0x0c
    27f8:	8d 85       	ldd	r24, Y+13	; 0x0d
    27fa:	9e 85       	ldd	r25, Y+14	; 0x0e
    27fc:	20 e0       	ldi	r18, 0x00	; 0
    27fe:	30 e0       	ldi	r19, 0x00	; 0
    2800:	40 e2       	ldi	r20, 0x20	; 32
    2802:	51 e4       	ldi	r21, 0x41	; 65
    2804:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2808:	dc 01       	movw	r26, r24
    280a:	cb 01       	movw	r24, r22
    280c:	bc 01       	movw	r22, r24
    280e:	cd 01       	movw	r24, r26
    2810:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2814:	dc 01       	movw	r26, r24
    2816:	cb 01       	movw	r24, r22
    2818:	9e 83       	std	Y+6, r25	; 0x06
    281a:	8d 83       	std	Y+5, r24	; 0x05
    281c:	0f c0       	rjmp	.+30     	; 0x283c <LCD_sendCmnd+0x1ee>
    281e:	80 e9       	ldi	r24, 0x90	; 144
    2820:	91 e0       	ldi	r25, 0x01	; 1
    2822:	9c 83       	std	Y+4, r25	; 0x04
    2824:	8b 83       	std	Y+3, r24	; 0x03
    2826:	8b 81       	ldd	r24, Y+3	; 0x03
    2828:	9c 81       	ldd	r25, Y+4	; 0x04
    282a:	01 97       	sbiw	r24, 0x01	; 1
    282c:	f1 f7       	brne	.-4      	; 0x282a <LCD_sendCmnd+0x1dc>
    282e:	9c 83       	std	Y+4, r25	; 0x04
    2830:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2832:	8d 81       	ldd	r24, Y+5	; 0x05
    2834:	9e 81       	ldd	r25, Y+6	; 0x06
    2836:	01 97       	sbiw	r24, 0x01	; 1
    2838:	9e 83       	std	Y+6, r25	; 0x06
    283a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    283c:	8d 81       	ldd	r24, Y+5	; 0x05
    283e:	9e 81       	ldd	r25, Y+6	; 0x06
    2840:	00 97       	sbiw	r24, 0x00	; 0
    2842:	69 f7       	brne	.-38     	; 0x281e <LCD_sendCmnd+0x1d0>
    2844:	14 c0       	rjmp	.+40     	; 0x286e <LCD_sendCmnd+0x220>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2846:	6f 81       	ldd	r22, Y+7	; 0x07
    2848:	78 85       	ldd	r23, Y+8	; 0x08
    284a:	89 85       	ldd	r24, Y+9	; 0x09
    284c:	9a 85       	ldd	r25, Y+10	; 0x0a
    284e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2852:	dc 01       	movw	r26, r24
    2854:	cb 01       	movw	r24, r22
    2856:	9e 83       	std	Y+6, r25	; 0x06
    2858:	8d 83       	std	Y+5, r24	; 0x05
    285a:	8d 81       	ldd	r24, Y+5	; 0x05
    285c:	9e 81       	ldd	r25, Y+6	; 0x06
    285e:	9a 83       	std	Y+2, r25	; 0x02
    2860:	89 83       	std	Y+1, r24	; 0x01
    2862:	89 81       	ldd	r24, Y+1	; 0x01
    2864:	9a 81       	ldd	r25, Y+2	; 0x02
    2866:	01 97       	sbiw	r24, 0x01	; 1
    2868:	f1 f7       	brne	.-4      	; 0x2866 <LCD_sendCmnd+0x218>
    286a:	9a 83       	std	Y+2, r25	; 0x02
    286c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	DIO_setPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_LOW);
    286e:	81 e0       	ldi	r24, 0x01	; 1
    2870:	63 e0       	ldi	r22, 0x03	; 3
    2872:	40 e0       	ldi	r20, 0x00	; 0
    2874:	0e 94 9a 0c 	call	0x1934	; 0x1934 <DIO_setPinValue>
}
    2878:	6d 96       	adiw	r28, 0x1d	; 29
    287a:	0f b6       	in	r0, 0x3f	; 63
    287c:	f8 94       	cli
    287e:	de bf       	out	0x3e, r29	; 62
    2880:	0f be       	out	0x3f, r0	; 63
    2882:	cd bf       	out	0x3d, r28	; 61
    2884:	cf 91       	pop	r28
    2886:	df 91       	pop	r29
    2888:	08 95       	ret

0000288a <LCD_sendChar>:


void LCD_sendChar(u8 data)
{
    288a:	df 93       	push	r29
    288c:	cf 93       	push	r28
    288e:	cd b7       	in	r28, 0x3d	; 61
    2890:	de b7       	in	r29, 0x3e	; 62
    2892:	6d 97       	sbiw	r28, 0x1d	; 29
    2894:	0f b6       	in	r0, 0x3f	; 63
    2896:	f8 94       	cli
    2898:	de bf       	out	0x3e, r29	; 62
    289a:	0f be       	out	0x3f, r0	; 63
    289c:	cd bf       	out	0x3d, r28	; 61
    289e:	8d 8f       	std	Y+29, r24	; 0x1d
	// set Rs pin = 1 (write data)
	DIO_setPinValue(LCD_RS_PORT, LCD_RS_PIN, DIO_PIN_HIGH);
    28a0:	81 e0       	ldi	r24, 0x01	; 1
    28a2:	61 e0       	ldi	r22, 0x01	; 1
    28a4:	41 e0       	ldi	r20, 0x01	; 1
    28a6:	0e 94 9a 0c 	call	0x1934	; 0x1934 <DIO_setPinValue>

	// set Rw pin = 0 (write)
	DIO_setPinValue(LCD_RW_PORT, LCD_RW_PIN, DIO_PIN_LOW);
    28aa:	81 e0       	ldi	r24, 0x01	; 1
    28ac:	62 e0       	ldi	r22, 0x02	; 2
    28ae:	40 e0       	ldi	r20, 0x00	; 0
    28b0:	0e 94 9a 0c 	call	0x1934	; 0x1934 <DIO_setPinValue>

	// Write The Most 4 bits Of data on Data Pins
	private_writeHalfPort(data>>4);
    28b4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    28b6:	82 95       	swap	r24
    28b8:	8f 70       	andi	r24, 0x0F	; 15
    28ba:	0e 94 63 15 	call	0x2ac6	; 0x2ac6 <private_writeHalfPort>

	/* Enable Pulse *//* H => L */
	DIO_setPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_HIGH);
    28be:	81 e0       	ldi	r24, 0x01	; 1
    28c0:	63 e0       	ldi	r22, 0x03	; 3
    28c2:	41 e0       	ldi	r20, 0x01	; 1
    28c4:	0e 94 9a 0c 	call	0x1934	; 0x1934 <DIO_setPinValue>
    28c8:	80 e0       	ldi	r24, 0x00	; 0
    28ca:	90 e0       	ldi	r25, 0x00	; 0
    28cc:	a0 e8       	ldi	r26, 0x80	; 128
    28ce:	bf e3       	ldi	r27, 0x3F	; 63
    28d0:	89 8f       	std	Y+25, r24	; 0x19
    28d2:	9a 8f       	std	Y+26, r25	; 0x1a
    28d4:	ab 8f       	std	Y+27, r26	; 0x1b
    28d6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28d8:	69 8d       	ldd	r22, Y+25	; 0x19
    28da:	7a 8d       	ldd	r23, Y+26	; 0x1a
    28dc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    28de:	9c 8d       	ldd	r25, Y+28	; 0x1c
    28e0:	20 e0       	ldi	r18, 0x00	; 0
    28e2:	30 e0       	ldi	r19, 0x00	; 0
    28e4:	4a e7       	ldi	r20, 0x7A	; 122
    28e6:	55 e4       	ldi	r21, 0x45	; 69
    28e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28ec:	dc 01       	movw	r26, r24
    28ee:	cb 01       	movw	r24, r22
    28f0:	8d 8b       	std	Y+21, r24	; 0x15
    28f2:	9e 8b       	std	Y+22, r25	; 0x16
    28f4:	af 8b       	std	Y+23, r26	; 0x17
    28f6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    28f8:	6d 89       	ldd	r22, Y+21	; 0x15
    28fa:	7e 89       	ldd	r23, Y+22	; 0x16
    28fc:	8f 89       	ldd	r24, Y+23	; 0x17
    28fe:	98 8d       	ldd	r25, Y+24	; 0x18
    2900:	20 e0       	ldi	r18, 0x00	; 0
    2902:	30 e0       	ldi	r19, 0x00	; 0
    2904:	40 e8       	ldi	r20, 0x80	; 128
    2906:	5f e3       	ldi	r21, 0x3F	; 63
    2908:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    290c:	88 23       	and	r24, r24
    290e:	2c f4       	brge	.+10     	; 0x291a <LCD_sendChar+0x90>
		__ticks = 1;
    2910:	81 e0       	ldi	r24, 0x01	; 1
    2912:	90 e0       	ldi	r25, 0x00	; 0
    2914:	9c 8b       	std	Y+20, r25	; 0x14
    2916:	8b 8b       	std	Y+19, r24	; 0x13
    2918:	3f c0       	rjmp	.+126    	; 0x2998 <LCD_sendChar+0x10e>
	else if (__tmp > 65535)
    291a:	6d 89       	ldd	r22, Y+21	; 0x15
    291c:	7e 89       	ldd	r23, Y+22	; 0x16
    291e:	8f 89       	ldd	r24, Y+23	; 0x17
    2920:	98 8d       	ldd	r25, Y+24	; 0x18
    2922:	20 e0       	ldi	r18, 0x00	; 0
    2924:	3f ef       	ldi	r19, 0xFF	; 255
    2926:	4f e7       	ldi	r20, 0x7F	; 127
    2928:	57 e4       	ldi	r21, 0x47	; 71
    292a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    292e:	18 16       	cp	r1, r24
    2930:	4c f5       	brge	.+82     	; 0x2984 <LCD_sendChar+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2932:	69 8d       	ldd	r22, Y+25	; 0x19
    2934:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2936:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2938:	9c 8d       	ldd	r25, Y+28	; 0x1c
    293a:	20 e0       	ldi	r18, 0x00	; 0
    293c:	30 e0       	ldi	r19, 0x00	; 0
    293e:	40 e2       	ldi	r20, 0x20	; 32
    2940:	51 e4       	ldi	r21, 0x41	; 65
    2942:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2946:	dc 01       	movw	r26, r24
    2948:	cb 01       	movw	r24, r22
    294a:	bc 01       	movw	r22, r24
    294c:	cd 01       	movw	r24, r26
    294e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2952:	dc 01       	movw	r26, r24
    2954:	cb 01       	movw	r24, r22
    2956:	9c 8b       	std	Y+20, r25	; 0x14
    2958:	8b 8b       	std	Y+19, r24	; 0x13
    295a:	0f c0       	rjmp	.+30     	; 0x297a <LCD_sendChar+0xf0>
    295c:	80 e9       	ldi	r24, 0x90	; 144
    295e:	91 e0       	ldi	r25, 0x01	; 1
    2960:	9a 8b       	std	Y+18, r25	; 0x12
    2962:	89 8b       	std	Y+17, r24	; 0x11
    2964:	89 89       	ldd	r24, Y+17	; 0x11
    2966:	9a 89       	ldd	r25, Y+18	; 0x12
    2968:	01 97       	sbiw	r24, 0x01	; 1
    296a:	f1 f7       	brne	.-4      	; 0x2968 <LCD_sendChar+0xde>
    296c:	9a 8b       	std	Y+18, r25	; 0x12
    296e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2970:	8b 89       	ldd	r24, Y+19	; 0x13
    2972:	9c 89       	ldd	r25, Y+20	; 0x14
    2974:	01 97       	sbiw	r24, 0x01	; 1
    2976:	9c 8b       	std	Y+20, r25	; 0x14
    2978:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    297a:	8b 89       	ldd	r24, Y+19	; 0x13
    297c:	9c 89       	ldd	r25, Y+20	; 0x14
    297e:	00 97       	sbiw	r24, 0x00	; 0
    2980:	69 f7       	brne	.-38     	; 0x295c <LCD_sendChar+0xd2>
    2982:	14 c0       	rjmp	.+40     	; 0x29ac <LCD_sendChar+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2984:	6d 89       	ldd	r22, Y+21	; 0x15
    2986:	7e 89       	ldd	r23, Y+22	; 0x16
    2988:	8f 89       	ldd	r24, Y+23	; 0x17
    298a:	98 8d       	ldd	r25, Y+24	; 0x18
    298c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2990:	dc 01       	movw	r26, r24
    2992:	cb 01       	movw	r24, r22
    2994:	9c 8b       	std	Y+20, r25	; 0x14
    2996:	8b 8b       	std	Y+19, r24	; 0x13
    2998:	8b 89       	ldd	r24, Y+19	; 0x13
    299a:	9c 89       	ldd	r25, Y+20	; 0x14
    299c:	98 8b       	std	Y+16, r25	; 0x10
    299e:	8f 87       	std	Y+15, r24	; 0x0f
    29a0:	8f 85       	ldd	r24, Y+15	; 0x0f
    29a2:	98 89       	ldd	r25, Y+16	; 0x10
    29a4:	01 97       	sbiw	r24, 0x01	; 1
    29a6:	f1 f7       	brne	.-4      	; 0x29a4 <LCD_sendChar+0x11a>
    29a8:	98 8b       	std	Y+16, r25	; 0x10
    29aa:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_setPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_LOW);
    29ac:	81 e0       	ldi	r24, 0x01	; 1
    29ae:	63 e0       	ldi	r22, 0x03	; 3
    29b0:	40 e0       	ldi	r20, 0x00	; 0
    29b2:	0e 94 9a 0c 	call	0x1934	; 0x1934 <DIO_setPinValue>

	// Write The Least 4 bits Of data on Data Pins
	private_writeHalfPort(data);
    29b6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    29b8:	0e 94 63 15 	call	0x2ac6	; 0x2ac6 <private_writeHalfPort>

	/* Enable Pulse *//* H => L */
	DIO_setPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_HIGH);
    29bc:	81 e0       	ldi	r24, 0x01	; 1
    29be:	63 e0       	ldi	r22, 0x03	; 3
    29c0:	41 e0       	ldi	r20, 0x01	; 1
    29c2:	0e 94 9a 0c 	call	0x1934	; 0x1934 <DIO_setPinValue>
    29c6:	80 e0       	ldi	r24, 0x00	; 0
    29c8:	90 e0       	ldi	r25, 0x00	; 0
    29ca:	a0 e8       	ldi	r26, 0x80	; 128
    29cc:	bf e3       	ldi	r27, 0x3F	; 63
    29ce:	8b 87       	std	Y+11, r24	; 0x0b
    29d0:	9c 87       	std	Y+12, r25	; 0x0c
    29d2:	ad 87       	std	Y+13, r26	; 0x0d
    29d4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29d6:	6b 85       	ldd	r22, Y+11	; 0x0b
    29d8:	7c 85       	ldd	r23, Y+12	; 0x0c
    29da:	8d 85       	ldd	r24, Y+13	; 0x0d
    29dc:	9e 85       	ldd	r25, Y+14	; 0x0e
    29de:	20 e0       	ldi	r18, 0x00	; 0
    29e0:	30 e0       	ldi	r19, 0x00	; 0
    29e2:	4a e7       	ldi	r20, 0x7A	; 122
    29e4:	55 e4       	ldi	r21, 0x45	; 69
    29e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29ea:	dc 01       	movw	r26, r24
    29ec:	cb 01       	movw	r24, r22
    29ee:	8f 83       	std	Y+7, r24	; 0x07
    29f0:	98 87       	std	Y+8, r25	; 0x08
    29f2:	a9 87       	std	Y+9, r26	; 0x09
    29f4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    29f6:	6f 81       	ldd	r22, Y+7	; 0x07
    29f8:	78 85       	ldd	r23, Y+8	; 0x08
    29fa:	89 85       	ldd	r24, Y+9	; 0x09
    29fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    29fe:	20 e0       	ldi	r18, 0x00	; 0
    2a00:	30 e0       	ldi	r19, 0x00	; 0
    2a02:	40 e8       	ldi	r20, 0x80	; 128
    2a04:	5f e3       	ldi	r21, 0x3F	; 63
    2a06:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2a0a:	88 23       	and	r24, r24
    2a0c:	2c f4       	brge	.+10     	; 0x2a18 <LCD_sendChar+0x18e>
		__ticks = 1;
    2a0e:	81 e0       	ldi	r24, 0x01	; 1
    2a10:	90 e0       	ldi	r25, 0x00	; 0
    2a12:	9e 83       	std	Y+6, r25	; 0x06
    2a14:	8d 83       	std	Y+5, r24	; 0x05
    2a16:	3f c0       	rjmp	.+126    	; 0x2a96 <LCD_sendChar+0x20c>
	else if (__tmp > 65535)
    2a18:	6f 81       	ldd	r22, Y+7	; 0x07
    2a1a:	78 85       	ldd	r23, Y+8	; 0x08
    2a1c:	89 85       	ldd	r24, Y+9	; 0x09
    2a1e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a20:	20 e0       	ldi	r18, 0x00	; 0
    2a22:	3f ef       	ldi	r19, 0xFF	; 255
    2a24:	4f e7       	ldi	r20, 0x7F	; 127
    2a26:	57 e4       	ldi	r21, 0x47	; 71
    2a28:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2a2c:	18 16       	cp	r1, r24
    2a2e:	4c f5       	brge	.+82     	; 0x2a82 <LCD_sendChar+0x1f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a30:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a32:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a34:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a36:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a38:	20 e0       	ldi	r18, 0x00	; 0
    2a3a:	30 e0       	ldi	r19, 0x00	; 0
    2a3c:	40 e2       	ldi	r20, 0x20	; 32
    2a3e:	51 e4       	ldi	r21, 0x41	; 65
    2a40:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a44:	dc 01       	movw	r26, r24
    2a46:	cb 01       	movw	r24, r22
    2a48:	bc 01       	movw	r22, r24
    2a4a:	cd 01       	movw	r24, r26
    2a4c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a50:	dc 01       	movw	r26, r24
    2a52:	cb 01       	movw	r24, r22
    2a54:	9e 83       	std	Y+6, r25	; 0x06
    2a56:	8d 83       	std	Y+5, r24	; 0x05
    2a58:	0f c0       	rjmp	.+30     	; 0x2a78 <LCD_sendChar+0x1ee>
    2a5a:	80 e9       	ldi	r24, 0x90	; 144
    2a5c:	91 e0       	ldi	r25, 0x01	; 1
    2a5e:	9c 83       	std	Y+4, r25	; 0x04
    2a60:	8b 83       	std	Y+3, r24	; 0x03
    2a62:	8b 81       	ldd	r24, Y+3	; 0x03
    2a64:	9c 81       	ldd	r25, Y+4	; 0x04
    2a66:	01 97       	sbiw	r24, 0x01	; 1
    2a68:	f1 f7       	brne	.-4      	; 0x2a66 <LCD_sendChar+0x1dc>
    2a6a:	9c 83       	std	Y+4, r25	; 0x04
    2a6c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a6e:	8d 81       	ldd	r24, Y+5	; 0x05
    2a70:	9e 81       	ldd	r25, Y+6	; 0x06
    2a72:	01 97       	sbiw	r24, 0x01	; 1
    2a74:	9e 83       	std	Y+6, r25	; 0x06
    2a76:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a78:	8d 81       	ldd	r24, Y+5	; 0x05
    2a7a:	9e 81       	ldd	r25, Y+6	; 0x06
    2a7c:	00 97       	sbiw	r24, 0x00	; 0
    2a7e:	69 f7       	brne	.-38     	; 0x2a5a <LCD_sendChar+0x1d0>
    2a80:	14 c0       	rjmp	.+40     	; 0x2aaa <LCD_sendChar+0x220>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a82:	6f 81       	ldd	r22, Y+7	; 0x07
    2a84:	78 85       	ldd	r23, Y+8	; 0x08
    2a86:	89 85       	ldd	r24, Y+9	; 0x09
    2a88:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a8a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a8e:	dc 01       	movw	r26, r24
    2a90:	cb 01       	movw	r24, r22
    2a92:	9e 83       	std	Y+6, r25	; 0x06
    2a94:	8d 83       	std	Y+5, r24	; 0x05
    2a96:	8d 81       	ldd	r24, Y+5	; 0x05
    2a98:	9e 81       	ldd	r25, Y+6	; 0x06
    2a9a:	9a 83       	std	Y+2, r25	; 0x02
    2a9c:	89 83       	std	Y+1, r24	; 0x01
    2a9e:	89 81       	ldd	r24, Y+1	; 0x01
    2aa0:	9a 81       	ldd	r25, Y+2	; 0x02
    2aa2:	01 97       	sbiw	r24, 0x01	; 1
    2aa4:	f1 f7       	brne	.-4      	; 0x2aa2 <LCD_sendChar+0x218>
    2aa6:	9a 83       	std	Y+2, r25	; 0x02
    2aa8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	DIO_setPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_LOW);
    2aaa:	81 e0       	ldi	r24, 0x01	; 1
    2aac:	63 e0       	ldi	r22, 0x03	; 3
    2aae:	40 e0       	ldi	r20, 0x00	; 0
    2ab0:	0e 94 9a 0c 	call	0x1934	; 0x1934 <DIO_setPinValue>
}
    2ab4:	6d 96       	adiw	r28, 0x1d	; 29
    2ab6:	0f b6       	in	r0, 0x3f	; 63
    2ab8:	f8 94       	cli
    2aba:	de bf       	out	0x3e, r29	; 62
    2abc:	0f be       	out	0x3f, r0	; 63
    2abe:	cd bf       	out	0x3d, r28	; 61
    2ac0:	cf 91       	pop	r28
    2ac2:	df 91       	pop	r29
    2ac4:	08 95       	ret

00002ac6 <private_writeHalfPort>:




static void private_writeHalfPort(u8 value)
{
    2ac6:	df 93       	push	r29
    2ac8:	cf 93       	push	r28
    2aca:	0f 92       	push	r0
    2acc:	cd b7       	in	r28, 0x3d	; 61
    2ace:	de b7       	in	r29, 0x3e	; 62
    2ad0:	89 83       	std	Y+1, r24	; 0x01
	DIO_setPinValue(LCD_D4_PORT,LCD_D4_PIN,GET_BIT(value,0));
    2ad2:	89 81       	ldd	r24, Y+1	; 0x01
    2ad4:	98 2f       	mov	r25, r24
    2ad6:	91 70       	andi	r25, 0x01	; 1
    2ad8:	80 e0       	ldi	r24, 0x00	; 0
    2ada:	64 e0       	ldi	r22, 0x04	; 4
    2adc:	49 2f       	mov	r20, r25
    2ade:	0e 94 9a 0c 	call	0x1934	; 0x1934 <DIO_setPinValue>
	DIO_setPinValue(LCD_D5_PORT,LCD_D5_PIN,GET_BIT(value,1));
    2ae2:	89 81       	ldd	r24, Y+1	; 0x01
    2ae4:	86 95       	lsr	r24
    2ae6:	98 2f       	mov	r25, r24
    2ae8:	91 70       	andi	r25, 0x01	; 1
    2aea:	80 e0       	ldi	r24, 0x00	; 0
    2aec:	65 e0       	ldi	r22, 0x05	; 5
    2aee:	49 2f       	mov	r20, r25
    2af0:	0e 94 9a 0c 	call	0x1934	; 0x1934 <DIO_setPinValue>
	DIO_setPinValue(LCD_D6_PORT,LCD_D6_PIN,GET_BIT(value,2));
    2af4:	89 81       	ldd	r24, Y+1	; 0x01
    2af6:	86 95       	lsr	r24
    2af8:	86 95       	lsr	r24
    2afa:	98 2f       	mov	r25, r24
    2afc:	91 70       	andi	r25, 0x01	; 1
    2afe:	80 e0       	ldi	r24, 0x00	; 0
    2b00:	66 e0       	ldi	r22, 0x06	; 6
    2b02:	49 2f       	mov	r20, r25
    2b04:	0e 94 9a 0c 	call	0x1934	; 0x1934 <DIO_setPinValue>
	DIO_setPinValue(LCD_D7_PORT,LCD_D7_PIN,GET_BIT(value,3));
    2b08:	89 81       	ldd	r24, Y+1	; 0x01
    2b0a:	86 95       	lsr	r24
    2b0c:	86 95       	lsr	r24
    2b0e:	86 95       	lsr	r24
    2b10:	98 2f       	mov	r25, r24
    2b12:	91 70       	andi	r25, 0x01	; 1
    2b14:	80 e0       	ldi	r24, 0x00	; 0
    2b16:	67 e0       	ldi	r22, 0x07	; 7
    2b18:	49 2f       	mov	r20, r25
    2b1a:	0e 94 9a 0c 	call	0x1934	; 0x1934 <DIO_setPinValue>
}
    2b1e:	0f 90       	pop	r0
    2b20:	cf 91       	pop	r28
    2b22:	df 91       	pop	r29
    2b24:	08 95       	ret

00002b26 <LCD_writeString>:
the null terminator and increment
the counter by one while sending
the lcd charecter by charecter*/

void LCD_writeString(u8*string)
{
    2b26:	df 93       	push	r29
    2b28:	cf 93       	push	r28
    2b2a:	00 d0       	rcall	.+0      	; 0x2b2c <LCD_writeString+0x6>
    2b2c:	0f 92       	push	r0
    2b2e:	cd b7       	in	r28, 0x3d	; 61
    2b30:	de b7       	in	r29, 0x3e	; 62
    2b32:	9b 83       	std	Y+3, r25	; 0x03
    2b34:	8a 83       	std	Y+2, r24	; 0x02
	u8 counter =0;
    2b36:	19 82       	std	Y+1, r1	; 0x01
    2b38:	0e c0       	rjmp	.+28     	; 0x2b56 <LCD_writeString+0x30>
while(string[counter]!='\0')
{
LCD_sendChar(string[counter]);
    2b3a:	89 81       	ldd	r24, Y+1	; 0x01
    2b3c:	28 2f       	mov	r18, r24
    2b3e:	30 e0       	ldi	r19, 0x00	; 0
    2b40:	8a 81       	ldd	r24, Y+2	; 0x02
    2b42:	9b 81       	ldd	r25, Y+3	; 0x03
    2b44:	fc 01       	movw	r30, r24
    2b46:	e2 0f       	add	r30, r18
    2b48:	f3 1f       	adc	r31, r19
    2b4a:	80 81       	ld	r24, Z
    2b4c:	0e 94 45 14 	call	0x288a	; 0x288a <LCD_sendChar>
counter++;
    2b50:	89 81       	ldd	r24, Y+1	; 0x01
    2b52:	8f 5f       	subi	r24, 0xFF	; 255
    2b54:	89 83       	std	Y+1, r24	; 0x01
the lcd charecter by charecter*/

void LCD_writeString(u8*string)
{
	u8 counter =0;
while(string[counter]!='\0')
    2b56:	89 81       	ldd	r24, Y+1	; 0x01
    2b58:	28 2f       	mov	r18, r24
    2b5a:	30 e0       	ldi	r19, 0x00	; 0
    2b5c:	8a 81       	ldd	r24, Y+2	; 0x02
    2b5e:	9b 81       	ldd	r25, Y+3	; 0x03
    2b60:	fc 01       	movw	r30, r24
    2b62:	e2 0f       	add	r30, r18
    2b64:	f3 1f       	adc	r31, r19
    2b66:	80 81       	ld	r24, Z
    2b68:	88 23       	and	r24, r24
    2b6a:	39 f7       	brne	.-50     	; 0x2b3a <LCD_writeString+0x14>
counter++;
}



}
    2b6c:	0f 90       	pop	r0
    2b6e:	0f 90       	pop	r0
    2b70:	0f 90       	pop	r0
    2b72:	cf 91       	pop	r28
    2b74:	df 91       	pop	r29
    2b76:	08 95       	ret

00002b78 <LCD_clear>:

void LCD_clear(void)
{
    2b78:	df 93       	push	r29
    2b7a:	cf 93       	push	r28
    2b7c:	cd b7       	in	r28, 0x3d	; 61
    2b7e:	de b7       	in	r29, 0x3e	; 62
    2b80:	2e 97       	sbiw	r28, 0x0e	; 14
    2b82:	0f b6       	in	r0, 0x3f	; 63
    2b84:	f8 94       	cli
    2b86:	de bf       	out	0x3e, r29	; 62
    2b88:	0f be       	out	0x3f, r0	; 63
    2b8a:	cd bf       	out	0x3d, r28	; 61

  LCD_sendCmnd(0b00000001);
    2b8c:	81 e0       	ldi	r24, 0x01	; 1
    2b8e:	0e 94 27 13 	call	0x264e	; 0x264e <LCD_sendCmnd>
    2b92:	80 e0       	ldi	r24, 0x00	; 0
    2b94:	90 e0       	ldi	r25, 0x00	; 0
    2b96:	a0 e0       	ldi	r26, 0x00	; 0
    2b98:	b0 e4       	ldi	r27, 0x40	; 64
    2b9a:	8b 87       	std	Y+11, r24	; 0x0b
    2b9c:	9c 87       	std	Y+12, r25	; 0x0c
    2b9e:	ad 87       	std	Y+13, r26	; 0x0d
    2ba0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ba2:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ba4:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ba6:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ba8:	9e 85       	ldd	r25, Y+14	; 0x0e
    2baa:	20 e0       	ldi	r18, 0x00	; 0
    2bac:	30 e0       	ldi	r19, 0x00	; 0
    2bae:	4a e7       	ldi	r20, 0x7A	; 122
    2bb0:	55 e4       	ldi	r21, 0x45	; 69
    2bb2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bb6:	dc 01       	movw	r26, r24
    2bb8:	cb 01       	movw	r24, r22
    2bba:	8f 83       	std	Y+7, r24	; 0x07
    2bbc:	98 87       	std	Y+8, r25	; 0x08
    2bbe:	a9 87       	std	Y+9, r26	; 0x09
    2bc0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2bc2:	6f 81       	ldd	r22, Y+7	; 0x07
    2bc4:	78 85       	ldd	r23, Y+8	; 0x08
    2bc6:	89 85       	ldd	r24, Y+9	; 0x09
    2bc8:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bca:	20 e0       	ldi	r18, 0x00	; 0
    2bcc:	30 e0       	ldi	r19, 0x00	; 0
    2bce:	40 e8       	ldi	r20, 0x80	; 128
    2bd0:	5f e3       	ldi	r21, 0x3F	; 63
    2bd2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2bd6:	88 23       	and	r24, r24
    2bd8:	2c f4       	brge	.+10     	; 0x2be4 <LCD_clear+0x6c>
		__ticks = 1;
    2bda:	81 e0       	ldi	r24, 0x01	; 1
    2bdc:	90 e0       	ldi	r25, 0x00	; 0
    2bde:	9e 83       	std	Y+6, r25	; 0x06
    2be0:	8d 83       	std	Y+5, r24	; 0x05
    2be2:	3f c0       	rjmp	.+126    	; 0x2c62 <LCD_clear+0xea>
	else if (__tmp > 65535)
    2be4:	6f 81       	ldd	r22, Y+7	; 0x07
    2be6:	78 85       	ldd	r23, Y+8	; 0x08
    2be8:	89 85       	ldd	r24, Y+9	; 0x09
    2bea:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bec:	20 e0       	ldi	r18, 0x00	; 0
    2bee:	3f ef       	ldi	r19, 0xFF	; 255
    2bf0:	4f e7       	ldi	r20, 0x7F	; 127
    2bf2:	57 e4       	ldi	r21, 0x47	; 71
    2bf4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2bf8:	18 16       	cp	r1, r24
    2bfa:	4c f5       	brge	.+82     	; 0x2c4e <LCD_clear+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bfc:	6b 85       	ldd	r22, Y+11	; 0x0b
    2bfe:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c00:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c02:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c04:	20 e0       	ldi	r18, 0x00	; 0
    2c06:	30 e0       	ldi	r19, 0x00	; 0
    2c08:	40 e2       	ldi	r20, 0x20	; 32
    2c0a:	51 e4       	ldi	r21, 0x41	; 65
    2c0c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c10:	dc 01       	movw	r26, r24
    2c12:	cb 01       	movw	r24, r22
    2c14:	bc 01       	movw	r22, r24
    2c16:	cd 01       	movw	r24, r26
    2c18:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c1c:	dc 01       	movw	r26, r24
    2c1e:	cb 01       	movw	r24, r22
    2c20:	9e 83       	std	Y+6, r25	; 0x06
    2c22:	8d 83       	std	Y+5, r24	; 0x05
    2c24:	0f c0       	rjmp	.+30     	; 0x2c44 <LCD_clear+0xcc>
    2c26:	80 e9       	ldi	r24, 0x90	; 144
    2c28:	91 e0       	ldi	r25, 0x01	; 1
    2c2a:	9c 83       	std	Y+4, r25	; 0x04
    2c2c:	8b 83       	std	Y+3, r24	; 0x03
    2c2e:	8b 81       	ldd	r24, Y+3	; 0x03
    2c30:	9c 81       	ldd	r25, Y+4	; 0x04
    2c32:	01 97       	sbiw	r24, 0x01	; 1
    2c34:	f1 f7       	brne	.-4      	; 0x2c32 <LCD_clear+0xba>
    2c36:	9c 83       	std	Y+4, r25	; 0x04
    2c38:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c3a:	8d 81       	ldd	r24, Y+5	; 0x05
    2c3c:	9e 81       	ldd	r25, Y+6	; 0x06
    2c3e:	01 97       	sbiw	r24, 0x01	; 1
    2c40:	9e 83       	std	Y+6, r25	; 0x06
    2c42:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c44:	8d 81       	ldd	r24, Y+5	; 0x05
    2c46:	9e 81       	ldd	r25, Y+6	; 0x06
    2c48:	00 97       	sbiw	r24, 0x00	; 0
    2c4a:	69 f7       	brne	.-38     	; 0x2c26 <LCD_clear+0xae>
    2c4c:	14 c0       	rjmp	.+40     	; 0x2c76 <LCD_clear+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c4e:	6f 81       	ldd	r22, Y+7	; 0x07
    2c50:	78 85       	ldd	r23, Y+8	; 0x08
    2c52:	89 85       	ldd	r24, Y+9	; 0x09
    2c54:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c56:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c5a:	dc 01       	movw	r26, r24
    2c5c:	cb 01       	movw	r24, r22
    2c5e:	9e 83       	std	Y+6, r25	; 0x06
    2c60:	8d 83       	std	Y+5, r24	; 0x05
    2c62:	8d 81       	ldd	r24, Y+5	; 0x05
    2c64:	9e 81       	ldd	r25, Y+6	; 0x06
    2c66:	9a 83       	std	Y+2, r25	; 0x02
    2c68:	89 83       	std	Y+1, r24	; 0x01
    2c6a:	89 81       	ldd	r24, Y+1	; 0x01
    2c6c:	9a 81       	ldd	r25, Y+2	; 0x02
    2c6e:	01 97       	sbiw	r24, 0x01	; 1
    2c70:	f1 f7       	brne	.-4      	; 0x2c6e <LCD_clear+0xf6>
    2c72:	9a 83       	std	Y+2, r25	; 0x02
    2c74:	89 83       	std	Y+1, r24	; 0x01
  _delay_ms(2);
}
    2c76:	2e 96       	adiw	r28, 0x0e	; 14
    2c78:	0f b6       	in	r0, 0x3f	; 63
    2c7a:	f8 94       	cli
    2c7c:	de bf       	out	0x3e, r29	; 62
    2c7e:	0f be       	out	0x3f, r0	; 63
    2c80:	cd bf       	out	0x3d, r28	; 61
    2c82:	cf 91       	pop	r28
    2c84:	df 91       	pop	r29
    2c86:	08 95       	ret

00002c88 <LCD_moveCursor>:
void LCD_moveCursor(u8 line,u8 position)
{
    2c88:	0f 93       	push	r16
    2c8a:	1f 93       	push	r17
    2c8c:	df 93       	push	r29
    2c8e:	cf 93       	push	r28
    2c90:	cd b7       	in	r28, 0x3d	; 61
    2c92:	de b7       	in	r29, 0x3e	; 62
    2c94:	cd 54       	subi	r28, 0x4D	; 77
    2c96:	d0 40       	sbci	r29, 0x00	; 0
    2c98:	0f b6       	in	r0, 0x3f	; 63
    2c9a:	f8 94       	cli
    2c9c:	de bf       	out	0x3e, r29	; 62
    2c9e:	0f be       	out	0x3f, r0	; 63
    2ca0:	cd bf       	out	0x3d, r28	; 61
    2ca2:	fe 01       	movw	r30, r28
    2ca4:	e4 5b       	subi	r30, 0xB4	; 180
    2ca6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ca8:	80 83       	st	Z, r24
    2caa:	fe 01       	movw	r30, r28
    2cac:	e3 5b       	subi	r30, 0xB3	; 179
    2cae:	ff 4f       	sbci	r31, 0xFF	; 255
    2cb0:	60 83       	st	Z, r22
	if(line==1)
    2cb2:	fe 01       	movw	r30, r28
    2cb4:	e4 5b       	subi	r30, 0xB4	; 180
    2cb6:	ff 4f       	sbci	r31, 0xFF	; 255
    2cb8:	80 81       	ld	r24, Z
    2cba:	81 30       	cpi	r24, 0x01	; 1
    2cbc:	09 f0       	breq	.+2      	; 0x2cc0 <LCD_moveCursor+0x38>
    2cbe:	f9 c0       	rjmp	.+498    	; 0x2eb2 <LCD_moveCursor+0x22a>
	{
		for(u8 i=0;i<position;i++)
    2cc0:	fe 01       	movw	r30, r28
    2cc2:	e5 5b       	subi	r30, 0xB5	; 181
    2cc4:	ff 4f       	sbci	r31, 0xFF	; 255
    2cc6:	10 82       	st	Z, r1
    2cc8:	e9 c0       	rjmp	.+466    	; 0x2e9c <LCD_moveCursor+0x214>
		{
			LCD_sendCmnd(0b00010100);
    2cca:	84 e1       	ldi	r24, 0x14	; 20
    2ccc:	0e 94 27 13 	call	0x264e	; 0x264e <LCD_sendCmnd>
    2cd0:	fe 01       	movw	r30, r28
    2cd2:	eb 5b       	subi	r30, 0xBB	; 187
    2cd4:	ff 4f       	sbci	r31, 0xFF	; 255
    2cd6:	80 e0       	ldi	r24, 0x00	; 0
    2cd8:	90 e0       	ldi	r25, 0x00	; 0
    2cda:	ac e1       	ldi	r26, 0x1C	; 28
    2cdc:	b2 e4       	ldi	r27, 0x42	; 66
    2cde:	80 83       	st	Z, r24
    2ce0:	91 83       	std	Z+1, r25	; 0x01
    2ce2:	a2 83       	std	Z+2, r26	; 0x02
    2ce4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2ce6:	8e 01       	movw	r16, r28
    2ce8:	0f 5b       	subi	r16, 0xBF	; 191
    2cea:	1f 4f       	sbci	r17, 0xFF	; 255
    2cec:	fe 01       	movw	r30, r28
    2cee:	eb 5b       	subi	r30, 0xBB	; 187
    2cf0:	ff 4f       	sbci	r31, 0xFF	; 255
    2cf2:	60 81       	ld	r22, Z
    2cf4:	71 81       	ldd	r23, Z+1	; 0x01
    2cf6:	82 81       	ldd	r24, Z+2	; 0x02
    2cf8:	93 81       	ldd	r25, Z+3	; 0x03
    2cfa:	2b ea       	ldi	r18, 0xAB	; 171
    2cfc:	3a ea       	ldi	r19, 0xAA	; 170
    2cfe:	4a ea       	ldi	r20, 0xAA	; 170
    2d00:	50 e4       	ldi	r21, 0x40	; 64
    2d02:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d06:	dc 01       	movw	r26, r24
    2d08:	cb 01       	movw	r24, r22
    2d0a:	f8 01       	movw	r30, r16
    2d0c:	80 83       	st	Z, r24
    2d0e:	91 83       	std	Z+1, r25	; 0x01
    2d10:	a2 83       	std	Z+2, r26	; 0x02
    2d12:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2d14:	fe 01       	movw	r30, r28
    2d16:	ef 5b       	subi	r30, 0xBF	; 191
    2d18:	ff 4f       	sbci	r31, 0xFF	; 255
    2d1a:	60 81       	ld	r22, Z
    2d1c:	71 81       	ldd	r23, Z+1	; 0x01
    2d1e:	82 81       	ldd	r24, Z+2	; 0x02
    2d20:	93 81       	ldd	r25, Z+3	; 0x03
    2d22:	20 e0       	ldi	r18, 0x00	; 0
    2d24:	30 e0       	ldi	r19, 0x00	; 0
    2d26:	40 e8       	ldi	r20, 0x80	; 128
    2d28:	5f e3       	ldi	r21, 0x3F	; 63
    2d2a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2d2e:	88 23       	and	r24, r24
    2d30:	34 f4       	brge	.+12     	; 0x2d3e <LCD_moveCursor+0xb6>
		__ticks = 1;
    2d32:	81 e0       	ldi	r24, 0x01	; 1
    2d34:	fe 01       	movw	r30, r28
    2d36:	e0 5c       	subi	r30, 0xC0	; 192
    2d38:	ff 4f       	sbci	r31, 0xFF	; 255
    2d3a:	80 83       	st	Z, r24
    2d3c:	9d c0       	rjmp	.+314    	; 0x2e78 <LCD_moveCursor+0x1f0>
	else if (__tmp > 255)
    2d3e:	fe 01       	movw	r30, r28
    2d40:	ef 5b       	subi	r30, 0xBF	; 191
    2d42:	ff 4f       	sbci	r31, 0xFF	; 255
    2d44:	60 81       	ld	r22, Z
    2d46:	71 81       	ldd	r23, Z+1	; 0x01
    2d48:	82 81       	ldd	r24, Z+2	; 0x02
    2d4a:	93 81       	ldd	r25, Z+3	; 0x03
    2d4c:	20 e0       	ldi	r18, 0x00	; 0
    2d4e:	30 e0       	ldi	r19, 0x00	; 0
    2d50:	4f e7       	ldi	r20, 0x7F	; 127
    2d52:	53 e4       	ldi	r21, 0x43	; 67
    2d54:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2d58:	18 16       	cp	r1, r24
    2d5a:	0c f0       	brlt	.+2      	; 0x2d5e <LCD_moveCursor+0xd6>
    2d5c:	7e c0       	rjmp	.+252    	; 0x2e5a <LCD_moveCursor+0x1d2>
	{
		_delay_ms(__us / 1000.0);
    2d5e:	fe 01       	movw	r30, r28
    2d60:	eb 5b       	subi	r30, 0xBB	; 187
    2d62:	ff 4f       	sbci	r31, 0xFF	; 255
    2d64:	60 81       	ld	r22, Z
    2d66:	71 81       	ldd	r23, Z+1	; 0x01
    2d68:	82 81       	ldd	r24, Z+2	; 0x02
    2d6a:	93 81       	ldd	r25, Z+3	; 0x03
    2d6c:	20 e0       	ldi	r18, 0x00	; 0
    2d6e:	30 e0       	ldi	r19, 0x00	; 0
    2d70:	4a e7       	ldi	r20, 0x7A	; 122
    2d72:	54 e4       	ldi	r21, 0x44	; 68
    2d74:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2d78:	dc 01       	movw	r26, r24
    2d7a:	cb 01       	movw	r24, r22
    2d7c:	8c af       	std	Y+60, r24	; 0x3c
    2d7e:	9d af       	std	Y+61, r25	; 0x3d
    2d80:	ae af       	std	Y+62, r26	; 0x3e
    2d82:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d84:	6c ad       	ldd	r22, Y+60	; 0x3c
    2d86:	7d ad       	ldd	r23, Y+61	; 0x3d
    2d88:	8e ad       	ldd	r24, Y+62	; 0x3e
    2d8a:	9f ad       	ldd	r25, Y+63	; 0x3f
    2d8c:	20 e0       	ldi	r18, 0x00	; 0
    2d8e:	30 e0       	ldi	r19, 0x00	; 0
    2d90:	4a e7       	ldi	r20, 0x7A	; 122
    2d92:	55 e4       	ldi	r21, 0x45	; 69
    2d94:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d98:	dc 01       	movw	r26, r24
    2d9a:	cb 01       	movw	r24, r22
    2d9c:	88 af       	std	Y+56, r24	; 0x38
    2d9e:	99 af       	std	Y+57, r25	; 0x39
    2da0:	aa af       	std	Y+58, r26	; 0x3a
    2da2:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    2da4:	68 ad       	ldd	r22, Y+56	; 0x38
    2da6:	79 ad       	ldd	r23, Y+57	; 0x39
    2da8:	8a ad       	ldd	r24, Y+58	; 0x3a
    2daa:	9b ad       	ldd	r25, Y+59	; 0x3b
    2dac:	20 e0       	ldi	r18, 0x00	; 0
    2dae:	30 e0       	ldi	r19, 0x00	; 0
    2db0:	40 e8       	ldi	r20, 0x80	; 128
    2db2:	5f e3       	ldi	r21, 0x3F	; 63
    2db4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2db8:	88 23       	and	r24, r24
    2dba:	2c f4       	brge	.+10     	; 0x2dc6 <LCD_moveCursor+0x13e>
		__ticks = 1;
    2dbc:	81 e0       	ldi	r24, 0x01	; 1
    2dbe:	90 e0       	ldi	r25, 0x00	; 0
    2dc0:	9f ab       	std	Y+55, r25	; 0x37
    2dc2:	8e ab       	std	Y+54, r24	; 0x36
    2dc4:	3f c0       	rjmp	.+126    	; 0x2e44 <LCD_moveCursor+0x1bc>
	else if (__tmp > 65535)
    2dc6:	68 ad       	ldd	r22, Y+56	; 0x38
    2dc8:	79 ad       	ldd	r23, Y+57	; 0x39
    2dca:	8a ad       	ldd	r24, Y+58	; 0x3a
    2dcc:	9b ad       	ldd	r25, Y+59	; 0x3b
    2dce:	20 e0       	ldi	r18, 0x00	; 0
    2dd0:	3f ef       	ldi	r19, 0xFF	; 255
    2dd2:	4f e7       	ldi	r20, 0x7F	; 127
    2dd4:	57 e4       	ldi	r21, 0x47	; 71
    2dd6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2dda:	18 16       	cp	r1, r24
    2ddc:	4c f5       	brge	.+82     	; 0x2e30 <LCD_moveCursor+0x1a8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2dde:	6c ad       	ldd	r22, Y+60	; 0x3c
    2de0:	7d ad       	ldd	r23, Y+61	; 0x3d
    2de2:	8e ad       	ldd	r24, Y+62	; 0x3e
    2de4:	9f ad       	ldd	r25, Y+63	; 0x3f
    2de6:	20 e0       	ldi	r18, 0x00	; 0
    2de8:	30 e0       	ldi	r19, 0x00	; 0
    2dea:	40 e2       	ldi	r20, 0x20	; 32
    2dec:	51 e4       	ldi	r21, 0x41	; 65
    2dee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2df2:	dc 01       	movw	r26, r24
    2df4:	cb 01       	movw	r24, r22
    2df6:	bc 01       	movw	r22, r24
    2df8:	cd 01       	movw	r24, r26
    2dfa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dfe:	dc 01       	movw	r26, r24
    2e00:	cb 01       	movw	r24, r22
    2e02:	9f ab       	std	Y+55, r25	; 0x37
    2e04:	8e ab       	std	Y+54, r24	; 0x36
    2e06:	0f c0       	rjmp	.+30     	; 0x2e26 <LCD_moveCursor+0x19e>
    2e08:	80 e9       	ldi	r24, 0x90	; 144
    2e0a:	91 e0       	ldi	r25, 0x01	; 1
    2e0c:	9d ab       	std	Y+53, r25	; 0x35
    2e0e:	8c ab       	std	Y+52, r24	; 0x34
    2e10:	8c a9       	ldd	r24, Y+52	; 0x34
    2e12:	9d a9       	ldd	r25, Y+53	; 0x35
    2e14:	01 97       	sbiw	r24, 0x01	; 1
    2e16:	f1 f7       	brne	.-4      	; 0x2e14 <LCD_moveCursor+0x18c>
    2e18:	9d ab       	std	Y+53, r25	; 0x35
    2e1a:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e1c:	8e a9       	ldd	r24, Y+54	; 0x36
    2e1e:	9f a9       	ldd	r25, Y+55	; 0x37
    2e20:	01 97       	sbiw	r24, 0x01	; 1
    2e22:	9f ab       	std	Y+55, r25	; 0x37
    2e24:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e26:	8e a9       	ldd	r24, Y+54	; 0x36
    2e28:	9f a9       	ldd	r25, Y+55	; 0x37
    2e2a:	00 97       	sbiw	r24, 0x00	; 0
    2e2c:	69 f7       	brne	.-38     	; 0x2e08 <LCD_moveCursor+0x180>
    2e2e:	2d c0       	rjmp	.+90     	; 0x2e8a <LCD_moveCursor+0x202>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e30:	68 ad       	ldd	r22, Y+56	; 0x38
    2e32:	79 ad       	ldd	r23, Y+57	; 0x39
    2e34:	8a ad       	ldd	r24, Y+58	; 0x3a
    2e36:	9b ad       	ldd	r25, Y+59	; 0x3b
    2e38:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e3c:	dc 01       	movw	r26, r24
    2e3e:	cb 01       	movw	r24, r22
    2e40:	9f ab       	std	Y+55, r25	; 0x37
    2e42:	8e ab       	std	Y+54, r24	; 0x36
    2e44:	8e a9       	ldd	r24, Y+54	; 0x36
    2e46:	9f a9       	ldd	r25, Y+55	; 0x37
    2e48:	9b ab       	std	Y+51, r25	; 0x33
    2e4a:	8a ab       	std	Y+50, r24	; 0x32
    2e4c:	8a a9       	ldd	r24, Y+50	; 0x32
    2e4e:	9b a9       	ldd	r25, Y+51	; 0x33
    2e50:	01 97       	sbiw	r24, 0x01	; 1
    2e52:	f1 f7       	brne	.-4      	; 0x2e50 <LCD_moveCursor+0x1c8>
    2e54:	9b ab       	std	Y+51, r25	; 0x33
    2e56:	8a ab       	std	Y+50, r24	; 0x32
    2e58:	18 c0       	rjmp	.+48     	; 0x2e8a <LCD_moveCursor+0x202>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2e5a:	fe 01       	movw	r30, r28
    2e5c:	ef 5b       	subi	r30, 0xBF	; 191
    2e5e:	ff 4f       	sbci	r31, 0xFF	; 255
    2e60:	60 81       	ld	r22, Z
    2e62:	71 81       	ldd	r23, Z+1	; 0x01
    2e64:	82 81       	ldd	r24, Z+2	; 0x02
    2e66:	93 81       	ldd	r25, Z+3	; 0x03
    2e68:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e6c:	dc 01       	movw	r26, r24
    2e6e:	cb 01       	movw	r24, r22
    2e70:	fe 01       	movw	r30, r28
    2e72:	e0 5c       	subi	r30, 0xC0	; 192
    2e74:	ff 4f       	sbci	r31, 0xFF	; 255
    2e76:	80 83       	st	Z, r24
    2e78:	fe 01       	movw	r30, r28
    2e7a:	e0 5c       	subi	r30, 0xC0	; 192
    2e7c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e7e:	80 81       	ld	r24, Z
    2e80:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2e82:	89 a9       	ldd	r24, Y+49	; 0x31
    2e84:	8a 95       	dec	r24
    2e86:	f1 f7       	brne	.-4      	; 0x2e84 <LCD_moveCursor+0x1fc>
    2e88:	89 ab       	std	Y+49, r24	; 0x31
}
void LCD_moveCursor(u8 line,u8 position)
{
	if(line==1)
	{
		for(u8 i=0;i<position;i++)
    2e8a:	de 01       	movw	r26, r28
    2e8c:	a5 5b       	subi	r26, 0xB5	; 181
    2e8e:	bf 4f       	sbci	r27, 0xFF	; 255
    2e90:	fe 01       	movw	r30, r28
    2e92:	e5 5b       	subi	r30, 0xB5	; 181
    2e94:	ff 4f       	sbci	r31, 0xFF	; 255
    2e96:	80 81       	ld	r24, Z
    2e98:	8f 5f       	subi	r24, 0xFF	; 255
    2e9a:	8c 93       	st	X, r24
    2e9c:	fe 01       	movw	r30, r28
    2e9e:	e5 5b       	subi	r30, 0xB5	; 181
    2ea0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ea2:	de 01       	movw	r26, r28
    2ea4:	a3 5b       	subi	r26, 0xB3	; 179
    2ea6:	bf 4f       	sbci	r27, 0xFF	; 255
    2ea8:	90 81       	ld	r25, Z
    2eaa:	8c 91       	ld	r24, X
    2eac:	98 17       	cp	r25, r24
    2eae:	08 f4       	brcc	.+2      	; 0x2eb2 <LCD_moveCursor+0x22a>
    2eb0:	0c cf       	rjmp	.-488    	; 0x2cca <LCD_moveCursor+0x42>
			LCD_sendCmnd(0b00010100);
			_delay_us(39);
		}

	}
if(line==2)
    2eb2:	fe 01       	movw	r30, r28
    2eb4:	e4 5b       	subi	r30, 0xB4	; 180
    2eb6:	ff 4f       	sbci	r31, 0xFF	; 255
    2eb8:	80 81       	ld	r24, Z
    2eba:	82 30       	cpi	r24, 0x02	; 2
    2ebc:	09 f0       	breq	.+2      	; 0x2ec0 <LCD_moveCursor+0x238>
    2ebe:	b0 c1       	rjmp	.+864    	; 0x3220 <LCD_moveCursor+0x598>
{
	for(u8 i=0;i<40;i++)
    2ec0:	fe 01       	movw	r30, r28
    2ec2:	e6 5b       	subi	r30, 0xB6	; 182
    2ec4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ec6:	10 82       	st	Z, r1
    2ec8:	ca c0       	rjmp	.+404    	; 0x305e <LCD_moveCursor+0x3d6>
			{
				LCD_sendCmnd(0b00010100);
    2eca:	84 e1       	ldi	r24, 0x14	; 20
    2ecc:	0e 94 27 13 	call	0x264e	; 0x264e <LCD_sendCmnd>
    2ed0:	80 e0       	ldi	r24, 0x00	; 0
    2ed2:	90 e0       	ldi	r25, 0x00	; 0
    2ed4:	ac e1       	ldi	r26, 0x1C	; 28
    2ed6:	b2 e4       	ldi	r27, 0x42	; 66
    2ed8:	8d a7       	std	Y+45, r24	; 0x2d
    2eda:	9e a7       	std	Y+46, r25	; 0x2e
    2edc:	af a7       	std	Y+47, r26	; 0x2f
    2ede:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2ee0:	6d a5       	ldd	r22, Y+45	; 0x2d
    2ee2:	7e a5       	ldd	r23, Y+46	; 0x2e
    2ee4:	8f a5       	ldd	r24, Y+47	; 0x2f
    2ee6:	98 a9       	ldd	r25, Y+48	; 0x30
    2ee8:	2b ea       	ldi	r18, 0xAB	; 171
    2eea:	3a ea       	ldi	r19, 0xAA	; 170
    2eec:	4a ea       	ldi	r20, 0xAA	; 170
    2eee:	50 e4       	ldi	r21, 0x40	; 64
    2ef0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ef4:	dc 01       	movw	r26, r24
    2ef6:	cb 01       	movw	r24, r22
    2ef8:	89 a7       	std	Y+41, r24	; 0x29
    2efa:	9a a7       	std	Y+42, r25	; 0x2a
    2efc:	ab a7       	std	Y+43, r26	; 0x2b
    2efe:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    2f00:	69 a5       	ldd	r22, Y+41	; 0x29
    2f02:	7a a5       	ldd	r23, Y+42	; 0x2a
    2f04:	8b a5       	ldd	r24, Y+43	; 0x2b
    2f06:	9c a5       	ldd	r25, Y+44	; 0x2c
    2f08:	20 e0       	ldi	r18, 0x00	; 0
    2f0a:	30 e0       	ldi	r19, 0x00	; 0
    2f0c:	40 e8       	ldi	r20, 0x80	; 128
    2f0e:	5f e3       	ldi	r21, 0x3F	; 63
    2f10:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2f14:	88 23       	and	r24, r24
    2f16:	1c f4       	brge	.+6      	; 0x2f1e <LCD_moveCursor+0x296>
		__ticks = 1;
    2f18:	81 e0       	ldi	r24, 0x01	; 1
    2f1a:	88 a7       	std	Y+40, r24	; 0x28
    2f1c:	91 c0       	rjmp	.+290    	; 0x3040 <LCD_moveCursor+0x3b8>
	else if (__tmp > 255)
    2f1e:	69 a5       	ldd	r22, Y+41	; 0x29
    2f20:	7a a5       	ldd	r23, Y+42	; 0x2a
    2f22:	8b a5       	ldd	r24, Y+43	; 0x2b
    2f24:	9c a5       	ldd	r25, Y+44	; 0x2c
    2f26:	20 e0       	ldi	r18, 0x00	; 0
    2f28:	30 e0       	ldi	r19, 0x00	; 0
    2f2a:	4f e7       	ldi	r20, 0x7F	; 127
    2f2c:	53 e4       	ldi	r21, 0x43	; 67
    2f2e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2f32:	18 16       	cp	r1, r24
    2f34:	0c f0       	brlt	.+2      	; 0x2f38 <LCD_moveCursor+0x2b0>
    2f36:	7b c0       	rjmp	.+246    	; 0x302e <LCD_moveCursor+0x3a6>
	{
		_delay_ms(__us / 1000.0);
    2f38:	6d a5       	ldd	r22, Y+45	; 0x2d
    2f3a:	7e a5       	ldd	r23, Y+46	; 0x2e
    2f3c:	8f a5       	ldd	r24, Y+47	; 0x2f
    2f3e:	98 a9       	ldd	r25, Y+48	; 0x30
    2f40:	20 e0       	ldi	r18, 0x00	; 0
    2f42:	30 e0       	ldi	r19, 0x00	; 0
    2f44:	4a e7       	ldi	r20, 0x7A	; 122
    2f46:	54 e4       	ldi	r21, 0x44	; 68
    2f48:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2f4c:	dc 01       	movw	r26, r24
    2f4e:	cb 01       	movw	r24, r22
    2f50:	8c a3       	std	Y+36, r24	; 0x24
    2f52:	9d a3       	std	Y+37, r25	; 0x25
    2f54:	ae a3       	std	Y+38, r26	; 0x26
    2f56:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f58:	6c a1       	ldd	r22, Y+36	; 0x24
    2f5a:	7d a1       	ldd	r23, Y+37	; 0x25
    2f5c:	8e a1       	ldd	r24, Y+38	; 0x26
    2f5e:	9f a1       	ldd	r25, Y+39	; 0x27
    2f60:	20 e0       	ldi	r18, 0x00	; 0
    2f62:	30 e0       	ldi	r19, 0x00	; 0
    2f64:	4a e7       	ldi	r20, 0x7A	; 122
    2f66:	55 e4       	ldi	r21, 0x45	; 69
    2f68:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f6c:	dc 01       	movw	r26, r24
    2f6e:	cb 01       	movw	r24, r22
    2f70:	88 a3       	std	Y+32, r24	; 0x20
    2f72:	99 a3       	std	Y+33, r25	; 0x21
    2f74:	aa a3       	std	Y+34, r26	; 0x22
    2f76:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    2f78:	68 a1       	ldd	r22, Y+32	; 0x20
    2f7a:	79 a1       	ldd	r23, Y+33	; 0x21
    2f7c:	8a a1       	ldd	r24, Y+34	; 0x22
    2f7e:	9b a1       	ldd	r25, Y+35	; 0x23
    2f80:	20 e0       	ldi	r18, 0x00	; 0
    2f82:	30 e0       	ldi	r19, 0x00	; 0
    2f84:	40 e8       	ldi	r20, 0x80	; 128
    2f86:	5f e3       	ldi	r21, 0x3F	; 63
    2f88:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2f8c:	88 23       	and	r24, r24
    2f8e:	2c f4       	brge	.+10     	; 0x2f9a <LCD_moveCursor+0x312>
		__ticks = 1;
    2f90:	81 e0       	ldi	r24, 0x01	; 1
    2f92:	90 e0       	ldi	r25, 0x00	; 0
    2f94:	9f 8f       	std	Y+31, r25	; 0x1f
    2f96:	8e 8f       	std	Y+30, r24	; 0x1e
    2f98:	3f c0       	rjmp	.+126    	; 0x3018 <LCD_moveCursor+0x390>
	else if (__tmp > 65535)
    2f9a:	68 a1       	ldd	r22, Y+32	; 0x20
    2f9c:	79 a1       	ldd	r23, Y+33	; 0x21
    2f9e:	8a a1       	ldd	r24, Y+34	; 0x22
    2fa0:	9b a1       	ldd	r25, Y+35	; 0x23
    2fa2:	20 e0       	ldi	r18, 0x00	; 0
    2fa4:	3f ef       	ldi	r19, 0xFF	; 255
    2fa6:	4f e7       	ldi	r20, 0x7F	; 127
    2fa8:	57 e4       	ldi	r21, 0x47	; 71
    2faa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2fae:	18 16       	cp	r1, r24
    2fb0:	4c f5       	brge	.+82     	; 0x3004 <LCD_moveCursor+0x37c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2fb2:	6c a1       	ldd	r22, Y+36	; 0x24
    2fb4:	7d a1       	ldd	r23, Y+37	; 0x25
    2fb6:	8e a1       	ldd	r24, Y+38	; 0x26
    2fb8:	9f a1       	ldd	r25, Y+39	; 0x27
    2fba:	20 e0       	ldi	r18, 0x00	; 0
    2fbc:	30 e0       	ldi	r19, 0x00	; 0
    2fbe:	40 e2       	ldi	r20, 0x20	; 32
    2fc0:	51 e4       	ldi	r21, 0x41	; 65
    2fc2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fc6:	dc 01       	movw	r26, r24
    2fc8:	cb 01       	movw	r24, r22
    2fca:	bc 01       	movw	r22, r24
    2fcc:	cd 01       	movw	r24, r26
    2fce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fd2:	dc 01       	movw	r26, r24
    2fd4:	cb 01       	movw	r24, r22
    2fd6:	9f 8f       	std	Y+31, r25	; 0x1f
    2fd8:	8e 8f       	std	Y+30, r24	; 0x1e
    2fda:	0f c0       	rjmp	.+30     	; 0x2ffa <LCD_moveCursor+0x372>
    2fdc:	80 e9       	ldi	r24, 0x90	; 144
    2fde:	91 e0       	ldi	r25, 0x01	; 1
    2fe0:	9d 8f       	std	Y+29, r25	; 0x1d
    2fe2:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2fe4:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2fe6:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2fe8:	01 97       	sbiw	r24, 0x01	; 1
    2fea:	f1 f7       	brne	.-4      	; 0x2fe8 <LCD_moveCursor+0x360>
    2fec:	9d 8f       	std	Y+29, r25	; 0x1d
    2fee:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ff0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2ff2:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2ff4:	01 97       	sbiw	r24, 0x01	; 1
    2ff6:	9f 8f       	std	Y+31, r25	; 0x1f
    2ff8:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ffa:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2ffc:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2ffe:	00 97       	sbiw	r24, 0x00	; 0
    3000:	69 f7       	brne	.-38     	; 0x2fdc <LCD_moveCursor+0x354>
    3002:	24 c0       	rjmp	.+72     	; 0x304c <LCD_moveCursor+0x3c4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3004:	68 a1       	ldd	r22, Y+32	; 0x20
    3006:	79 a1       	ldd	r23, Y+33	; 0x21
    3008:	8a a1       	ldd	r24, Y+34	; 0x22
    300a:	9b a1       	ldd	r25, Y+35	; 0x23
    300c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3010:	dc 01       	movw	r26, r24
    3012:	cb 01       	movw	r24, r22
    3014:	9f 8f       	std	Y+31, r25	; 0x1f
    3016:	8e 8f       	std	Y+30, r24	; 0x1e
    3018:	8e 8d       	ldd	r24, Y+30	; 0x1e
    301a:	9f 8d       	ldd	r25, Y+31	; 0x1f
    301c:	9b 8f       	std	Y+27, r25	; 0x1b
    301e:	8a 8f       	std	Y+26, r24	; 0x1a
    3020:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3022:	9b 8d       	ldd	r25, Y+27	; 0x1b
    3024:	01 97       	sbiw	r24, 0x01	; 1
    3026:	f1 f7       	brne	.-4      	; 0x3024 <LCD_moveCursor+0x39c>
    3028:	9b 8f       	std	Y+27, r25	; 0x1b
    302a:	8a 8f       	std	Y+26, r24	; 0x1a
    302c:	0f c0       	rjmp	.+30     	; 0x304c <LCD_moveCursor+0x3c4>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    302e:	69 a5       	ldd	r22, Y+41	; 0x29
    3030:	7a a5       	ldd	r23, Y+42	; 0x2a
    3032:	8b a5       	ldd	r24, Y+43	; 0x2b
    3034:	9c a5       	ldd	r25, Y+44	; 0x2c
    3036:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    303a:	dc 01       	movw	r26, r24
    303c:	cb 01       	movw	r24, r22
    303e:	88 a7       	std	Y+40, r24	; 0x28
    3040:	88 a5       	ldd	r24, Y+40	; 0x28
    3042:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3044:	89 8d       	ldd	r24, Y+25	; 0x19
    3046:	8a 95       	dec	r24
    3048:	f1 f7       	brne	.-4      	; 0x3046 <LCD_moveCursor+0x3be>
    304a:	89 8f       	std	Y+25, r24	; 0x19
		}

	}
if(line==2)
{
	for(u8 i=0;i<40;i++)
    304c:	de 01       	movw	r26, r28
    304e:	a6 5b       	subi	r26, 0xB6	; 182
    3050:	bf 4f       	sbci	r27, 0xFF	; 255
    3052:	fe 01       	movw	r30, r28
    3054:	e6 5b       	subi	r30, 0xB6	; 182
    3056:	ff 4f       	sbci	r31, 0xFF	; 255
    3058:	80 81       	ld	r24, Z
    305a:	8f 5f       	subi	r24, 0xFF	; 255
    305c:	8c 93       	st	X, r24
    305e:	fe 01       	movw	r30, r28
    3060:	e6 5b       	subi	r30, 0xB6	; 182
    3062:	ff 4f       	sbci	r31, 0xFF	; 255
    3064:	80 81       	ld	r24, Z
    3066:	88 32       	cpi	r24, 0x28	; 40
    3068:	08 f4       	brcc	.+2      	; 0x306c <LCD_moveCursor+0x3e4>
    306a:	2f cf       	rjmp	.-418    	; 0x2eca <LCD_moveCursor+0x242>
			{
				LCD_sendCmnd(0b00010100);
				_delay_us(39);
			}

	for(u8 i=0;i<position;i++)
    306c:	fe 01       	movw	r30, r28
    306e:	e7 5b       	subi	r30, 0xB7	; 183
    3070:	ff 4f       	sbci	r31, 0xFF	; 255
    3072:	10 82       	st	Z, r1
    3074:	ca c0       	rjmp	.+404    	; 0x320a <LCD_moveCursor+0x582>
			{
				LCD_sendCmnd(0b00010100);
    3076:	84 e1       	ldi	r24, 0x14	; 20
    3078:	0e 94 27 13 	call	0x264e	; 0x264e <LCD_sendCmnd>
    307c:	80 e0       	ldi	r24, 0x00	; 0
    307e:	90 e0       	ldi	r25, 0x00	; 0
    3080:	ac e1       	ldi	r26, 0x1C	; 28
    3082:	b2 e4       	ldi	r27, 0x42	; 66
    3084:	8d 8b       	std	Y+21, r24	; 0x15
    3086:	9e 8b       	std	Y+22, r25	; 0x16
    3088:	af 8b       	std	Y+23, r26	; 0x17
    308a:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    308c:	6d 89       	ldd	r22, Y+21	; 0x15
    308e:	7e 89       	ldd	r23, Y+22	; 0x16
    3090:	8f 89       	ldd	r24, Y+23	; 0x17
    3092:	98 8d       	ldd	r25, Y+24	; 0x18
    3094:	2b ea       	ldi	r18, 0xAB	; 171
    3096:	3a ea       	ldi	r19, 0xAA	; 170
    3098:	4a ea       	ldi	r20, 0xAA	; 170
    309a:	50 e4       	ldi	r21, 0x40	; 64
    309c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30a0:	dc 01       	movw	r26, r24
    30a2:	cb 01       	movw	r24, r22
    30a4:	89 8b       	std	Y+17, r24	; 0x11
    30a6:	9a 8b       	std	Y+18, r25	; 0x12
    30a8:	ab 8b       	std	Y+19, r26	; 0x13
    30aa:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    30ac:	69 89       	ldd	r22, Y+17	; 0x11
    30ae:	7a 89       	ldd	r23, Y+18	; 0x12
    30b0:	8b 89       	ldd	r24, Y+19	; 0x13
    30b2:	9c 89       	ldd	r25, Y+20	; 0x14
    30b4:	20 e0       	ldi	r18, 0x00	; 0
    30b6:	30 e0       	ldi	r19, 0x00	; 0
    30b8:	40 e8       	ldi	r20, 0x80	; 128
    30ba:	5f e3       	ldi	r21, 0x3F	; 63
    30bc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    30c0:	88 23       	and	r24, r24
    30c2:	1c f4       	brge	.+6      	; 0x30ca <LCD_moveCursor+0x442>
		__ticks = 1;
    30c4:	81 e0       	ldi	r24, 0x01	; 1
    30c6:	88 8b       	std	Y+16, r24	; 0x10
    30c8:	91 c0       	rjmp	.+290    	; 0x31ec <LCD_moveCursor+0x564>
	else if (__tmp > 255)
    30ca:	69 89       	ldd	r22, Y+17	; 0x11
    30cc:	7a 89       	ldd	r23, Y+18	; 0x12
    30ce:	8b 89       	ldd	r24, Y+19	; 0x13
    30d0:	9c 89       	ldd	r25, Y+20	; 0x14
    30d2:	20 e0       	ldi	r18, 0x00	; 0
    30d4:	30 e0       	ldi	r19, 0x00	; 0
    30d6:	4f e7       	ldi	r20, 0x7F	; 127
    30d8:	53 e4       	ldi	r21, 0x43	; 67
    30da:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    30de:	18 16       	cp	r1, r24
    30e0:	0c f0       	brlt	.+2      	; 0x30e4 <LCD_moveCursor+0x45c>
    30e2:	7b c0       	rjmp	.+246    	; 0x31da <LCD_moveCursor+0x552>
	{
		_delay_ms(__us / 1000.0);
    30e4:	6d 89       	ldd	r22, Y+21	; 0x15
    30e6:	7e 89       	ldd	r23, Y+22	; 0x16
    30e8:	8f 89       	ldd	r24, Y+23	; 0x17
    30ea:	98 8d       	ldd	r25, Y+24	; 0x18
    30ec:	20 e0       	ldi	r18, 0x00	; 0
    30ee:	30 e0       	ldi	r19, 0x00	; 0
    30f0:	4a e7       	ldi	r20, 0x7A	; 122
    30f2:	54 e4       	ldi	r21, 0x44	; 68
    30f4:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    30f8:	dc 01       	movw	r26, r24
    30fa:	cb 01       	movw	r24, r22
    30fc:	8c 87       	std	Y+12, r24	; 0x0c
    30fe:	9d 87       	std	Y+13, r25	; 0x0d
    3100:	ae 87       	std	Y+14, r26	; 0x0e
    3102:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3104:	6c 85       	ldd	r22, Y+12	; 0x0c
    3106:	7d 85       	ldd	r23, Y+13	; 0x0d
    3108:	8e 85       	ldd	r24, Y+14	; 0x0e
    310a:	9f 85       	ldd	r25, Y+15	; 0x0f
    310c:	20 e0       	ldi	r18, 0x00	; 0
    310e:	30 e0       	ldi	r19, 0x00	; 0
    3110:	4a e7       	ldi	r20, 0x7A	; 122
    3112:	55 e4       	ldi	r21, 0x45	; 69
    3114:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3118:	dc 01       	movw	r26, r24
    311a:	cb 01       	movw	r24, r22
    311c:	88 87       	std	Y+8, r24	; 0x08
    311e:	99 87       	std	Y+9, r25	; 0x09
    3120:	aa 87       	std	Y+10, r26	; 0x0a
    3122:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    3124:	68 85       	ldd	r22, Y+8	; 0x08
    3126:	79 85       	ldd	r23, Y+9	; 0x09
    3128:	8a 85       	ldd	r24, Y+10	; 0x0a
    312a:	9b 85       	ldd	r25, Y+11	; 0x0b
    312c:	20 e0       	ldi	r18, 0x00	; 0
    312e:	30 e0       	ldi	r19, 0x00	; 0
    3130:	40 e8       	ldi	r20, 0x80	; 128
    3132:	5f e3       	ldi	r21, 0x3F	; 63
    3134:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3138:	88 23       	and	r24, r24
    313a:	2c f4       	brge	.+10     	; 0x3146 <LCD_moveCursor+0x4be>
		__ticks = 1;
    313c:	81 e0       	ldi	r24, 0x01	; 1
    313e:	90 e0       	ldi	r25, 0x00	; 0
    3140:	9f 83       	std	Y+7, r25	; 0x07
    3142:	8e 83       	std	Y+6, r24	; 0x06
    3144:	3f c0       	rjmp	.+126    	; 0x31c4 <LCD_moveCursor+0x53c>
	else if (__tmp > 65535)
    3146:	68 85       	ldd	r22, Y+8	; 0x08
    3148:	79 85       	ldd	r23, Y+9	; 0x09
    314a:	8a 85       	ldd	r24, Y+10	; 0x0a
    314c:	9b 85       	ldd	r25, Y+11	; 0x0b
    314e:	20 e0       	ldi	r18, 0x00	; 0
    3150:	3f ef       	ldi	r19, 0xFF	; 255
    3152:	4f e7       	ldi	r20, 0x7F	; 127
    3154:	57 e4       	ldi	r21, 0x47	; 71
    3156:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    315a:	18 16       	cp	r1, r24
    315c:	4c f5       	brge	.+82     	; 0x31b0 <LCD_moveCursor+0x528>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    315e:	6c 85       	ldd	r22, Y+12	; 0x0c
    3160:	7d 85       	ldd	r23, Y+13	; 0x0d
    3162:	8e 85       	ldd	r24, Y+14	; 0x0e
    3164:	9f 85       	ldd	r25, Y+15	; 0x0f
    3166:	20 e0       	ldi	r18, 0x00	; 0
    3168:	30 e0       	ldi	r19, 0x00	; 0
    316a:	40 e2       	ldi	r20, 0x20	; 32
    316c:	51 e4       	ldi	r21, 0x41	; 65
    316e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3172:	dc 01       	movw	r26, r24
    3174:	cb 01       	movw	r24, r22
    3176:	bc 01       	movw	r22, r24
    3178:	cd 01       	movw	r24, r26
    317a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    317e:	dc 01       	movw	r26, r24
    3180:	cb 01       	movw	r24, r22
    3182:	9f 83       	std	Y+7, r25	; 0x07
    3184:	8e 83       	std	Y+6, r24	; 0x06
    3186:	0f c0       	rjmp	.+30     	; 0x31a6 <LCD_moveCursor+0x51e>
    3188:	80 e9       	ldi	r24, 0x90	; 144
    318a:	91 e0       	ldi	r25, 0x01	; 1
    318c:	9d 83       	std	Y+5, r25	; 0x05
    318e:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3190:	8c 81       	ldd	r24, Y+4	; 0x04
    3192:	9d 81       	ldd	r25, Y+5	; 0x05
    3194:	01 97       	sbiw	r24, 0x01	; 1
    3196:	f1 f7       	brne	.-4      	; 0x3194 <LCD_moveCursor+0x50c>
    3198:	9d 83       	std	Y+5, r25	; 0x05
    319a:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    319c:	8e 81       	ldd	r24, Y+6	; 0x06
    319e:	9f 81       	ldd	r25, Y+7	; 0x07
    31a0:	01 97       	sbiw	r24, 0x01	; 1
    31a2:	9f 83       	std	Y+7, r25	; 0x07
    31a4:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31a6:	8e 81       	ldd	r24, Y+6	; 0x06
    31a8:	9f 81       	ldd	r25, Y+7	; 0x07
    31aa:	00 97       	sbiw	r24, 0x00	; 0
    31ac:	69 f7       	brne	.-38     	; 0x3188 <LCD_moveCursor+0x500>
    31ae:	24 c0       	rjmp	.+72     	; 0x31f8 <LCD_moveCursor+0x570>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31b0:	68 85       	ldd	r22, Y+8	; 0x08
    31b2:	79 85       	ldd	r23, Y+9	; 0x09
    31b4:	8a 85       	ldd	r24, Y+10	; 0x0a
    31b6:	9b 85       	ldd	r25, Y+11	; 0x0b
    31b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31bc:	dc 01       	movw	r26, r24
    31be:	cb 01       	movw	r24, r22
    31c0:	9f 83       	std	Y+7, r25	; 0x07
    31c2:	8e 83       	std	Y+6, r24	; 0x06
    31c4:	8e 81       	ldd	r24, Y+6	; 0x06
    31c6:	9f 81       	ldd	r25, Y+7	; 0x07
    31c8:	9b 83       	std	Y+3, r25	; 0x03
    31ca:	8a 83       	std	Y+2, r24	; 0x02
    31cc:	8a 81       	ldd	r24, Y+2	; 0x02
    31ce:	9b 81       	ldd	r25, Y+3	; 0x03
    31d0:	01 97       	sbiw	r24, 0x01	; 1
    31d2:	f1 f7       	brne	.-4      	; 0x31d0 <LCD_moveCursor+0x548>
    31d4:	9b 83       	std	Y+3, r25	; 0x03
    31d6:	8a 83       	std	Y+2, r24	; 0x02
    31d8:	0f c0       	rjmp	.+30     	; 0x31f8 <LCD_moveCursor+0x570>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    31da:	69 89       	ldd	r22, Y+17	; 0x11
    31dc:	7a 89       	ldd	r23, Y+18	; 0x12
    31de:	8b 89       	ldd	r24, Y+19	; 0x13
    31e0:	9c 89       	ldd	r25, Y+20	; 0x14
    31e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31e6:	dc 01       	movw	r26, r24
    31e8:	cb 01       	movw	r24, r22
    31ea:	88 8b       	std	Y+16, r24	; 0x10
    31ec:	88 89       	ldd	r24, Y+16	; 0x10
    31ee:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    31f0:	89 81       	ldd	r24, Y+1	; 0x01
    31f2:	8a 95       	dec	r24
    31f4:	f1 f7       	brne	.-4      	; 0x31f2 <LCD_moveCursor+0x56a>
    31f6:	89 83       	std	Y+1, r24	; 0x01
			{
				LCD_sendCmnd(0b00010100);
				_delay_us(39);
			}

	for(u8 i=0;i<position;i++)
    31f8:	de 01       	movw	r26, r28
    31fa:	a7 5b       	subi	r26, 0xB7	; 183
    31fc:	bf 4f       	sbci	r27, 0xFF	; 255
    31fe:	fe 01       	movw	r30, r28
    3200:	e7 5b       	subi	r30, 0xB7	; 183
    3202:	ff 4f       	sbci	r31, 0xFF	; 255
    3204:	80 81       	ld	r24, Z
    3206:	8f 5f       	subi	r24, 0xFF	; 255
    3208:	8c 93       	st	X, r24
    320a:	fe 01       	movw	r30, r28
    320c:	e7 5b       	subi	r30, 0xB7	; 183
    320e:	ff 4f       	sbci	r31, 0xFF	; 255
    3210:	de 01       	movw	r26, r28
    3212:	a3 5b       	subi	r26, 0xB3	; 179
    3214:	bf 4f       	sbci	r27, 0xFF	; 255
    3216:	90 81       	ld	r25, Z
    3218:	8c 91       	ld	r24, X
    321a:	98 17       	cp	r25, r24
    321c:	08 f4       	brcc	.+2      	; 0x3220 <LCD_moveCursor+0x598>
    321e:	2b cf       	rjmp	.-426    	; 0x3076 <LCD_moveCursor+0x3ee>


}


}
    3220:	c3 5b       	subi	r28, 0xB3	; 179
    3222:	df 4f       	sbci	r29, 0xFF	; 255
    3224:	0f b6       	in	r0, 0x3f	; 63
    3226:	f8 94       	cli
    3228:	de bf       	out	0x3e, r29	; 62
    322a:	0f be       	out	0x3f, r0	; 63
    322c:	cd bf       	out	0x3d, r28	; 61
    322e:	cf 91       	pop	r28
    3230:	df 91       	pop	r29
    3232:	1f 91       	pop	r17
    3234:	0f 91       	pop	r16
    3236:	08 95       	ret

00003238 <LCD_shiftDisplay>:
//1 for right and 0 for left
void LCD_shiftDisplay(u8 direction)
{
    3238:	df 93       	push	r29
    323a:	cf 93       	push	r28
    323c:	cd b7       	in	r28, 0x3d	; 61
    323e:	de b7       	in	r29, 0x3e	; 62
    3240:	e1 97       	sbiw	r28, 0x31	; 49
    3242:	0f b6       	in	r0, 0x3f	; 63
    3244:	f8 94       	cli
    3246:	de bf       	out	0x3e, r29	; 62
    3248:	0f be       	out	0x3f, r0	; 63
    324a:	cd bf       	out	0x3d, r28	; 61
    324c:	89 ab       	std	Y+49, r24	; 0x31
	if(direction==1)
    324e:	89 a9       	ldd	r24, Y+49	; 0x31
    3250:	81 30       	cpi	r24, 0x01	; 1
    3252:	09 f0       	breq	.+2      	; 0x3256 <LCD_shiftDisplay+0x1e>
    3254:	c1 c0       	rjmp	.+386    	; 0x33d8 <LCD_shiftDisplay+0x1a0>
	{
		LCD_sendCmnd(0b00011100);
    3256:	8c e1       	ldi	r24, 0x1C	; 28
    3258:	0e 94 27 13 	call	0x264e	; 0x264e <LCD_sendCmnd>
    325c:	80 e0       	ldi	r24, 0x00	; 0
    325e:	90 e0       	ldi	r25, 0x00	; 0
    3260:	a0 e2       	ldi	r26, 0x20	; 32
    3262:	b2 e4       	ldi	r27, 0x42	; 66
    3264:	8d a7       	std	Y+45, r24	; 0x2d
    3266:	9e a7       	std	Y+46, r25	; 0x2e
    3268:	af a7       	std	Y+47, r26	; 0x2f
    326a:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    326c:	6d a5       	ldd	r22, Y+45	; 0x2d
    326e:	7e a5       	ldd	r23, Y+46	; 0x2e
    3270:	8f a5       	ldd	r24, Y+47	; 0x2f
    3272:	98 a9       	ldd	r25, Y+48	; 0x30
    3274:	2b ea       	ldi	r18, 0xAB	; 171
    3276:	3a ea       	ldi	r19, 0xAA	; 170
    3278:	4a ea       	ldi	r20, 0xAA	; 170
    327a:	50 e4       	ldi	r21, 0x40	; 64
    327c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3280:	dc 01       	movw	r26, r24
    3282:	cb 01       	movw	r24, r22
    3284:	89 a7       	std	Y+41, r24	; 0x29
    3286:	9a a7       	std	Y+42, r25	; 0x2a
    3288:	ab a7       	std	Y+43, r26	; 0x2b
    328a:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    328c:	69 a5       	ldd	r22, Y+41	; 0x29
    328e:	7a a5       	ldd	r23, Y+42	; 0x2a
    3290:	8b a5       	ldd	r24, Y+43	; 0x2b
    3292:	9c a5       	ldd	r25, Y+44	; 0x2c
    3294:	20 e0       	ldi	r18, 0x00	; 0
    3296:	30 e0       	ldi	r19, 0x00	; 0
    3298:	40 e8       	ldi	r20, 0x80	; 128
    329a:	5f e3       	ldi	r21, 0x3F	; 63
    329c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    32a0:	88 23       	and	r24, r24
    32a2:	1c f4       	brge	.+6      	; 0x32aa <LCD_shiftDisplay+0x72>
		__ticks = 1;
    32a4:	81 e0       	ldi	r24, 0x01	; 1
    32a6:	88 a7       	std	Y+40, r24	; 0x28
    32a8:	91 c0       	rjmp	.+290    	; 0x33cc <LCD_shiftDisplay+0x194>
	else if (__tmp > 255)
    32aa:	69 a5       	ldd	r22, Y+41	; 0x29
    32ac:	7a a5       	ldd	r23, Y+42	; 0x2a
    32ae:	8b a5       	ldd	r24, Y+43	; 0x2b
    32b0:	9c a5       	ldd	r25, Y+44	; 0x2c
    32b2:	20 e0       	ldi	r18, 0x00	; 0
    32b4:	30 e0       	ldi	r19, 0x00	; 0
    32b6:	4f e7       	ldi	r20, 0x7F	; 127
    32b8:	53 e4       	ldi	r21, 0x43	; 67
    32ba:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    32be:	18 16       	cp	r1, r24
    32c0:	0c f0       	brlt	.+2      	; 0x32c4 <LCD_shiftDisplay+0x8c>
    32c2:	7b c0       	rjmp	.+246    	; 0x33ba <LCD_shiftDisplay+0x182>
	{
		_delay_ms(__us / 1000.0);
    32c4:	6d a5       	ldd	r22, Y+45	; 0x2d
    32c6:	7e a5       	ldd	r23, Y+46	; 0x2e
    32c8:	8f a5       	ldd	r24, Y+47	; 0x2f
    32ca:	98 a9       	ldd	r25, Y+48	; 0x30
    32cc:	20 e0       	ldi	r18, 0x00	; 0
    32ce:	30 e0       	ldi	r19, 0x00	; 0
    32d0:	4a e7       	ldi	r20, 0x7A	; 122
    32d2:	54 e4       	ldi	r21, 0x44	; 68
    32d4:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    32d8:	dc 01       	movw	r26, r24
    32da:	cb 01       	movw	r24, r22
    32dc:	8c a3       	std	Y+36, r24	; 0x24
    32de:	9d a3       	std	Y+37, r25	; 0x25
    32e0:	ae a3       	std	Y+38, r26	; 0x26
    32e2:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    32e4:	6c a1       	ldd	r22, Y+36	; 0x24
    32e6:	7d a1       	ldd	r23, Y+37	; 0x25
    32e8:	8e a1       	ldd	r24, Y+38	; 0x26
    32ea:	9f a1       	ldd	r25, Y+39	; 0x27
    32ec:	20 e0       	ldi	r18, 0x00	; 0
    32ee:	30 e0       	ldi	r19, 0x00	; 0
    32f0:	4a e7       	ldi	r20, 0x7A	; 122
    32f2:	55 e4       	ldi	r21, 0x45	; 69
    32f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32f8:	dc 01       	movw	r26, r24
    32fa:	cb 01       	movw	r24, r22
    32fc:	88 a3       	std	Y+32, r24	; 0x20
    32fe:	99 a3       	std	Y+33, r25	; 0x21
    3300:	aa a3       	std	Y+34, r26	; 0x22
    3302:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    3304:	68 a1       	ldd	r22, Y+32	; 0x20
    3306:	79 a1       	ldd	r23, Y+33	; 0x21
    3308:	8a a1       	ldd	r24, Y+34	; 0x22
    330a:	9b a1       	ldd	r25, Y+35	; 0x23
    330c:	20 e0       	ldi	r18, 0x00	; 0
    330e:	30 e0       	ldi	r19, 0x00	; 0
    3310:	40 e8       	ldi	r20, 0x80	; 128
    3312:	5f e3       	ldi	r21, 0x3F	; 63
    3314:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3318:	88 23       	and	r24, r24
    331a:	2c f4       	brge	.+10     	; 0x3326 <LCD_shiftDisplay+0xee>
		__ticks = 1;
    331c:	81 e0       	ldi	r24, 0x01	; 1
    331e:	90 e0       	ldi	r25, 0x00	; 0
    3320:	9f 8f       	std	Y+31, r25	; 0x1f
    3322:	8e 8f       	std	Y+30, r24	; 0x1e
    3324:	3f c0       	rjmp	.+126    	; 0x33a4 <LCD_shiftDisplay+0x16c>
	else if (__tmp > 65535)
    3326:	68 a1       	ldd	r22, Y+32	; 0x20
    3328:	79 a1       	ldd	r23, Y+33	; 0x21
    332a:	8a a1       	ldd	r24, Y+34	; 0x22
    332c:	9b a1       	ldd	r25, Y+35	; 0x23
    332e:	20 e0       	ldi	r18, 0x00	; 0
    3330:	3f ef       	ldi	r19, 0xFF	; 255
    3332:	4f e7       	ldi	r20, 0x7F	; 127
    3334:	57 e4       	ldi	r21, 0x47	; 71
    3336:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    333a:	18 16       	cp	r1, r24
    333c:	4c f5       	brge	.+82     	; 0x3390 <LCD_shiftDisplay+0x158>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    333e:	6c a1       	ldd	r22, Y+36	; 0x24
    3340:	7d a1       	ldd	r23, Y+37	; 0x25
    3342:	8e a1       	ldd	r24, Y+38	; 0x26
    3344:	9f a1       	ldd	r25, Y+39	; 0x27
    3346:	20 e0       	ldi	r18, 0x00	; 0
    3348:	30 e0       	ldi	r19, 0x00	; 0
    334a:	40 e2       	ldi	r20, 0x20	; 32
    334c:	51 e4       	ldi	r21, 0x41	; 65
    334e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3352:	dc 01       	movw	r26, r24
    3354:	cb 01       	movw	r24, r22
    3356:	bc 01       	movw	r22, r24
    3358:	cd 01       	movw	r24, r26
    335a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    335e:	dc 01       	movw	r26, r24
    3360:	cb 01       	movw	r24, r22
    3362:	9f 8f       	std	Y+31, r25	; 0x1f
    3364:	8e 8f       	std	Y+30, r24	; 0x1e
    3366:	0f c0       	rjmp	.+30     	; 0x3386 <LCD_shiftDisplay+0x14e>
    3368:	80 e9       	ldi	r24, 0x90	; 144
    336a:	91 e0       	ldi	r25, 0x01	; 1
    336c:	9d 8f       	std	Y+29, r25	; 0x1d
    336e:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3370:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3372:	9d 8d       	ldd	r25, Y+29	; 0x1d
    3374:	01 97       	sbiw	r24, 0x01	; 1
    3376:	f1 f7       	brne	.-4      	; 0x3374 <LCD_shiftDisplay+0x13c>
    3378:	9d 8f       	std	Y+29, r25	; 0x1d
    337a:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    337c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    337e:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3380:	01 97       	sbiw	r24, 0x01	; 1
    3382:	9f 8f       	std	Y+31, r25	; 0x1f
    3384:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3386:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3388:	9f 8d       	ldd	r25, Y+31	; 0x1f
    338a:	00 97       	sbiw	r24, 0x00	; 0
    338c:	69 f7       	brne	.-38     	; 0x3368 <LCD_shiftDisplay+0x130>
    338e:	24 c0       	rjmp	.+72     	; 0x33d8 <LCD_shiftDisplay+0x1a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3390:	68 a1       	ldd	r22, Y+32	; 0x20
    3392:	79 a1       	ldd	r23, Y+33	; 0x21
    3394:	8a a1       	ldd	r24, Y+34	; 0x22
    3396:	9b a1       	ldd	r25, Y+35	; 0x23
    3398:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    339c:	dc 01       	movw	r26, r24
    339e:	cb 01       	movw	r24, r22
    33a0:	9f 8f       	std	Y+31, r25	; 0x1f
    33a2:	8e 8f       	std	Y+30, r24	; 0x1e
    33a4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    33a6:	9f 8d       	ldd	r25, Y+31	; 0x1f
    33a8:	9b 8f       	std	Y+27, r25	; 0x1b
    33aa:	8a 8f       	std	Y+26, r24	; 0x1a
    33ac:	8a 8d       	ldd	r24, Y+26	; 0x1a
    33ae:	9b 8d       	ldd	r25, Y+27	; 0x1b
    33b0:	01 97       	sbiw	r24, 0x01	; 1
    33b2:	f1 f7       	brne	.-4      	; 0x33b0 <LCD_shiftDisplay+0x178>
    33b4:	9b 8f       	std	Y+27, r25	; 0x1b
    33b6:	8a 8f       	std	Y+26, r24	; 0x1a
    33b8:	0f c0       	rjmp	.+30     	; 0x33d8 <LCD_shiftDisplay+0x1a0>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    33ba:	69 a5       	ldd	r22, Y+41	; 0x29
    33bc:	7a a5       	ldd	r23, Y+42	; 0x2a
    33be:	8b a5       	ldd	r24, Y+43	; 0x2b
    33c0:	9c a5       	ldd	r25, Y+44	; 0x2c
    33c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33c6:	dc 01       	movw	r26, r24
    33c8:	cb 01       	movw	r24, r22
    33ca:	88 a7       	std	Y+40, r24	; 0x28
    33cc:	88 a5       	ldd	r24, Y+40	; 0x28
    33ce:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    33d0:	89 8d       	ldd	r24, Y+25	; 0x19
    33d2:	8a 95       	dec	r24
    33d4:	f1 f7       	brne	.-4      	; 0x33d2 <LCD_shiftDisplay+0x19a>
    33d6:	89 8f       	std	Y+25, r24	; 0x19
		_delay_us(40);

	}
	if(direction==0)
    33d8:	89 a9       	ldd	r24, Y+49	; 0x31
    33da:	88 23       	and	r24, r24
    33dc:	09 f0       	breq	.+2      	; 0x33e0 <LCD_shiftDisplay+0x1a8>
    33de:	c1 c0       	rjmp	.+386    	; 0x3562 <LCD_shiftDisplay+0x32a>
		{
			LCD_sendCmnd(0b00011000);
    33e0:	88 e1       	ldi	r24, 0x18	; 24
    33e2:	0e 94 27 13 	call	0x264e	; 0x264e <LCD_sendCmnd>
    33e6:	80 e0       	ldi	r24, 0x00	; 0
    33e8:	90 e0       	ldi	r25, 0x00	; 0
    33ea:	a0 e2       	ldi	r26, 0x20	; 32
    33ec:	b2 e4       	ldi	r27, 0x42	; 66
    33ee:	8d 8b       	std	Y+21, r24	; 0x15
    33f0:	9e 8b       	std	Y+22, r25	; 0x16
    33f2:	af 8b       	std	Y+23, r26	; 0x17
    33f4:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    33f6:	6d 89       	ldd	r22, Y+21	; 0x15
    33f8:	7e 89       	ldd	r23, Y+22	; 0x16
    33fa:	8f 89       	ldd	r24, Y+23	; 0x17
    33fc:	98 8d       	ldd	r25, Y+24	; 0x18
    33fe:	2b ea       	ldi	r18, 0xAB	; 171
    3400:	3a ea       	ldi	r19, 0xAA	; 170
    3402:	4a ea       	ldi	r20, 0xAA	; 170
    3404:	50 e4       	ldi	r21, 0x40	; 64
    3406:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    340a:	dc 01       	movw	r26, r24
    340c:	cb 01       	movw	r24, r22
    340e:	89 8b       	std	Y+17, r24	; 0x11
    3410:	9a 8b       	std	Y+18, r25	; 0x12
    3412:	ab 8b       	std	Y+19, r26	; 0x13
    3414:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    3416:	69 89       	ldd	r22, Y+17	; 0x11
    3418:	7a 89       	ldd	r23, Y+18	; 0x12
    341a:	8b 89       	ldd	r24, Y+19	; 0x13
    341c:	9c 89       	ldd	r25, Y+20	; 0x14
    341e:	20 e0       	ldi	r18, 0x00	; 0
    3420:	30 e0       	ldi	r19, 0x00	; 0
    3422:	40 e8       	ldi	r20, 0x80	; 128
    3424:	5f e3       	ldi	r21, 0x3F	; 63
    3426:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    342a:	88 23       	and	r24, r24
    342c:	1c f4       	brge	.+6      	; 0x3434 <LCD_shiftDisplay+0x1fc>
		__ticks = 1;
    342e:	81 e0       	ldi	r24, 0x01	; 1
    3430:	88 8b       	std	Y+16, r24	; 0x10
    3432:	91 c0       	rjmp	.+290    	; 0x3556 <LCD_shiftDisplay+0x31e>
	else if (__tmp > 255)
    3434:	69 89       	ldd	r22, Y+17	; 0x11
    3436:	7a 89       	ldd	r23, Y+18	; 0x12
    3438:	8b 89       	ldd	r24, Y+19	; 0x13
    343a:	9c 89       	ldd	r25, Y+20	; 0x14
    343c:	20 e0       	ldi	r18, 0x00	; 0
    343e:	30 e0       	ldi	r19, 0x00	; 0
    3440:	4f e7       	ldi	r20, 0x7F	; 127
    3442:	53 e4       	ldi	r21, 0x43	; 67
    3444:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3448:	18 16       	cp	r1, r24
    344a:	0c f0       	brlt	.+2      	; 0x344e <LCD_shiftDisplay+0x216>
    344c:	7b c0       	rjmp	.+246    	; 0x3544 <LCD_shiftDisplay+0x30c>
	{
		_delay_ms(__us / 1000.0);
    344e:	6d 89       	ldd	r22, Y+21	; 0x15
    3450:	7e 89       	ldd	r23, Y+22	; 0x16
    3452:	8f 89       	ldd	r24, Y+23	; 0x17
    3454:	98 8d       	ldd	r25, Y+24	; 0x18
    3456:	20 e0       	ldi	r18, 0x00	; 0
    3458:	30 e0       	ldi	r19, 0x00	; 0
    345a:	4a e7       	ldi	r20, 0x7A	; 122
    345c:	54 e4       	ldi	r21, 0x44	; 68
    345e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3462:	dc 01       	movw	r26, r24
    3464:	cb 01       	movw	r24, r22
    3466:	8c 87       	std	Y+12, r24	; 0x0c
    3468:	9d 87       	std	Y+13, r25	; 0x0d
    346a:	ae 87       	std	Y+14, r26	; 0x0e
    346c:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    346e:	6c 85       	ldd	r22, Y+12	; 0x0c
    3470:	7d 85       	ldd	r23, Y+13	; 0x0d
    3472:	8e 85       	ldd	r24, Y+14	; 0x0e
    3474:	9f 85       	ldd	r25, Y+15	; 0x0f
    3476:	20 e0       	ldi	r18, 0x00	; 0
    3478:	30 e0       	ldi	r19, 0x00	; 0
    347a:	4a e7       	ldi	r20, 0x7A	; 122
    347c:	55 e4       	ldi	r21, 0x45	; 69
    347e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3482:	dc 01       	movw	r26, r24
    3484:	cb 01       	movw	r24, r22
    3486:	88 87       	std	Y+8, r24	; 0x08
    3488:	99 87       	std	Y+9, r25	; 0x09
    348a:	aa 87       	std	Y+10, r26	; 0x0a
    348c:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    348e:	68 85       	ldd	r22, Y+8	; 0x08
    3490:	79 85       	ldd	r23, Y+9	; 0x09
    3492:	8a 85       	ldd	r24, Y+10	; 0x0a
    3494:	9b 85       	ldd	r25, Y+11	; 0x0b
    3496:	20 e0       	ldi	r18, 0x00	; 0
    3498:	30 e0       	ldi	r19, 0x00	; 0
    349a:	40 e8       	ldi	r20, 0x80	; 128
    349c:	5f e3       	ldi	r21, 0x3F	; 63
    349e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    34a2:	88 23       	and	r24, r24
    34a4:	2c f4       	brge	.+10     	; 0x34b0 <LCD_shiftDisplay+0x278>
		__ticks = 1;
    34a6:	81 e0       	ldi	r24, 0x01	; 1
    34a8:	90 e0       	ldi	r25, 0x00	; 0
    34aa:	9f 83       	std	Y+7, r25	; 0x07
    34ac:	8e 83       	std	Y+6, r24	; 0x06
    34ae:	3f c0       	rjmp	.+126    	; 0x352e <LCD_shiftDisplay+0x2f6>
	else if (__tmp > 65535)
    34b0:	68 85       	ldd	r22, Y+8	; 0x08
    34b2:	79 85       	ldd	r23, Y+9	; 0x09
    34b4:	8a 85       	ldd	r24, Y+10	; 0x0a
    34b6:	9b 85       	ldd	r25, Y+11	; 0x0b
    34b8:	20 e0       	ldi	r18, 0x00	; 0
    34ba:	3f ef       	ldi	r19, 0xFF	; 255
    34bc:	4f e7       	ldi	r20, 0x7F	; 127
    34be:	57 e4       	ldi	r21, 0x47	; 71
    34c0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    34c4:	18 16       	cp	r1, r24
    34c6:	4c f5       	brge	.+82     	; 0x351a <LCD_shiftDisplay+0x2e2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    34c8:	6c 85       	ldd	r22, Y+12	; 0x0c
    34ca:	7d 85       	ldd	r23, Y+13	; 0x0d
    34cc:	8e 85       	ldd	r24, Y+14	; 0x0e
    34ce:	9f 85       	ldd	r25, Y+15	; 0x0f
    34d0:	20 e0       	ldi	r18, 0x00	; 0
    34d2:	30 e0       	ldi	r19, 0x00	; 0
    34d4:	40 e2       	ldi	r20, 0x20	; 32
    34d6:	51 e4       	ldi	r21, 0x41	; 65
    34d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34dc:	dc 01       	movw	r26, r24
    34de:	cb 01       	movw	r24, r22
    34e0:	bc 01       	movw	r22, r24
    34e2:	cd 01       	movw	r24, r26
    34e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34e8:	dc 01       	movw	r26, r24
    34ea:	cb 01       	movw	r24, r22
    34ec:	9f 83       	std	Y+7, r25	; 0x07
    34ee:	8e 83       	std	Y+6, r24	; 0x06
    34f0:	0f c0       	rjmp	.+30     	; 0x3510 <LCD_shiftDisplay+0x2d8>
    34f2:	80 e9       	ldi	r24, 0x90	; 144
    34f4:	91 e0       	ldi	r25, 0x01	; 1
    34f6:	9d 83       	std	Y+5, r25	; 0x05
    34f8:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    34fa:	8c 81       	ldd	r24, Y+4	; 0x04
    34fc:	9d 81       	ldd	r25, Y+5	; 0x05
    34fe:	01 97       	sbiw	r24, 0x01	; 1
    3500:	f1 f7       	brne	.-4      	; 0x34fe <LCD_shiftDisplay+0x2c6>
    3502:	9d 83       	std	Y+5, r25	; 0x05
    3504:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3506:	8e 81       	ldd	r24, Y+6	; 0x06
    3508:	9f 81       	ldd	r25, Y+7	; 0x07
    350a:	01 97       	sbiw	r24, 0x01	; 1
    350c:	9f 83       	std	Y+7, r25	; 0x07
    350e:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3510:	8e 81       	ldd	r24, Y+6	; 0x06
    3512:	9f 81       	ldd	r25, Y+7	; 0x07
    3514:	00 97       	sbiw	r24, 0x00	; 0
    3516:	69 f7       	brne	.-38     	; 0x34f2 <LCD_shiftDisplay+0x2ba>
    3518:	24 c0       	rjmp	.+72     	; 0x3562 <LCD_shiftDisplay+0x32a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    351a:	68 85       	ldd	r22, Y+8	; 0x08
    351c:	79 85       	ldd	r23, Y+9	; 0x09
    351e:	8a 85       	ldd	r24, Y+10	; 0x0a
    3520:	9b 85       	ldd	r25, Y+11	; 0x0b
    3522:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3526:	dc 01       	movw	r26, r24
    3528:	cb 01       	movw	r24, r22
    352a:	9f 83       	std	Y+7, r25	; 0x07
    352c:	8e 83       	std	Y+6, r24	; 0x06
    352e:	8e 81       	ldd	r24, Y+6	; 0x06
    3530:	9f 81       	ldd	r25, Y+7	; 0x07
    3532:	9b 83       	std	Y+3, r25	; 0x03
    3534:	8a 83       	std	Y+2, r24	; 0x02
    3536:	8a 81       	ldd	r24, Y+2	; 0x02
    3538:	9b 81       	ldd	r25, Y+3	; 0x03
    353a:	01 97       	sbiw	r24, 0x01	; 1
    353c:	f1 f7       	brne	.-4      	; 0x353a <LCD_shiftDisplay+0x302>
    353e:	9b 83       	std	Y+3, r25	; 0x03
    3540:	8a 83       	std	Y+2, r24	; 0x02
    3542:	0f c0       	rjmp	.+30     	; 0x3562 <LCD_shiftDisplay+0x32a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3544:	69 89       	ldd	r22, Y+17	; 0x11
    3546:	7a 89       	ldd	r23, Y+18	; 0x12
    3548:	8b 89       	ldd	r24, Y+19	; 0x13
    354a:	9c 89       	ldd	r25, Y+20	; 0x14
    354c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3550:	dc 01       	movw	r26, r24
    3552:	cb 01       	movw	r24, r22
    3554:	88 8b       	std	Y+16, r24	; 0x10
    3556:	88 89       	ldd	r24, Y+16	; 0x10
    3558:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    355a:	89 81       	ldd	r24, Y+1	; 0x01
    355c:	8a 95       	dec	r24
    355e:	f1 f7       	brne	.-4      	; 0x355c <LCD_shiftDisplay+0x324>
    3560:	89 83       	std	Y+1, r24	; 0x01
			_delay_us(40);

		}

}
    3562:	e1 96       	adiw	r28, 0x31	; 49
    3564:	0f b6       	in	r0, 0x3f	; 63
    3566:	f8 94       	cli
    3568:	de bf       	out	0x3e, r29	; 62
    356a:	0f be       	out	0x3f, r0	; 63
    356c:	cd bf       	out	0x3d, r28	; 61
    356e:	cf 91       	pop	r28
    3570:	df 91       	pop	r29
    3572:	08 95       	ret

00003574 <SRVM_init>:

#include "DIO_interface.h"
//#include "TIMER1_interface.h"

void SRVM_init(void)
{
    3574:	df 93       	push	r29
    3576:	cf 93       	push	r28
    3578:	cd b7       	in	r28, 0x3d	; 61
    357a:	de b7       	in	r29, 0x3e	; 62
DIO_setPinDirection(DIO_PORTD,DIO_PIN5,DIO_PIN_OUTPUT);
    357c:	83 e0       	ldi	r24, 0x03	; 3
    357e:	65 e0       	ldi	r22, 0x05	; 5
    3580:	41 e0       	ldi	r20, 0x01	; 1
    3582:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <DIO_setPinDirection>
}
    3586:	cf 91       	pop	r28
    3588:	df 91       	pop	r29
    358a:	08 95       	ret

0000358c <SRVM_on>:
void SRVM_on(u8 angle)
{
    358c:	df 93       	push	r29
    358e:	cf 93       	push	r28
    3590:	cd b7       	in	r28, 0x3d	; 61
    3592:	de b7       	in	r29, 0x3e	; 62
    3594:	6d 97       	sbiw	r28, 0x1d	; 29
    3596:	0f b6       	in	r0, 0x3f	; 63
    3598:	f8 94       	cli
    359a:	de bf       	out	0x3e, r29	; 62
    359c:	0f be       	out	0x3f, r0	; 63
    359e:	cd bf       	out	0x3d, r28	; 61
    35a0:	8d 8f       	std	Y+29, r24	; 0x1d
	if(angle<=0)
    35a2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    35a4:	88 23       	and	r24, r24
    35a6:	11 f4       	brne	.+4      	; 0x35ac <SRVM_on+0x20>
	{
		angle=1;
    35a8:	81 e0       	ldi	r24, 0x01	; 1
    35aa:	8d 8f       	std	Y+29, r24	; 0x1d
	}
	float local_delay=(1009.0f*(float)angle)/50.0;
    35ac:	8d 8d       	ldd	r24, Y+29	; 0x1d
    35ae:	88 2f       	mov	r24, r24
    35b0:	90 e0       	ldi	r25, 0x00	; 0
    35b2:	a0 e0       	ldi	r26, 0x00	; 0
    35b4:	b0 e0       	ldi	r27, 0x00	; 0
    35b6:	bc 01       	movw	r22, r24
    35b8:	cd 01       	movw	r24, r26
    35ba:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__floatunsisf>
    35be:	dc 01       	movw	r26, r24
    35c0:	cb 01       	movw	r24, r22
    35c2:	bc 01       	movw	r22, r24
    35c4:	cd 01       	movw	r24, r26
    35c6:	20 e0       	ldi	r18, 0x00	; 0
    35c8:	30 e4       	ldi	r19, 0x40	; 64
    35ca:	4c e7       	ldi	r20, 0x7C	; 124
    35cc:	54 e4       	ldi	r21, 0x44	; 68
    35ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35d2:	dc 01       	movw	r26, r24
    35d4:	cb 01       	movw	r24, r22
    35d6:	bc 01       	movw	r22, r24
    35d8:	cd 01       	movw	r24, r26
    35da:	20 e0       	ldi	r18, 0x00	; 0
    35dc:	30 e0       	ldi	r19, 0x00	; 0
    35de:	48 e4       	ldi	r20, 0x48	; 72
    35e0:	52 e4       	ldi	r21, 0x42	; 66
    35e2:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    35e6:	dc 01       	movw	r26, r24
    35e8:	cb 01       	movw	r24, r22
    35ea:	89 8f       	std	Y+25, r24	; 0x19
    35ec:	9a 8f       	std	Y+26, r25	; 0x1a
    35ee:	ab 8f       	std	Y+27, r26	; 0x1b
    35f0:	bc 8f       	std	Y+28, r27	; 0x1c
	DIO_setPinValue(DIO_PORTD,DIO_PIN5,DIO_PIN_HIGH);
    35f2:	83 e0       	ldi	r24, 0x03	; 3
    35f4:	65 e0       	ldi	r22, 0x05	; 5
    35f6:	41 e0       	ldi	r20, 0x01	; 1
    35f8:	0e 94 9a 0c 	call	0x1934	; 0x1934 <DIO_setPinValue>
    35fc:	89 8d       	ldd	r24, Y+25	; 0x19
    35fe:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3600:	ab 8d       	ldd	r26, Y+27	; 0x1b
    3602:	bc 8d       	ldd	r27, Y+28	; 0x1c
    3604:	8d 8b       	std	Y+21, r24	; 0x15
    3606:	9e 8b       	std	Y+22, r25	; 0x16
    3608:	af 8b       	std	Y+23, r26	; 0x17
    360a:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    360c:	6d 89       	ldd	r22, Y+21	; 0x15
    360e:	7e 89       	ldd	r23, Y+22	; 0x16
    3610:	8f 89       	ldd	r24, Y+23	; 0x17
    3612:	98 8d       	ldd	r25, Y+24	; 0x18
    3614:	2b ea       	ldi	r18, 0xAB	; 171
    3616:	3a ea       	ldi	r19, 0xAA	; 170
    3618:	4a ea       	ldi	r20, 0xAA	; 170
    361a:	50 e4       	ldi	r21, 0x40	; 64
    361c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3620:	dc 01       	movw	r26, r24
    3622:	cb 01       	movw	r24, r22
    3624:	89 8b       	std	Y+17, r24	; 0x11
    3626:	9a 8b       	std	Y+18, r25	; 0x12
    3628:	ab 8b       	std	Y+19, r26	; 0x13
    362a:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    362c:	69 89       	ldd	r22, Y+17	; 0x11
    362e:	7a 89       	ldd	r23, Y+18	; 0x12
    3630:	8b 89       	ldd	r24, Y+19	; 0x13
    3632:	9c 89       	ldd	r25, Y+20	; 0x14
    3634:	20 e0       	ldi	r18, 0x00	; 0
    3636:	30 e0       	ldi	r19, 0x00	; 0
    3638:	40 e8       	ldi	r20, 0x80	; 128
    363a:	5f e3       	ldi	r21, 0x3F	; 63
    363c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3640:	88 23       	and	r24, r24
    3642:	1c f4       	brge	.+6      	; 0x364a <SRVM_on+0xbe>
		__ticks = 1;
    3644:	81 e0       	ldi	r24, 0x01	; 1
    3646:	88 8b       	std	Y+16, r24	; 0x10
    3648:	91 c0       	rjmp	.+290    	; 0x376c <SRVM_on+0x1e0>
	else if (__tmp > 255)
    364a:	69 89       	ldd	r22, Y+17	; 0x11
    364c:	7a 89       	ldd	r23, Y+18	; 0x12
    364e:	8b 89       	ldd	r24, Y+19	; 0x13
    3650:	9c 89       	ldd	r25, Y+20	; 0x14
    3652:	20 e0       	ldi	r18, 0x00	; 0
    3654:	30 e0       	ldi	r19, 0x00	; 0
    3656:	4f e7       	ldi	r20, 0x7F	; 127
    3658:	53 e4       	ldi	r21, 0x43	; 67
    365a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    365e:	18 16       	cp	r1, r24
    3660:	0c f0       	brlt	.+2      	; 0x3664 <SRVM_on+0xd8>
    3662:	7b c0       	rjmp	.+246    	; 0x375a <SRVM_on+0x1ce>
	{
		_delay_ms(__us / 1000.0);
    3664:	6d 89       	ldd	r22, Y+21	; 0x15
    3666:	7e 89       	ldd	r23, Y+22	; 0x16
    3668:	8f 89       	ldd	r24, Y+23	; 0x17
    366a:	98 8d       	ldd	r25, Y+24	; 0x18
    366c:	20 e0       	ldi	r18, 0x00	; 0
    366e:	30 e0       	ldi	r19, 0x00	; 0
    3670:	4a e7       	ldi	r20, 0x7A	; 122
    3672:	54 e4       	ldi	r21, 0x44	; 68
    3674:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3678:	dc 01       	movw	r26, r24
    367a:	cb 01       	movw	r24, r22
    367c:	8c 87       	std	Y+12, r24	; 0x0c
    367e:	9d 87       	std	Y+13, r25	; 0x0d
    3680:	ae 87       	std	Y+14, r26	; 0x0e
    3682:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3684:	6c 85       	ldd	r22, Y+12	; 0x0c
    3686:	7d 85       	ldd	r23, Y+13	; 0x0d
    3688:	8e 85       	ldd	r24, Y+14	; 0x0e
    368a:	9f 85       	ldd	r25, Y+15	; 0x0f
    368c:	20 e0       	ldi	r18, 0x00	; 0
    368e:	30 e0       	ldi	r19, 0x00	; 0
    3690:	4a e7       	ldi	r20, 0x7A	; 122
    3692:	55 e4       	ldi	r21, 0x45	; 69
    3694:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3698:	dc 01       	movw	r26, r24
    369a:	cb 01       	movw	r24, r22
    369c:	88 87       	std	Y+8, r24	; 0x08
    369e:	99 87       	std	Y+9, r25	; 0x09
    36a0:	aa 87       	std	Y+10, r26	; 0x0a
    36a2:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    36a4:	68 85       	ldd	r22, Y+8	; 0x08
    36a6:	79 85       	ldd	r23, Y+9	; 0x09
    36a8:	8a 85       	ldd	r24, Y+10	; 0x0a
    36aa:	9b 85       	ldd	r25, Y+11	; 0x0b
    36ac:	20 e0       	ldi	r18, 0x00	; 0
    36ae:	30 e0       	ldi	r19, 0x00	; 0
    36b0:	40 e8       	ldi	r20, 0x80	; 128
    36b2:	5f e3       	ldi	r21, 0x3F	; 63
    36b4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    36b8:	88 23       	and	r24, r24
    36ba:	2c f4       	brge	.+10     	; 0x36c6 <SRVM_on+0x13a>
		__ticks = 1;
    36bc:	81 e0       	ldi	r24, 0x01	; 1
    36be:	90 e0       	ldi	r25, 0x00	; 0
    36c0:	9f 83       	std	Y+7, r25	; 0x07
    36c2:	8e 83       	std	Y+6, r24	; 0x06
    36c4:	3f c0       	rjmp	.+126    	; 0x3744 <SRVM_on+0x1b8>
	else if (__tmp > 65535)
    36c6:	68 85       	ldd	r22, Y+8	; 0x08
    36c8:	79 85       	ldd	r23, Y+9	; 0x09
    36ca:	8a 85       	ldd	r24, Y+10	; 0x0a
    36cc:	9b 85       	ldd	r25, Y+11	; 0x0b
    36ce:	20 e0       	ldi	r18, 0x00	; 0
    36d0:	3f ef       	ldi	r19, 0xFF	; 255
    36d2:	4f e7       	ldi	r20, 0x7F	; 127
    36d4:	57 e4       	ldi	r21, 0x47	; 71
    36d6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    36da:	18 16       	cp	r1, r24
    36dc:	4c f5       	brge	.+82     	; 0x3730 <SRVM_on+0x1a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    36de:	6c 85       	ldd	r22, Y+12	; 0x0c
    36e0:	7d 85       	ldd	r23, Y+13	; 0x0d
    36e2:	8e 85       	ldd	r24, Y+14	; 0x0e
    36e4:	9f 85       	ldd	r25, Y+15	; 0x0f
    36e6:	20 e0       	ldi	r18, 0x00	; 0
    36e8:	30 e0       	ldi	r19, 0x00	; 0
    36ea:	40 e2       	ldi	r20, 0x20	; 32
    36ec:	51 e4       	ldi	r21, 0x41	; 65
    36ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36f2:	dc 01       	movw	r26, r24
    36f4:	cb 01       	movw	r24, r22
    36f6:	bc 01       	movw	r22, r24
    36f8:	cd 01       	movw	r24, r26
    36fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36fe:	dc 01       	movw	r26, r24
    3700:	cb 01       	movw	r24, r22
    3702:	9f 83       	std	Y+7, r25	; 0x07
    3704:	8e 83       	std	Y+6, r24	; 0x06
    3706:	0f c0       	rjmp	.+30     	; 0x3726 <SRVM_on+0x19a>
    3708:	80 e9       	ldi	r24, 0x90	; 144
    370a:	91 e0       	ldi	r25, 0x01	; 1
    370c:	9d 83       	std	Y+5, r25	; 0x05
    370e:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3710:	8c 81       	ldd	r24, Y+4	; 0x04
    3712:	9d 81       	ldd	r25, Y+5	; 0x05
    3714:	01 97       	sbiw	r24, 0x01	; 1
    3716:	f1 f7       	brne	.-4      	; 0x3714 <SRVM_on+0x188>
    3718:	9d 83       	std	Y+5, r25	; 0x05
    371a:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    371c:	8e 81       	ldd	r24, Y+6	; 0x06
    371e:	9f 81       	ldd	r25, Y+7	; 0x07
    3720:	01 97       	sbiw	r24, 0x01	; 1
    3722:	9f 83       	std	Y+7, r25	; 0x07
    3724:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3726:	8e 81       	ldd	r24, Y+6	; 0x06
    3728:	9f 81       	ldd	r25, Y+7	; 0x07
    372a:	00 97       	sbiw	r24, 0x00	; 0
    372c:	69 f7       	brne	.-38     	; 0x3708 <SRVM_on+0x17c>
    372e:	24 c0       	rjmp	.+72     	; 0x3778 <SRVM_on+0x1ec>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3730:	68 85       	ldd	r22, Y+8	; 0x08
    3732:	79 85       	ldd	r23, Y+9	; 0x09
    3734:	8a 85       	ldd	r24, Y+10	; 0x0a
    3736:	9b 85       	ldd	r25, Y+11	; 0x0b
    3738:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    373c:	dc 01       	movw	r26, r24
    373e:	cb 01       	movw	r24, r22
    3740:	9f 83       	std	Y+7, r25	; 0x07
    3742:	8e 83       	std	Y+6, r24	; 0x06
    3744:	8e 81       	ldd	r24, Y+6	; 0x06
    3746:	9f 81       	ldd	r25, Y+7	; 0x07
    3748:	9b 83       	std	Y+3, r25	; 0x03
    374a:	8a 83       	std	Y+2, r24	; 0x02
    374c:	8a 81       	ldd	r24, Y+2	; 0x02
    374e:	9b 81       	ldd	r25, Y+3	; 0x03
    3750:	01 97       	sbiw	r24, 0x01	; 1
    3752:	f1 f7       	brne	.-4      	; 0x3750 <SRVM_on+0x1c4>
    3754:	9b 83       	std	Y+3, r25	; 0x03
    3756:	8a 83       	std	Y+2, r24	; 0x02
    3758:	0f c0       	rjmp	.+30     	; 0x3778 <SRVM_on+0x1ec>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    375a:	69 89       	ldd	r22, Y+17	; 0x11
    375c:	7a 89       	ldd	r23, Y+18	; 0x12
    375e:	8b 89       	ldd	r24, Y+19	; 0x13
    3760:	9c 89       	ldd	r25, Y+20	; 0x14
    3762:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3766:	dc 01       	movw	r26, r24
    3768:	cb 01       	movw	r24, r22
    376a:	88 8b       	std	Y+16, r24	; 0x10
    376c:	88 89       	ldd	r24, Y+16	; 0x10
    376e:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3770:	89 81       	ldd	r24, Y+1	; 0x01
    3772:	8a 95       	dec	r24
    3774:	f1 f7       	brne	.-4      	; 0x3772 <SRVM_on+0x1e6>
    3776:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(local_delay);
	DIO_setPinValue(DIO_PORTD,DIO_PIN5,DIO_PIN_LOW);
    3778:	83 e0       	ldi	r24, 0x03	; 3
    377a:	65 e0       	ldi	r22, 0x05	; 5
    377c:	40 e0       	ldi	r20, 0x00	; 0
    377e:	0e 94 9a 0c 	call	0x1934	; 0x1934 <DIO_setPinValue>


	//TMR1_init();
	//TMR1_setPWM_mode14(50,angle);
	//TMR1_start();
}
    3782:	6d 96       	adiw	r28, 0x1d	; 29
    3784:	0f b6       	in	r0, 0x3f	; 63
    3786:	f8 94       	cli
    3788:	de bf       	out	0x3e, r29	; 62
    378a:	0f be       	out	0x3f, r0	; 63
    378c:	cd bf       	out	0x3d, r28	; 61
    378e:	cf 91       	pop	r28
    3790:	df 91       	pop	r29
    3792:	08 95       	ret

00003794 <SRVM_stop>:
void SRVM_stop(void)
{
    3794:	df 93       	push	r29
    3796:	cf 93       	push	r28
    3798:	cd b7       	in	r28, 0x3d	; 61
    379a:	de b7       	in	r29, 0x3e	; 62
//TMR1_stop();
	DIO_setPinValue(DIO_PORTD,DIO_PIN5,DIO_PIN_LOW);
    379c:	83 e0       	ldi	r24, 0x03	; 3
    379e:	65 e0       	ldi	r22, 0x05	; 5
    37a0:	40 e0       	ldi	r20, 0x00	; 0
    37a2:	0e 94 9a 0c 	call	0x1934	; 0x1934 <DIO_setPinValue>
}
    37a6:	cf 91       	pop	r28
    37a8:	df 91       	pop	r29
    37aa:	08 95       	ret

000037ac <TMR1_init>:




void TMR1_init(u8 mode)
{
    37ac:	df 93       	push	r29
    37ae:	cf 93       	push	r28
    37b0:	00 d0       	rcall	.+0      	; 0x37b2 <TMR1_init+0x6>
    37b2:	0f 92       	push	r0
    37b4:	cd b7       	in	r28, 0x3d	; 61
    37b6:	de b7       	in	r29, 0x3e	; 62
    37b8:	89 83       	std	Y+1, r24	; 0x01
	//TIFR=0b00000000;
	//TIFR |= (1 << 0);
	//TIMSK |= (1 << 0);
	//GIR_enable();
	switch(mode)
    37ba:	89 81       	ldd	r24, Y+1	; 0x01
    37bc:	28 2f       	mov	r18, r24
    37be:	30 e0       	ldi	r19, 0x00	; 0
    37c0:	3b 83       	std	Y+3, r19	; 0x03
    37c2:	2a 83       	std	Y+2, r18	; 0x02
    37c4:	8a 81       	ldd	r24, Y+2	; 0x02
    37c6:	9b 81       	ldd	r25, Y+3	; 0x03
    37c8:	00 97       	sbiw	r24, 0x00	; 0
    37ca:	39 f1       	breq	.+78     	; 0x381a <TMR1_init+0x6e>
    37cc:	2a 81       	ldd	r18, Y+2	; 0x02
    37ce:	3b 81       	ldd	r19, Y+3	; 0x03
    37d0:	21 30       	cpi	r18, 0x01	; 1
    37d2:	31 05       	cpc	r19, r1
    37d4:	09 f0       	breq	.+2      	; 0x37d8 <TMR1_init+0x2c>
    37d6:	4b c0       	rjmp	.+150    	; 0x386e <TMR1_init+0xc2>
	{
	case normal_ICP:
	{
	//SELECT MODE=normal
	 CLR_BIT(TCCR1B,WGM13);
    37d8:	ae e4       	ldi	r26, 0x4E	; 78
    37da:	b0 e0       	ldi	r27, 0x00	; 0
    37dc:	ee e4       	ldi	r30, 0x4E	; 78
    37de:	f0 e0       	ldi	r31, 0x00	; 0
    37e0:	80 81       	ld	r24, Z
    37e2:	8f 7e       	andi	r24, 0xEF	; 239
    37e4:	8c 93       	st	X, r24
	 CLR_BIT(TCCR1B,WGM12);
    37e6:	ae e4       	ldi	r26, 0x4E	; 78
    37e8:	b0 e0       	ldi	r27, 0x00	; 0
    37ea:	ee e4       	ldi	r30, 0x4E	; 78
    37ec:	f0 e0       	ldi	r31, 0x00	; 0
    37ee:	80 81       	ld	r24, Z
    37f0:	87 7f       	andi	r24, 0xF7	; 247
    37f2:	8c 93       	st	X, r24
	 CLR_BIT(TCCR1A,WGM11);
    37f4:	af e4       	ldi	r26, 0x4F	; 79
    37f6:	b0 e0       	ldi	r27, 0x00	; 0
    37f8:	ef e4       	ldi	r30, 0x4F	; 79
    37fa:	f0 e0       	ldi	r31, 0x00	; 0
    37fc:	80 81       	ld	r24, Z
    37fe:	8d 7f       	andi	r24, 0xFD	; 253
    3800:	8c 93       	st	X, r24
	 CLR_BIT(TCCR1A,WGM10);
    3802:	af e4       	ldi	r26, 0x4F	; 79
    3804:	b0 e0       	ldi	r27, 0x00	; 0
    3806:	ef e4       	ldi	r30, 0x4F	; 79
    3808:	f0 e0       	ldi	r31, 0x00	; 0
    380a:	80 81       	ld	r24, Z
    380c:	8e 7f       	andi	r24, 0xFE	; 254
    380e:	8c 93       	st	X, r24
	 //clear counter
	 TCNT=0;
    3810:	ec e4       	ldi	r30, 0x4C	; 76
    3812:	f0 e0       	ldi	r31, 0x00	; 0
    3814:	11 82       	std	Z+1, r1	; 0x01
    3816:	10 82       	st	Z, r1
    3818:	2a c0       	rjmp	.+84     	; 0x386e <TMR1_init+0xc2>
	break;
	}
	case PWM:
	{
		//SELECT MODE=FAST PWM MODE 14
		 SET_BIT(TCCR1B,WGM13);
    381a:	ae e4       	ldi	r26, 0x4E	; 78
    381c:	b0 e0       	ldi	r27, 0x00	; 0
    381e:	ee e4       	ldi	r30, 0x4E	; 78
    3820:	f0 e0       	ldi	r31, 0x00	; 0
    3822:	80 81       	ld	r24, Z
    3824:	80 61       	ori	r24, 0x10	; 16
    3826:	8c 93       	st	X, r24
		 SET_BIT(TCCR1B,WGM12);
    3828:	ae e4       	ldi	r26, 0x4E	; 78
    382a:	b0 e0       	ldi	r27, 0x00	; 0
    382c:	ee e4       	ldi	r30, 0x4E	; 78
    382e:	f0 e0       	ldi	r31, 0x00	; 0
    3830:	80 81       	ld	r24, Z
    3832:	88 60       	ori	r24, 0x08	; 8
    3834:	8c 93       	st	X, r24
		 SET_BIT(TCCR1A,WGM11);
    3836:	af e4       	ldi	r26, 0x4F	; 79
    3838:	b0 e0       	ldi	r27, 0x00	; 0
    383a:	ef e4       	ldi	r30, 0x4F	; 79
    383c:	f0 e0       	ldi	r31, 0x00	; 0
    383e:	80 81       	ld	r24, Z
    3840:	82 60       	ori	r24, 0x02	; 2
    3842:	8c 93       	st	X, r24
		 CLR_BIT(TCCR1A,WGM10);
    3844:	af e4       	ldi	r26, 0x4F	; 79
    3846:	b0 e0       	ldi	r27, 0x00	; 0
    3848:	ef e4       	ldi	r30, 0x4F	; 79
    384a:	f0 e0       	ldi	r31, 0x00	; 0
    384c:	80 81       	ld	r24, Z
    384e:	8e 7f       	andi	r24, 0xFE	; 254
    3850:	8c 93       	st	X, r24
		 //non inverting
	     SET_BIT(TCCR1A,COM1A1);
    3852:	af e4       	ldi	r26, 0x4F	; 79
    3854:	b0 e0       	ldi	r27, 0x00	; 0
    3856:	ef e4       	ldi	r30, 0x4F	; 79
    3858:	f0 e0       	ldi	r31, 0x00	; 0
    385a:	80 81       	ld	r24, Z
    385c:	80 68       	ori	r24, 0x80	; 128
    385e:	8c 93       	st	X, r24
	     CLR_BIT(TCCR1A,COM1A0);
    3860:	af e4       	ldi	r26, 0x4F	; 79
    3862:	b0 e0       	ldi	r27, 0x00	; 0
    3864:	ef e4       	ldi	r30, 0x4F	; 79
    3866:	f0 e0       	ldi	r31, 0x00	; 0
    3868:	80 81       	ld	r24, Z
    386a:	8f 7b       	andi	r24, 0xBF	; 191
    386c:	8c 93       	st	X, r24
	     break;
	}
	}


}
    386e:	0f 90       	pop	r0
    3870:	0f 90       	pop	r0
    3872:	0f 90       	pop	r0
    3874:	cf 91       	pop	r28
    3876:	df 91       	pop	r29
    3878:	08 95       	ret

0000387a <TMR1_intEnable>:
void TMR1_intEnable(void)
{
    387a:	df 93       	push	r29
    387c:	cf 93       	push	r28
    387e:	cd b7       	in	r28, 0x3d	; 61
    3880:	de b7       	in	r29, 0x3e	; 62
	 //ENABLE ovf
	 SET_BIT(TIMSK,TOIE1);
    3882:	a9 e5       	ldi	r26, 0x59	; 89
    3884:	b0 e0       	ldi	r27, 0x00	; 0
    3886:	e9 e5       	ldi	r30, 0x59	; 89
    3888:	f0 e0       	ldi	r31, 0x00	; 0
    388a:	80 81       	ld	r24, Z
    388c:	91 81       	ldd	r25, Z+1	; 0x01
    388e:	84 60       	ori	r24, 0x04	; 4
    3890:	11 96       	adiw	r26, 0x01	; 1
    3892:	9c 93       	st	X, r25
    3894:	8e 93       	st	-X, r24
	 //ENABLE INPUT CAPTURE INTERRUPT
	 SET_BIT(TIMSK,TICIE1);
    3896:	a9 e5       	ldi	r26, 0x59	; 89
    3898:	b0 e0       	ldi	r27, 0x00	; 0
    389a:	e9 e5       	ldi	r30, 0x59	; 89
    389c:	f0 e0       	ldi	r31, 0x00	; 0
    389e:	80 81       	ld	r24, Z
    38a0:	91 81       	ldd	r25, Z+1	; 0x01
    38a2:	80 62       	ori	r24, 0x20	; 32
    38a4:	11 96       	adiw	r26, 0x01	; 1
    38a6:	9c 93       	st	X, r25
    38a8:	8e 93       	st	-X, r24
}
    38aa:	cf 91       	pop	r28
    38ac:	df 91       	pop	r29
    38ae:	08 95       	ret

000038b0 <TMR1_inputCapture>:
void TMR1_inputCapture(u8 EDGE)
{
    38b0:	df 93       	push	r29
    38b2:	cf 93       	push	r28
    38b4:	00 d0       	rcall	.+0      	; 0x38b6 <TMR1_inputCapture+0x6>
    38b6:	0f 92       	push	r0
    38b8:	cd b7       	in	r28, 0x3d	; 61
    38ba:	de b7       	in	r29, 0x3e	; 62
    38bc:	89 83       	std	Y+1, r24	; 0x01

switch(EDGE)
    38be:	89 81       	ldd	r24, Y+1	; 0x01
    38c0:	28 2f       	mov	r18, r24
    38c2:	30 e0       	ldi	r19, 0x00	; 0
    38c4:	3b 83       	std	Y+3, r19	; 0x03
    38c6:	2a 83       	std	Y+2, r18	; 0x02
    38c8:	8a 81       	ldd	r24, Y+2	; 0x02
    38ca:	9b 81       	ldd	r25, Y+3	; 0x03
    38cc:	00 97       	sbiw	r24, 0x00	; 0
    38ce:	31 f0       	breq	.+12     	; 0x38dc <TMR1_inputCapture+0x2c>
    38d0:	2a 81       	ldd	r18, Y+2	; 0x02
    38d2:	3b 81       	ldd	r19, Y+3	; 0x03
    38d4:	21 30       	cpi	r18, 0x01	; 1
    38d6:	31 05       	cpc	r19, r1
    38d8:	49 f0       	breq	.+18     	; 0x38ec <TMR1_inputCapture+0x3c>
    38da:	0f c0       	rjmp	.+30     	; 0x38fa <TMR1_inputCapture+0x4a>
{
case risingEdge:
{
	SET_BIT(TCCR1B,ICES1);
    38dc:	ae e4       	ldi	r26, 0x4E	; 78
    38de:	b0 e0       	ldi	r27, 0x00	; 0
    38e0:	ee e4       	ldi	r30, 0x4E	; 78
    38e2:	f0 e0       	ldi	r31, 0x00	; 0
    38e4:	80 81       	ld	r24, Z
    38e6:	80 64       	ori	r24, 0x40	; 64
    38e8:	8c 93       	st	X, r24
    38ea:	07 c0       	rjmp	.+14     	; 0x38fa <TMR1_inputCapture+0x4a>
	break;
}
case fallingEdge:
{
	CLR_BIT(TCCR1B,ICES1);
    38ec:	ae e4       	ldi	r26, 0x4E	; 78
    38ee:	b0 e0       	ldi	r27, 0x00	; 0
    38f0:	ee e4       	ldi	r30, 0x4E	; 78
    38f2:	f0 e0       	ldi	r31, 0x00	; 0
    38f4:	80 81       	ld	r24, Z
    38f6:	8f 7b       	andi	r24, 0xBF	; 191
    38f8:	8c 93       	st	X, r24


}


}
    38fa:	0f 90       	pop	r0
    38fc:	0f 90       	pop	r0
    38fe:	0f 90       	pop	r0
    3900:	cf 91       	pop	r28
    3902:	df 91       	pop	r29
    3904:	08 95       	ret

00003906 <TMR1_disableIC>:
void TMR1_disableIC(void)
{
    3906:	df 93       	push	r29
    3908:	cf 93       	push	r28
    390a:	cd b7       	in	r28, 0x3d	; 61
    390c:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK,TICIE1);
    390e:	a9 e5       	ldi	r26, 0x59	; 89
    3910:	b0 e0       	ldi	r27, 0x00	; 0
    3912:	e9 e5       	ldi	r30, 0x59	; 89
    3914:	f0 e0       	ldi	r31, 0x00	; 0
    3916:	80 81       	ld	r24, Z
    3918:	91 81       	ldd	r25, Z+1	; 0x01
    391a:	8f 7d       	andi	r24, 0xDF	; 223
    391c:	11 96       	adiw	r26, 0x01	; 1
    391e:	9c 93       	st	X, r25
    3920:	8e 93       	st	-X, r24
	CLR_BIT(TIMSK,TOIE1);
    3922:	a9 e5       	ldi	r26, 0x59	; 89
    3924:	b0 e0       	ldi	r27, 0x00	; 0
    3926:	e9 e5       	ldi	r30, 0x59	; 89
    3928:	f0 e0       	ldi	r31, 0x00	; 0
    392a:	80 81       	ld	r24, Z
    392c:	91 81       	ldd	r25, Z+1	; 0x01
    392e:	8b 7f       	andi	r24, 0xFB	; 251
    3930:	11 96       	adiw	r26, 0x01	; 1
    3932:	9c 93       	st	X, r25
    3934:	8e 93       	st	-X, r24


}
    3936:	cf 91       	pop	r28
    3938:	df 91       	pop	r29
    393a:	08 95       	ret

0000393c <TMR1_start>:
void TMR1_start(u8 mode)
{
    393c:	df 93       	push	r29
    393e:	cf 93       	push	r28
    3940:	00 d0       	rcall	.+0      	; 0x3942 <TMR1_start+0x6>
    3942:	0f 92       	push	r0
    3944:	cd b7       	in	r28, 0x3d	; 61
    3946:	de b7       	in	r29, 0x3e	; 62
    3948:	89 83       	std	Y+1, r24	; 0x01
	switch(mode)
    394a:	89 81       	ldd	r24, Y+1	; 0x01
    394c:	28 2f       	mov	r18, r24
    394e:	30 e0       	ldi	r19, 0x00	; 0
    3950:	3b 83       	std	Y+3, r19	; 0x03
    3952:	2a 83       	std	Y+2, r18	; 0x02
    3954:	8a 81       	ldd	r24, Y+2	; 0x02
    3956:	9b 81       	ldd	r25, Y+3	; 0x03
    3958:	00 97       	sbiw	r24, 0x00	; 0
    395a:	d9 f0       	breq	.+54     	; 0x3992 <TMR1_start+0x56>
    395c:	2a 81       	ldd	r18, Y+2	; 0x02
    395e:	3b 81       	ldd	r19, Y+3	; 0x03
    3960:	21 30       	cpi	r18, 0x01	; 1
    3962:	31 05       	cpc	r19, r1
    3964:	59 f5       	brne	.+86     	; 0x39bc <TMR1_start+0x80>
	{
	case normal_ICP:
	{
	//ICP mode
	CLR_BIT(TCCR1B,CS12);
    3966:	ae e4       	ldi	r26, 0x4E	; 78
    3968:	b0 e0       	ldi	r27, 0x00	; 0
    396a:	ee e4       	ldi	r30, 0x4E	; 78
    396c:	f0 e0       	ldi	r31, 0x00	; 0
    396e:	80 81       	ld	r24, Z
    3970:	8b 7f       	andi	r24, 0xFB	; 251
    3972:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B,CS11);
    3974:	ae e4       	ldi	r26, 0x4E	; 78
    3976:	b0 e0       	ldi	r27, 0x00	; 0
    3978:	ee e4       	ldi	r30, 0x4E	; 78
    397a:	f0 e0       	ldi	r31, 0x00	; 0
    397c:	80 81       	ld	r24, Z
    397e:	8d 7f       	andi	r24, 0xFD	; 253
    3980:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,CS10);
    3982:	ae e4       	ldi	r26, 0x4E	; 78
    3984:	b0 e0       	ldi	r27, 0x00	; 0
    3986:	ee e4       	ldi	r30, 0x4E	; 78
    3988:	f0 e0       	ldi	r31, 0x00	; 0
    398a:	80 81       	ld	r24, Z
    398c:	81 60       	ori	r24, 0x01	; 1
    398e:	8c 93       	st	X, r24
    3990:	15 c0       	rjmp	.+42     	; 0x39bc <TMR1_start+0x80>
	break;
	}
	case PWM:
	{
	//pwm
	CLR_BIT(TCCR1B,CS12);
    3992:	ae e4       	ldi	r26, 0x4E	; 78
    3994:	b0 e0       	ldi	r27, 0x00	; 0
    3996:	ee e4       	ldi	r30, 0x4E	; 78
    3998:	f0 e0       	ldi	r31, 0x00	; 0
    399a:	80 81       	ld	r24, Z
    399c:	8b 7f       	andi	r24, 0xFB	; 251
    399e:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,CS11);
    39a0:	ae e4       	ldi	r26, 0x4E	; 78
    39a2:	b0 e0       	ldi	r27, 0x00	; 0
    39a4:	ee e4       	ldi	r30, 0x4E	; 78
    39a6:	f0 e0       	ldi	r31, 0x00	; 0
    39a8:	80 81       	ld	r24, Z
    39aa:	82 60       	ori	r24, 0x02	; 2
    39ac:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,CS10);
    39ae:	ae e4       	ldi	r26, 0x4E	; 78
    39b0:	b0 e0       	ldi	r27, 0x00	; 0
    39b2:	ee e4       	ldi	r30, 0x4E	; 78
    39b4:	f0 e0       	ldi	r31, 0x00	; 0
    39b6:	80 81       	ld	r24, Z
    39b8:	81 60       	ori	r24, 0x01	; 1
    39ba:	8c 93       	st	X, r24
	break;
	}
	}

}
    39bc:	0f 90       	pop	r0
    39be:	0f 90       	pop	r0
    39c0:	0f 90       	pop	r0
    39c2:	cf 91       	pop	r28
    39c4:	df 91       	pop	r29
    39c6:	08 95       	ret

000039c8 <TMR1_setCompareMatchValueA>:

void TMR1_setCompareMatchValueA(u16 compareValue)
{
    39c8:	df 93       	push	r29
    39ca:	cf 93       	push	r28
    39cc:	00 d0       	rcall	.+0      	; 0x39ce <TMR1_setCompareMatchValueA+0x6>
    39ce:	cd b7       	in	r28, 0x3d	; 61
    39d0:	de b7       	in	r29, 0x3e	; 62
    39d2:	9a 83       	std	Y+2, r25	; 0x02
    39d4:	89 83       	std	Y+1, r24	; 0x01

	OCR1A=compareValue;
    39d6:	ea e4       	ldi	r30, 0x4A	; 74
    39d8:	f0 e0       	ldi	r31, 0x00	; 0
    39da:	89 81       	ldd	r24, Y+1	; 0x01
    39dc:	9a 81       	ldd	r25, Y+2	; 0x02
    39de:	91 83       	std	Z+1, r25	; 0x01
    39e0:	80 83       	st	Z, r24


}
    39e2:	0f 90       	pop	r0
    39e4:	0f 90       	pop	r0
    39e6:	cf 91       	pop	r28
    39e8:	df 91       	pop	r29
    39ea:	08 95       	ret

000039ec <TMR1_setPWM_mode14>:
void TMR1_setPWM_mode14(u16 freq_HZ,float duty)
{
    39ec:	0f 93       	push	r16
    39ee:	1f 93       	push	r17
    39f0:	df 93       	push	r29
    39f2:	cf 93       	push	r28
    39f4:	00 d0       	rcall	.+0      	; 0x39f6 <TMR1_setPWM_mode14+0xa>
    39f6:	00 d0       	rcall	.+0      	; 0x39f8 <TMR1_setPWM_mode14+0xc>
    39f8:	00 d0       	rcall	.+0      	; 0x39fa <TMR1_setPWM_mode14+0xe>
    39fa:	cd b7       	in	r28, 0x3d	; 61
    39fc:	de b7       	in	r29, 0x3e	; 62
    39fe:	9a 83       	std	Y+2, r25	; 0x02
    3a00:	89 83       	std	Y+1, r24	; 0x01
    3a02:	4b 83       	std	Y+3, r20	; 0x03
    3a04:	5c 83       	std	Y+4, r21	; 0x04
    3a06:	6d 83       	std	Y+5, r22	; 0x05
    3a08:	7e 83       	std	Y+6, r23	; 0x06
	if(duty<=100)
    3a0a:	6b 81       	ldd	r22, Y+3	; 0x03
    3a0c:	7c 81       	ldd	r23, Y+4	; 0x04
    3a0e:	8d 81       	ldd	r24, Y+5	; 0x05
    3a10:	9e 81       	ldd	r25, Y+6	; 0x06
    3a12:	20 e0       	ldi	r18, 0x00	; 0
    3a14:	30 e0       	ldi	r19, 0x00	; 0
    3a16:	48 ec       	ldi	r20, 0xC8	; 200
    3a18:	52 e4       	ldi	r21, 0x42	; 66
    3a1a:	0e 94 55 04 	call	0x8aa	; 0x8aa <__lesf2>
    3a1e:	18 16       	cp	r1, r24
    3a20:	0c f4       	brge	.+2      	; 0x3a24 <TMR1_setPWM_mode14+0x38>
    3a22:	4c c0       	rjmp	.+152    	; 0x3abc <TMR1_setPWM_mode14+0xd0>
	{
		ICR1=((1000000UL/freq_HZ)/4)-1;
    3a24:	06 e4       	ldi	r16, 0x46	; 70
    3a26:	10 e0       	ldi	r17, 0x00	; 0
    3a28:	89 81       	ldd	r24, Y+1	; 0x01
    3a2a:	9a 81       	ldd	r25, Y+2	; 0x02
    3a2c:	9c 01       	movw	r18, r24
    3a2e:	40 e0       	ldi	r20, 0x00	; 0
    3a30:	50 e0       	ldi	r21, 0x00	; 0
    3a32:	80 e9       	ldi	r24, 0x90	; 144
    3a34:	90 ed       	ldi	r25, 0xD0	; 208
    3a36:	a3 e0       	ldi	r26, 0x03	; 3
    3a38:	b0 e0       	ldi	r27, 0x00	; 0
    3a3a:	bc 01       	movw	r22, r24
    3a3c:	cd 01       	movw	r24, r26
    3a3e:	0e 94 b9 21 	call	0x4372	; 0x4372 <__udivmodsi4>
    3a42:	da 01       	movw	r26, r20
    3a44:	c9 01       	movw	r24, r18
    3a46:	01 97       	sbiw	r24, 0x01	; 1
    3a48:	f8 01       	movw	r30, r16
    3a4a:	91 83       	std	Z+1, r25	; 0x01
    3a4c:	80 83       	st	Z, r24
		//non inverting and time =4 microsec
		OCR1A=((duty*(ICR1+1))/100)-1;
    3a4e:	0a e4       	ldi	r16, 0x4A	; 74
    3a50:	10 e0       	ldi	r17, 0x00	; 0
    3a52:	e6 e4       	ldi	r30, 0x46	; 70
    3a54:	f0 e0       	ldi	r31, 0x00	; 0
    3a56:	80 81       	ld	r24, Z
    3a58:	91 81       	ldd	r25, Z+1	; 0x01
    3a5a:	01 96       	adiw	r24, 0x01	; 1
    3a5c:	cc 01       	movw	r24, r24
    3a5e:	a0 e0       	ldi	r26, 0x00	; 0
    3a60:	b0 e0       	ldi	r27, 0x00	; 0
    3a62:	bc 01       	movw	r22, r24
    3a64:	cd 01       	movw	r24, r26
    3a66:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__floatunsisf>
    3a6a:	dc 01       	movw	r26, r24
    3a6c:	cb 01       	movw	r24, r22
    3a6e:	bc 01       	movw	r22, r24
    3a70:	cd 01       	movw	r24, r26
    3a72:	2b 81       	ldd	r18, Y+3	; 0x03
    3a74:	3c 81       	ldd	r19, Y+4	; 0x04
    3a76:	4d 81       	ldd	r20, Y+5	; 0x05
    3a78:	5e 81       	ldd	r21, Y+6	; 0x06
    3a7a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a7e:	dc 01       	movw	r26, r24
    3a80:	cb 01       	movw	r24, r22
    3a82:	bc 01       	movw	r22, r24
    3a84:	cd 01       	movw	r24, r26
    3a86:	20 e0       	ldi	r18, 0x00	; 0
    3a88:	30 e0       	ldi	r19, 0x00	; 0
    3a8a:	48 ec       	ldi	r20, 0xC8	; 200
    3a8c:	52 e4       	ldi	r21, 0x42	; 66
    3a8e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3a92:	dc 01       	movw	r26, r24
    3a94:	cb 01       	movw	r24, r22
    3a96:	bc 01       	movw	r22, r24
    3a98:	cd 01       	movw	r24, r26
    3a9a:	20 e0       	ldi	r18, 0x00	; 0
    3a9c:	30 e0       	ldi	r19, 0x00	; 0
    3a9e:	40 e8       	ldi	r20, 0x80	; 128
    3aa0:	5f e3       	ldi	r21, 0x3F	; 63
    3aa2:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    3aa6:	dc 01       	movw	r26, r24
    3aa8:	cb 01       	movw	r24, r22
    3aaa:	bc 01       	movw	r22, r24
    3aac:	cd 01       	movw	r24, r26
    3aae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ab2:	dc 01       	movw	r26, r24
    3ab4:	cb 01       	movw	r24, r22
    3ab6:	f8 01       	movw	r30, r16
    3ab8:	91 83       	std	Z+1, r25	; 0x01
    3aba:	80 83       	st	Z, r24




	}
}
    3abc:	26 96       	adiw	r28, 0x06	; 6
    3abe:	0f b6       	in	r0, 0x3f	; 63
    3ac0:	f8 94       	cli
    3ac2:	de bf       	out	0x3e, r29	; 62
    3ac4:	0f be       	out	0x3f, r0	; 63
    3ac6:	cd bf       	out	0x3d, r28	; 61
    3ac8:	cf 91       	pop	r28
    3aca:	df 91       	pop	r29
    3acc:	1f 91       	pop	r17
    3ace:	0f 91       	pop	r16
    3ad0:	08 95       	ret

00003ad2 <TMR1_stop>:

void TMR1_stop(void)
{
    3ad2:	df 93       	push	r29
    3ad4:	cf 93       	push	r28
    3ad6:	cd b7       	in	r28, 0x3d	; 61
    3ad8:	de b7       	in	r29, 0x3e	; 62

//clear clock
     CLR_BIT(TCCR1B,CS12);
    3ada:	ae e4       	ldi	r26, 0x4E	; 78
    3adc:	b0 e0       	ldi	r27, 0x00	; 0
    3ade:	ee e4       	ldi	r30, 0x4E	; 78
    3ae0:	f0 e0       	ldi	r31, 0x00	; 0
    3ae2:	80 81       	ld	r24, Z
    3ae4:	8b 7f       	andi	r24, 0xFB	; 251
    3ae6:	8c 93       	st	X, r24
	 CLR_BIT(TCCR1B,CS11);
    3ae8:	ae e4       	ldi	r26, 0x4E	; 78
    3aea:	b0 e0       	ldi	r27, 0x00	; 0
    3aec:	ee e4       	ldi	r30, 0x4E	; 78
    3aee:	f0 e0       	ldi	r31, 0x00	; 0
    3af0:	80 81       	ld	r24, Z
    3af2:	8d 7f       	andi	r24, 0xFD	; 253
    3af4:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B,CS10);
    3af6:	ae e4       	ldi	r26, 0x4E	; 78
    3af8:	b0 e0       	ldi	r27, 0x00	; 0
    3afa:	ee e4       	ldi	r30, 0x4E	; 78
    3afc:	f0 e0       	ldi	r31, 0x00	; 0
    3afe:	80 81       	ld	r24, Z
    3b00:	8e 7f       	andi	r24, 0xFE	; 254
    3b02:	8c 93       	st	X, r24



}
    3b04:	cf 91       	pop	r28
    3b06:	df 91       	pop	r29
    3b08:	08 95       	ret

00003b0a <USS_init>:
static volatile u16 capt1,capt2;
static volatile u8 flag=0;
static volatile u16 ov;
static volatile u16 ovf;
void USS_init(void)
{
    3b0a:	df 93       	push	r29
    3b0c:	cf 93       	push	r28
    3b0e:	cd b7       	in	r28, 0x3d	; 61
    3b10:	de b7       	in	r29, 0x3e	; 62

	//LCD_init();

	DIO_setPinDirection(TRIG_PORT,TRIG_PIN,DIO_PIN_OUTPUT);
    3b12:	83 e0       	ldi	r24, 0x03	; 3
    3b14:	61 e0       	ldi	r22, 0x01	; 1
    3b16:	41 e0       	ldi	r20, 0x01	; 1
    3b18:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <DIO_setPinDirection>
	DIO_setPinDirection(ECHO_PORT,ECHO_PIN,DIO_PIN_INPUT);
    3b1c:	83 e0       	ldi	r24, 0x03	; 3
    3b1e:	66 e0       	ldi	r22, 0x06	; 6
    3b20:	40 e0       	ldi	r20, 0x00	; 0
    3b22:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <DIO_setPinDirection>
	//DIO_activePinInPullUpResistance(ECHO_PORT,ECHO_PIN);
	GIR_disable();
    3b26:	0e 94 69 0f 	call	0x1ed2	; 0x1ed2 <GIR_disable>
	TMR1_init(normal_ICP);
    3b2a:	81 e0       	ldi	r24, 0x01	; 1
    3b2c:	0e 94 d6 1b 	call	0x37ac	; 0x37ac <TMR1_init>
	TMR1_intEnable();
    3b30:	0e 94 3d 1c 	call	0x387a	; 0x387a <TMR1_intEnable>
	TMR1_inputCapture(risingEdge);
    3b34:	80 e0       	ldi	r24, 0x00	; 0
    3b36:	0e 94 58 1c 	call	0x38b0	; 0x38b0 <TMR1_inputCapture>
	TMR1_start(normal_ICP);
    3b3a:	81 e0       	ldi	r24, 0x01	; 1
    3b3c:	0e 94 9e 1c 	call	0x393c	; 0x393c <TMR1_start>
	GIR_enable();
    3b40:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <GIR_enable>
}
    3b44:	cf 91       	pop	r28
    3b46:	df 91       	pop	r29
    3b48:	08 95       	ret

00003b4a <GetDistance>:
void GetDistance(u16*dist)
{
    3b4a:	df 93       	push	r29
    3b4c:	cf 93       	push	r28
    3b4e:	cd b7       	in	r28, 0x3d	; 61
    3b50:	de b7       	in	r29, 0x3e	; 62
    3b52:	60 97       	sbiw	r28, 0x10	; 16
    3b54:	0f b6       	in	r0, 0x3f	; 63
    3b56:	f8 94       	cli
    3b58:	de bf       	out	0x3e, r29	; 62
    3b5a:	0f be       	out	0x3f, r0	; 63
    3b5c:	cd bf       	out	0x3d, r28	; 61
    3b5e:	98 8b       	std	Y+16, r25	; 0x10
    3b60:	8f 87       	std	Y+15, r24	; 0x0f
   static u16 count;
	static u16 distance;

    	DIO_setPinValue(TRIG_PORT,TRIG_PIN,DIO_PIN_HIGH);
    3b62:	83 e0       	ldi	r24, 0x03	; 3
    3b64:	61 e0       	ldi	r22, 0x01	; 1
    3b66:	41 e0       	ldi	r20, 0x01	; 1
    3b68:	0e 94 9a 0c 	call	0x1934	; 0x1934 <DIO_setPinValue>
    3b6c:	80 e0       	ldi	r24, 0x00	; 0
    3b6e:	90 e0       	ldi	r25, 0x00	; 0
    3b70:	a0 e2       	ldi	r26, 0x20	; 32
    3b72:	b1 e4       	ldi	r27, 0x41	; 65
    3b74:	8b 87       	std	Y+11, r24	; 0x0b
    3b76:	9c 87       	std	Y+12, r25	; 0x0c
    3b78:	ad 87       	std	Y+13, r26	; 0x0d
    3b7a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3b7c:	6b 85       	ldd	r22, Y+11	; 0x0b
    3b7e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3b80:	8d 85       	ldd	r24, Y+13	; 0x0d
    3b82:	9e 85       	ldd	r25, Y+14	; 0x0e
    3b84:	20 e0       	ldi	r18, 0x00	; 0
    3b86:	30 e0       	ldi	r19, 0x00	; 0
    3b88:	4a e7       	ldi	r20, 0x7A	; 122
    3b8a:	55 e4       	ldi	r21, 0x45	; 69
    3b8c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b90:	dc 01       	movw	r26, r24
    3b92:	cb 01       	movw	r24, r22
    3b94:	8f 83       	std	Y+7, r24	; 0x07
    3b96:	98 87       	std	Y+8, r25	; 0x08
    3b98:	a9 87       	std	Y+9, r26	; 0x09
    3b9a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3b9c:	6f 81       	ldd	r22, Y+7	; 0x07
    3b9e:	78 85       	ldd	r23, Y+8	; 0x08
    3ba0:	89 85       	ldd	r24, Y+9	; 0x09
    3ba2:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ba4:	20 e0       	ldi	r18, 0x00	; 0
    3ba6:	30 e0       	ldi	r19, 0x00	; 0
    3ba8:	40 e8       	ldi	r20, 0x80	; 128
    3baa:	5f e3       	ldi	r21, 0x3F	; 63
    3bac:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3bb0:	88 23       	and	r24, r24
    3bb2:	2c f4       	brge	.+10     	; 0x3bbe <GetDistance+0x74>
		__ticks = 1;
    3bb4:	81 e0       	ldi	r24, 0x01	; 1
    3bb6:	90 e0       	ldi	r25, 0x00	; 0
    3bb8:	9e 83       	std	Y+6, r25	; 0x06
    3bba:	8d 83       	std	Y+5, r24	; 0x05
    3bbc:	3f c0       	rjmp	.+126    	; 0x3c3c <GetDistance+0xf2>
	else if (__tmp > 65535)
    3bbe:	6f 81       	ldd	r22, Y+7	; 0x07
    3bc0:	78 85       	ldd	r23, Y+8	; 0x08
    3bc2:	89 85       	ldd	r24, Y+9	; 0x09
    3bc4:	9a 85       	ldd	r25, Y+10	; 0x0a
    3bc6:	20 e0       	ldi	r18, 0x00	; 0
    3bc8:	3f ef       	ldi	r19, 0xFF	; 255
    3bca:	4f e7       	ldi	r20, 0x7F	; 127
    3bcc:	57 e4       	ldi	r21, 0x47	; 71
    3bce:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3bd2:	18 16       	cp	r1, r24
    3bd4:	4c f5       	brge	.+82     	; 0x3c28 <GetDistance+0xde>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3bd6:	6b 85       	ldd	r22, Y+11	; 0x0b
    3bd8:	7c 85       	ldd	r23, Y+12	; 0x0c
    3bda:	8d 85       	ldd	r24, Y+13	; 0x0d
    3bdc:	9e 85       	ldd	r25, Y+14	; 0x0e
    3bde:	20 e0       	ldi	r18, 0x00	; 0
    3be0:	30 e0       	ldi	r19, 0x00	; 0
    3be2:	40 e2       	ldi	r20, 0x20	; 32
    3be4:	51 e4       	ldi	r21, 0x41	; 65
    3be6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3bea:	dc 01       	movw	r26, r24
    3bec:	cb 01       	movw	r24, r22
    3bee:	bc 01       	movw	r22, r24
    3bf0:	cd 01       	movw	r24, r26
    3bf2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3bf6:	dc 01       	movw	r26, r24
    3bf8:	cb 01       	movw	r24, r22
    3bfa:	9e 83       	std	Y+6, r25	; 0x06
    3bfc:	8d 83       	std	Y+5, r24	; 0x05
    3bfe:	0f c0       	rjmp	.+30     	; 0x3c1e <GetDistance+0xd4>
    3c00:	80 e9       	ldi	r24, 0x90	; 144
    3c02:	91 e0       	ldi	r25, 0x01	; 1
    3c04:	9c 83       	std	Y+4, r25	; 0x04
    3c06:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3c08:	8b 81       	ldd	r24, Y+3	; 0x03
    3c0a:	9c 81       	ldd	r25, Y+4	; 0x04
    3c0c:	01 97       	sbiw	r24, 0x01	; 1
    3c0e:	f1 f7       	brne	.-4      	; 0x3c0c <GetDistance+0xc2>
    3c10:	9c 83       	std	Y+4, r25	; 0x04
    3c12:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c14:	8d 81       	ldd	r24, Y+5	; 0x05
    3c16:	9e 81       	ldd	r25, Y+6	; 0x06
    3c18:	01 97       	sbiw	r24, 0x01	; 1
    3c1a:	9e 83       	std	Y+6, r25	; 0x06
    3c1c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3c1e:	8d 81       	ldd	r24, Y+5	; 0x05
    3c20:	9e 81       	ldd	r25, Y+6	; 0x06
    3c22:	00 97       	sbiw	r24, 0x00	; 0
    3c24:	69 f7       	brne	.-38     	; 0x3c00 <GetDistance+0xb6>
    3c26:	14 c0       	rjmp	.+40     	; 0x3c50 <GetDistance+0x106>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3c28:	6f 81       	ldd	r22, Y+7	; 0x07
    3c2a:	78 85       	ldd	r23, Y+8	; 0x08
    3c2c:	89 85       	ldd	r24, Y+9	; 0x09
    3c2e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c34:	dc 01       	movw	r26, r24
    3c36:	cb 01       	movw	r24, r22
    3c38:	9e 83       	std	Y+6, r25	; 0x06
    3c3a:	8d 83       	std	Y+5, r24	; 0x05
    3c3c:	8d 81       	ldd	r24, Y+5	; 0x05
    3c3e:	9e 81       	ldd	r25, Y+6	; 0x06
    3c40:	9a 83       	std	Y+2, r25	; 0x02
    3c42:	89 83       	std	Y+1, r24	; 0x01
    3c44:	89 81       	ldd	r24, Y+1	; 0x01
    3c46:	9a 81       	ldd	r25, Y+2	; 0x02
    3c48:	01 97       	sbiw	r24, 0x01	; 1
    3c4a:	f1 f7       	brne	.-4      	; 0x3c48 <GetDistance+0xfe>
    3c4c:	9a 83       	std	Y+2, r25	; 0x02
    3c4e:	89 83       	std	Y+1, r24	; 0x01
    		_delay_ms(10);
    		DIO_setPinValue(TRIG_PORT,TRIG_PIN,DIO_PIN_LOW);
    3c50:	83 e0       	ldi	r24, 0x03	; 3
    3c52:	61 e0       	ldi	r22, 0x01	; 1
    3c54:	40 e0       	ldi	r20, 0x00	; 0
    3c56:	0e 94 9a 0c 	call	0x1934	; 0x1934 <DIO_setPinValue>
		if(flag==2)
    3c5a:	80 91 82 01 	lds	r24, 0x0182
    3c5e:	82 30       	cpi	r24, 0x02	; 2
    3c60:	09 f0       	breq	.+2      	; 0x3c64 <GetDistance+0x11a>
    3c62:	71 c0       	rjmp	.+226    	; 0x3d46 <GetDistance+0x1fc>
		{
			flag=0;
    3c64:	10 92 82 01 	sts	0x0182, r1
			//time -->count:time2-tim1 *overflow that happened during cycle *tick time*ticks
			count = ((unsigned long)capt2+(unsigned long)(ovf*65536))-(unsigned long)capt1;
    3c68:	80 91 8d 01 	lds	r24, 0x018D
    3c6c:	90 91 8e 01 	lds	r25, 0x018E
    3c70:	cc 01       	movw	r24, r24
    3c72:	a0 e0       	ldi	r26, 0x00	; 0
    3c74:	b0 e0       	ldi	r27, 0x00	; 0
    3c76:	dc 01       	movw	r26, r24
    3c78:	99 27       	eor	r25, r25
    3c7a:	88 27       	eor	r24, r24
    3c7c:	9c 01       	movw	r18, r24
    3c7e:	80 91 89 01 	lds	r24, 0x0189
    3c82:	90 91 8a 01 	lds	r25, 0x018A
    3c86:	28 0f       	add	r18, r24
    3c88:	39 1f       	adc	r19, r25
    3c8a:	80 91 87 01 	lds	r24, 0x0187
    3c8e:	90 91 88 01 	lds	r25, 0x0188
    3c92:	a9 01       	movw	r20, r18
    3c94:	48 1b       	sub	r20, r24
    3c96:	59 0b       	sbc	r21, r25
    3c98:	ca 01       	movw	r24, r20
    3c9a:	90 93 86 01 	sts	0x0186, r25
    3c9e:	80 93 85 01 	sts	0x0185, r24
			//distance =time/speed of ultrasonic wave
			distance = (double)count/932.95;
    3ca2:	80 91 85 01 	lds	r24, 0x0185
    3ca6:	90 91 86 01 	lds	r25, 0x0186
    3caa:	cc 01       	movw	r24, r24
    3cac:	a0 e0       	ldi	r26, 0x00	; 0
    3cae:	b0 e0       	ldi	r27, 0x00	; 0
    3cb0:	bc 01       	movw	r22, r24
    3cb2:	cd 01       	movw	r24, r26
    3cb4:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__floatunsisf>
    3cb8:	dc 01       	movw	r26, r24
    3cba:	cb 01       	movw	r24, r22
    3cbc:	bc 01       	movw	r22, r24
    3cbe:	cd 01       	movw	r24, r26
    3cc0:	2d ec       	ldi	r18, 0xCD	; 205
    3cc2:	3c e3       	ldi	r19, 0x3C	; 60
    3cc4:	49 e6       	ldi	r20, 0x69	; 105
    3cc6:	54 e4       	ldi	r21, 0x44	; 68
    3cc8:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3ccc:	dc 01       	movw	r26, r24
    3cce:	cb 01       	movw	r24, r22
    3cd0:	bc 01       	movw	r22, r24
    3cd2:	cd 01       	movw	r24, r26
    3cd4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3cd8:	dc 01       	movw	r26, r24
    3cda:	cb 01       	movw	r24, r22
    3cdc:	90 93 84 01 	sts	0x0184, r25
    3ce0:	80 93 83 01 	sts	0x0183, r24
if(distance>=2 && distance<=80)
    3ce4:	80 91 83 01 	lds	r24, 0x0183
    3ce8:	90 91 84 01 	lds	r25, 0x0184
    3cec:	82 30       	cpi	r24, 0x02	; 2
    3cee:	91 05       	cpc	r25, r1
    3cf0:	80 f0       	brcs	.+32     	; 0x3d12 <GetDistance+0x1c8>
    3cf2:	80 91 83 01 	lds	r24, 0x0183
    3cf6:	90 91 84 01 	lds	r25, 0x0184
    3cfa:	81 35       	cpi	r24, 0x51	; 81
    3cfc:	91 05       	cpc	r25, r1
    3cfe:	48 f4       	brcc	.+18     	; 0x3d12 <GetDistance+0x1c8>
{
			*dist=distance;
    3d00:	80 91 83 01 	lds	r24, 0x0183
    3d04:	90 91 84 01 	lds	r25, 0x0184
    3d08:	ef 85       	ldd	r30, Y+15	; 0x0f
    3d0a:	f8 89       	ldd	r31, Y+16	; 0x10
    3d0c:	91 83       	std	Z+1, r25	; 0x01
    3d0e:	80 83       	st	Z, r24
    3d10:	0d c0       	rjmp	.+26     	; 0x3d2c <GetDistance+0x1e2>
}
else if(distance>90)
    3d12:	80 91 83 01 	lds	r24, 0x0183
    3d16:	90 91 84 01 	lds	r25, 0x0184
    3d1a:	8b 35       	cpi	r24, 0x5B	; 91
    3d1c:	91 05       	cpc	r25, r1
    3d1e:	30 f0       	brcs	.+12     	; 0x3d2c <GetDistance+0x1e2>
{
	*dist=100;
    3d20:	ef 85       	ldd	r30, Y+15	; 0x0f
    3d22:	f8 89       	ldd	r31, Y+16	; 0x10
    3d24:	84 e6       	ldi	r24, 0x64	; 100
    3d26:	90 e0       	ldi	r25, 0x00	; 0
    3d28:	91 83       	std	Z+1, r25	; 0x01
    3d2a:	80 83       	st	Z, r24
}
			ovf=0;ov=0;
    3d2c:	10 92 8e 01 	sts	0x018E, r1
    3d30:	10 92 8d 01 	sts	0x018D, r1
    3d34:	10 92 8c 01 	sts	0x018C, r1
    3d38:	10 92 8b 01 	sts	0x018B, r1

			TMR1_intEnable();
    3d3c:	0e 94 3d 1c 	call	0x387a	; 0x387a <TMR1_intEnable>
			TMR1_inputCapture(risingEdge);
    3d40:	80 e0       	ldi	r24, 0x00	; 0
    3d42:	0e 94 58 1c 	call	0x38b0	; 0x38b0 <TMR1_inputCapture>


}
}
    3d46:	60 96       	adiw	r28, 0x10	; 16
    3d48:	0f b6       	in	r0, 0x3f	; 63
    3d4a:	f8 94       	cli
    3d4c:	de bf       	out	0x3e, r29	; 62
    3d4e:	0f be       	out	0x3f, r0	; 63
    3d50:	cd bf       	out	0x3d, r28	; 61
    3d52:	cf 91       	pop	r28
    3d54:	df 91       	pop	r29
    3d56:	08 95       	ret

00003d58 <USS_stop>:
void USS_stop(void)
{
    3d58:	df 93       	push	r29
    3d5a:	cf 93       	push	r28
    3d5c:	cd b7       	in	r28, 0x3d	; 61
    3d5e:	de b7       	in	r29, 0x3e	; 62
	TMR1_stop();
    3d60:	0e 94 69 1d 	call	0x3ad2	; 0x3ad2 <TMR1_stop>
}
    3d64:	cf 91       	pop	r28
    3d66:	df 91       	pop	r29
    3d68:	08 95       	ret

00003d6a <__vector_9>:

void __vector_9(void)__attribute__((signal));
void __vector_9(void)
{
    3d6a:	1f 92       	push	r1
    3d6c:	0f 92       	push	r0
    3d6e:	0f b6       	in	r0, 0x3f	; 63
    3d70:	0f 92       	push	r0
    3d72:	11 24       	eor	r1, r1
    3d74:	8f 93       	push	r24
    3d76:	9f 93       	push	r25
    3d78:	df 93       	push	r29
    3d7a:	cf 93       	push	r28
    3d7c:	cd b7       	in	r28, 0x3d	; 61
    3d7e:	de b7       	in	r29, 0x3e	; 62
	ov++;
    3d80:	80 91 8b 01 	lds	r24, 0x018B
    3d84:	90 91 8c 01 	lds	r25, 0x018C
    3d88:	01 96       	adiw	r24, 0x01	; 1
    3d8a:	90 93 8c 01 	sts	0x018C, r25
    3d8e:	80 93 8b 01 	sts	0x018B, r24
}
    3d92:	cf 91       	pop	r28
    3d94:	df 91       	pop	r29
    3d96:	9f 91       	pop	r25
    3d98:	8f 91       	pop	r24
    3d9a:	0f 90       	pop	r0
    3d9c:	0f be       	out	0x3f, r0	; 63
    3d9e:	0f 90       	pop	r0
    3da0:	1f 90       	pop	r1
    3da2:	18 95       	reti

00003da4 <__vector_6>:

void __vector_6(void)__attribute__((signal));
void __vector_6(void)
{
    3da4:	1f 92       	push	r1
    3da6:	0f 92       	push	r0
    3da8:	0f b6       	in	r0, 0x3f	; 63
    3daa:	0f 92       	push	r0
    3dac:	11 24       	eor	r1, r1
    3dae:	2f 93       	push	r18
    3db0:	3f 93       	push	r19
    3db2:	4f 93       	push	r20
    3db4:	5f 93       	push	r21
    3db6:	6f 93       	push	r22
    3db8:	7f 93       	push	r23
    3dba:	8f 93       	push	r24
    3dbc:	9f 93       	push	r25
    3dbe:	af 93       	push	r26
    3dc0:	bf 93       	push	r27
    3dc2:	ef 93       	push	r30
    3dc4:	ff 93       	push	r31
    3dc6:	df 93       	push	r29
    3dc8:	cf 93       	push	r28
    3dca:	cd b7       	in	r28, 0x3d	; 61
    3dcc:	de b7       	in	r29, 0x3e	; 62
	if(flag==0)
    3dce:	80 91 82 01 	lds	r24, 0x0182
    3dd2:	88 23       	and	r24, r24
    3dd4:	81 f4       	brne	.+32     	; 0x3df6 <__vector_6+0x52>
	{
		//time 1-->rising edge
		capt1=ICR1;
    3dd6:	e6 e4       	ldi	r30, 0x46	; 70
    3dd8:	f0 e0       	ldi	r31, 0x00	; 0
    3dda:	80 81       	ld	r24, Z
    3ddc:	91 81       	ldd	r25, Z+1	; 0x01
    3dde:	90 93 88 01 	sts	0x0188, r25
    3de2:	80 93 87 01 	sts	0x0187, r24
		TMR1_inputCapture(fallingEdge);
    3de6:	81 e0       	ldi	r24, 0x01	; 1
    3de8:	0e 94 58 1c 	call	0x38b0	; 0x38b0 <TMR1_inputCapture>
		ov=0;
    3dec:	10 92 8c 01 	sts	0x018C, r1
    3df0:	10 92 8b 01 	sts	0x018B, r1
    3df4:	16 c0       	rjmp	.+44     	; 0x3e22 <__vector_6+0x7e>
	}else if(flag==1)
    3df6:	80 91 82 01 	lds	r24, 0x0182
    3dfa:	81 30       	cpi	r24, 0x01	; 1
    3dfc:	91 f4       	brne	.+36     	; 0x3e22 <__vector_6+0x7e>
	{
		//time2-->falling edge
		capt2=ICR1;
    3dfe:	e6 e4       	ldi	r30, 0x46	; 70
    3e00:	f0 e0       	ldi	r31, 0x00	; 0
    3e02:	80 81       	ld	r24, Z
    3e04:	91 81       	ldd	r25, Z+1	; 0x01
    3e06:	90 93 8a 01 	sts	0x018A, r25
    3e0a:	80 93 89 01 	sts	0x0189, r24
		ovf=ov;
    3e0e:	80 91 8b 01 	lds	r24, 0x018B
    3e12:	90 91 8c 01 	lds	r25, 0x018C
    3e16:	90 93 8e 01 	sts	0x018E, r25
    3e1a:	80 93 8d 01 	sts	0x018D, r24
		TMR1_disableIC();
    3e1e:	0e 94 83 1c 	call	0x3906	; 0x3906 <TMR1_disableIC>
	}
	flag++;
    3e22:	80 91 82 01 	lds	r24, 0x0182
    3e26:	8f 5f       	subi	r24, 0xFF	; 255
    3e28:	80 93 82 01 	sts	0x0182, r24
}
    3e2c:	cf 91       	pop	r28
    3e2e:	df 91       	pop	r29
    3e30:	ff 91       	pop	r31
    3e32:	ef 91       	pop	r30
    3e34:	bf 91       	pop	r27
    3e36:	af 91       	pop	r26
    3e38:	9f 91       	pop	r25
    3e3a:	8f 91       	pop	r24
    3e3c:	7f 91       	pop	r23
    3e3e:	6f 91       	pop	r22
    3e40:	5f 91       	pop	r21
    3e42:	4f 91       	pop	r20
    3e44:	3f 91       	pop	r19
    3e46:	2f 91       	pop	r18
    3e48:	0f 90       	pop	r0
    3e4a:	0f be       	out	0x3f, r0	; 63
    3e4c:	0f 90       	pop	r0
    3e4e:	1f 90       	pop	r1
    3e50:	18 95       	reti

00003e52 <main>:
static u8 f4=0;
void check_180Direct(void);
void noObstecaleDirection(void);
void GoToNoObstacle(void);
int main(void)
{
    3e52:	df 93       	push	r29
    3e54:	cf 93       	push	r28
    3e56:	cd b7       	in	r28, 0x3d	; 61
    3e58:	de b7       	in	r29, 0x3e	; 62


//initiating the ultra sonic sensor amd the servo motor
	 SRVM_init();
    3e5a:	0e 94 ba 1a 	call	0x3574	; 0x3574 <SRVM_init>
	 USS_init();
    3e5e:	0e 94 85 1d 	call	0x3b0a	; 0x3b0a <USS_init>
	 LCD_init();
    3e62:	0e 94 77 0f 	call	0x1eee	; 0x1eee <LCD_init>
    3e66:	02 c0       	rjmp	.+4      	; 0x3e6c <main+0x1a>
	while (1)
		{
//there are 3 sw flags to make sure that the functiion gets executed before jumping on the next function
		while(!f1)
		{
		check_180Direct();//the uss checks the 3 directions then saves them
    3e68:	0e 94 69 1f 	call	0x3ed2	; 0x3ed2 <check_180Direct>
	 LCD_init();

	while (1)
		{
//there are 3 sw flags to make sure that the functiion gets executed before jumping on the next function
		while(!f1)
    3e6c:	80 91 99 01 	lds	r24, 0x0199
    3e70:	88 23       	and	r24, r24
    3e72:	d1 f3       	breq	.-12     	; 0x3e68 <main+0x16>
		{
		check_180Direct();//the uss checks the 3 directions then saves them
		}
f1=0;//clearing the flags
    3e74:	10 92 99 01 	sts	0x0199, r1
    3e78:	02 c0       	rjmp	.+4      	; 0x3e7e <main+0x2c>
while(!f2)
{
		noObstecaleDirection();//a function that figures the best way for the car to take
    3e7a:	0e 94 02 21 	call	0x4204	; 0x4204 <noObstecaleDirection>
		while(!f1)
		{
		check_180Direct();//the uss checks the 3 directions then saves them
		}
f1=0;//clearing the flags
while(!f2)
    3e7e:	80 91 9a 01 	lds	r24, 0x019A
    3e82:	88 23       	and	r24, r24
    3e84:	d1 f3       	breq	.-12     	; 0x3e7a <main+0x28>
{
		noObstecaleDirection();//a function that figures the best way for the car to take
}
f2=0;
    3e86:	10 92 9a 01 	sts	0x019A, r1
    3e8a:	1c c0       	rjmp	.+56     	; 0x3ec4 <main+0x72>
//clearing the flags
		while(!f4)
		{//this while loop makes sure that car stops if it finds an obstacle the program will start over
			GetDistance(&flag_dist);
    3e8c:	8f e8       	ldi	r24, 0x8F	; 143
    3e8e:	91 e0       	ldi	r25, 0x01	; 1
    3e90:	0e 94 a5 1d 	call	0x3b4a	; 0x3b4a <GetDistance>
			if(flag_dist<=10)
    3e94:	80 91 8f 01 	lds	r24, 0x018F
    3e98:	90 91 90 01 	lds	r25, 0x0190
    3e9c:	8b 30       	cpi	r24, 0x0B	; 11
    3e9e:	91 05       	cpc	r25, r1
    3ea0:	58 f4       	brcc	.+22     	; 0x3eb8 <main+0x66>
			{
				LCD_clear();
    3ea2:	0e 94 bc 15 	call	0x2b78	; 0x2b78 <LCD_clear>
				LCD_writeString("STOP");
    3ea6:	80 e6       	ldi	r24, 0x60	; 96
    3ea8:	90 e0       	ldi	r25, 0x00	; 0
    3eaa:	0e 94 93 15 	call	0x2b26	; 0x2b26 <LCD_writeString>
				DCMOTOR_stop();
    3eae:	0e 94 84 09 	call	0x1308	; 0x1308 <DCMOTOR_stop>
				f4=1;
    3eb2:	81 e0       	ldi	r24, 0x01	; 1
    3eb4:	80 93 9b 01 	sts	0x019B, r24
			}
			if(f4==0)
    3eb8:	80 91 9b 01 	lds	r24, 0x019B
    3ebc:	88 23       	and	r24, r24
    3ebe:	11 f4       	brne	.+4      	; 0x3ec4 <main+0x72>
			{
		GoToNoObstacle();//if there was no obstacle found the car will continue moving
    3ec0:	0e 94 64 21 	call	0x42c8	; 0x42c8 <GoToNoObstacle>
{
		noObstecaleDirection();//a function that figures the best way for the car to take
}
f2=0;
//clearing the flags
		while(!f4)
    3ec4:	80 91 9b 01 	lds	r24, 0x019B
    3ec8:	88 23       	and	r24, r24
    3eca:	01 f3       	breq	.-64     	; 0x3e8c <main+0x3a>




}
		f4=0;//clearing the flags
    3ecc:	10 92 9b 01 	sts	0x019B, r1
    3ed0:	cd cf       	rjmp	.-102    	; 0x3e6c <main+0x1a>

00003ed2 <check_180Direct>:
		}

		}

void check_180Direct(void)
{
    3ed2:	df 93       	push	r29
    3ed4:	cf 93       	push	r28
    3ed6:	cd b7       	in	r28, 0x3d	; 61
    3ed8:	de b7       	in	r29, 0x3e	; 62
    3eda:	aa 97       	sbiw	r28, 0x2a	; 42
    3edc:	0f b6       	in	r0, 0x3f	; 63
    3ede:	f8 94       	cli
    3ee0:	de bf       	out	0x3e, r29	; 62
    3ee2:	0f be       	out	0x3f, r0	; 63
    3ee4:	cd bf       	out	0x3d, r28	; 61


	 SRVM_on(55);//straight
    3ee6:	87 e3       	ldi	r24, 0x37	; 55
    3ee8:	0e 94 c6 1a 	call	0x358c	; 0x358c <SRVM_on>
    3eec:	04 c0       	rjmp	.+8      	; 0x3ef6 <check_180Direct+0x24>


				while(!dist_str)
				{
					GetDistance(&dist_str);
    3eee:	81 e9       	ldi	r24, 0x91	; 145
    3ef0:	91 e0       	ldi	r25, 0x01	; 1
    3ef2:	0e 94 a5 1d 	call	0x3b4a	; 0x3b4a <GetDistance>


	 SRVM_on(55);//straight


				while(!dist_str)
    3ef6:	80 91 91 01 	lds	r24, 0x0191
    3efa:	90 91 92 01 	lds	r25, 0x0192
    3efe:	00 97       	sbiw	r24, 0x00	; 0
    3f00:	b1 f3       	breq	.-20     	; 0x3eee <check_180Direct+0x1c>
    3f02:	80 e0       	ldi	r24, 0x00	; 0
    3f04:	90 e0       	ldi	r25, 0x00	; 0
    3f06:	aa e7       	ldi	r26, 0x7A	; 122
    3f08:	b4 e4       	ldi	r27, 0x44	; 68
    3f0a:	8f a3       	std	Y+39, r24	; 0x27
    3f0c:	98 a7       	std	Y+40, r25	; 0x28
    3f0e:	a9 a7       	std	Y+41, r26	; 0x29
    3f10:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3f12:	6f a1       	ldd	r22, Y+39	; 0x27
    3f14:	78 a5       	ldd	r23, Y+40	; 0x28
    3f16:	89 a5       	ldd	r24, Y+41	; 0x29
    3f18:	9a a5       	ldd	r25, Y+42	; 0x2a
    3f1a:	20 e0       	ldi	r18, 0x00	; 0
    3f1c:	30 e0       	ldi	r19, 0x00	; 0
    3f1e:	4a e7       	ldi	r20, 0x7A	; 122
    3f20:	55 e4       	ldi	r21, 0x45	; 69
    3f22:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f26:	dc 01       	movw	r26, r24
    3f28:	cb 01       	movw	r24, r22
    3f2a:	8b a3       	std	Y+35, r24	; 0x23
    3f2c:	9c a3       	std	Y+36, r25	; 0x24
    3f2e:	ad a3       	std	Y+37, r26	; 0x25
    3f30:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3f32:	6b a1       	ldd	r22, Y+35	; 0x23
    3f34:	7c a1       	ldd	r23, Y+36	; 0x24
    3f36:	8d a1       	ldd	r24, Y+37	; 0x25
    3f38:	9e a1       	ldd	r25, Y+38	; 0x26
    3f3a:	20 e0       	ldi	r18, 0x00	; 0
    3f3c:	30 e0       	ldi	r19, 0x00	; 0
    3f3e:	40 e8       	ldi	r20, 0x80	; 128
    3f40:	5f e3       	ldi	r21, 0x3F	; 63
    3f42:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3f46:	88 23       	and	r24, r24
    3f48:	2c f4       	brge	.+10     	; 0x3f54 <check_180Direct+0x82>
		__ticks = 1;
    3f4a:	81 e0       	ldi	r24, 0x01	; 1
    3f4c:	90 e0       	ldi	r25, 0x00	; 0
    3f4e:	9a a3       	std	Y+34, r25	; 0x22
    3f50:	89 a3       	std	Y+33, r24	; 0x21
    3f52:	3f c0       	rjmp	.+126    	; 0x3fd2 <check_180Direct+0x100>
	else if (__tmp > 65535)
    3f54:	6b a1       	ldd	r22, Y+35	; 0x23
    3f56:	7c a1       	ldd	r23, Y+36	; 0x24
    3f58:	8d a1       	ldd	r24, Y+37	; 0x25
    3f5a:	9e a1       	ldd	r25, Y+38	; 0x26
    3f5c:	20 e0       	ldi	r18, 0x00	; 0
    3f5e:	3f ef       	ldi	r19, 0xFF	; 255
    3f60:	4f e7       	ldi	r20, 0x7F	; 127
    3f62:	57 e4       	ldi	r21, 0x47	; 71
    3f64:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3f68:	18 16       	cp	r1, r24
    3f6a:	4c f5       	brge	.+82     	; 0x3fbe <check_180Direct+0xec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3f6c:	6f a1       	ldd	r22, Y+39	; 0x27
    3f6e:	78 a5       	ldd	r23, Y+40	; 0x28
    3f70:	89 a5       	ldd	r24, Y+41	; 0x29
    3f72:	9a a5       	ldd	r25, Y+42	; 0x2a
    3f74:	20 e0       	ldi	r18, 0x00	; 0
    3f76:	30 e0       	ldi	r19, 0x00	; 0
    3f78:	40 e2       	ldi	r20, 0x20	; 32
    3f7a:	51 e4       	ldi	r21, 0x41	; 65
    3f7c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f80:	dc 01       	movw	r26, r24
    3f82:	cb 01       	movw	r24, r22
    3f84:	bc 01       	movw	r22, r24
    3f86:	cd 01       	movw	r24, r26
    3f88:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f8c:	dc 01       	movw	r26, r24
    3f8e:	cb 01       	movw	r24, r22
    3f90:	9a a3       	std	Y+34, r25	; 0x22
    3f92:	89 a3       	std	Y+33, r24	; 0x21
    3f94:	0f c0       	rjmp	.+30     	; 0x3fb4 <check_180Direct+0xe2>
    3f96:	80 e9       	ldi	r24, 0x90	; 144
    3f98:	91 e0       	ldi	r25, 0x01	; 1
    3f9a:	98 a3       	std	Y+32, r25	; 0x20
    3f9c:	8f 8f       	std	Y+31, r24	; 0x1f
    3f9e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3fa0:	98 a1       	ldd	r25, Y+32	; 0x20
    3fa2:	01 97       	sbiw	r24, 0x01	; 1
    3fa4:	f1 f7       	brne	.-4      	; 0x3fa2 <check_180Direct+0xd0>
    3fa6:	98 a3       	std	Y+32, r25	; 0x20
    3fa8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3faa:	89 a1       	ldd	r24, Y+33	; 0x21
    3fac:	9a a1       	ldd	r25, Y+34	; 0x22
    3fae:	01 97       	sbiw	r24, 0x01	; 1
    3fb0:	9a a3       	std	Y+34, r25	; 0x22
    3fb2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3fb4:	89 a1       	ldd	r24, Y+33	; 0x21
    3fb6:	9a a1       	ldd	r25, Y+34	; 0x22
    3fb8:	00 97       	sbiw	r24, 0x00	; 0
    3fba:	69 f7       	brne	.-38     	; 0x3f96 <check_180Direct+0xc4>
    3fbc:	14 c0       	rjmp	.+40     	; 0x3fe6 <check_180Direct+0x114>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3fbe:	6b a1       	ldd	r22, Y+35	; 0x23
    3fc0:	7c a1       	ldd	r23, Y+36	; 0x24
    3fc2:	8d a1       	ldd	r24, Y+37	; 0x25
    3fc4:	9e a1       	ldd	r25, Y+38	; 0x26
    3fc6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3fca:	dc 01       	movw	r26, r24
    3fcc:	cb 01       	movw	r24, r22
    3fce:	9a a3       	std	Y+34, r25	; 0x22
    3fd0:	89 a3       	std	Y+33, r24	; 0x21
    3fd2:	89 a1       	ldd	r24, Y+33	; 0x21
    3fd4:	9a a1       	ldd	r25, Y+34	; 0x22
    3fd6:	9e 8f       	std	Y+30, r25	; 0x1e
    3fd8:	8d 8f       	std	Y+29, r24	; 0x1d
    3fda:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3fdc:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3fde:	01 97       	sbiw	r24, 0x01	; 1
    3fe0:	f1 f7       	brne	.-4      	; 0x3fde <check_180Direct+0x10c>
    3fe2:	9e 8f       	std	Y+30, r25	; 0x1e
    3fe4:	8d 8f       	std	Y+29, r24	; 0x1d
				{
					GetDistance(&dist_str);
				}
				_delay_ms(1000);

					 SRVM_on(5);//right
    3fe6:	85 e0       	ldi	r24, 0x05	; 5
    3fe8:	0e 94 c6 1a 	call	0x358c	; 0x358c <SRVM_on>
    3fec:	04 c0       	rjmp	.+8      	; 0x3ff6 <check_180Direct+0x124>


					 while(!dist_righ)
					 			{
					 				GetDistance(&dist_righ);
    3fee:	83 e9       	ldi	r24, 0x93	; 147
    3ff0:	91 e0       	ldi	r25, 0x01	; 1
    3ff2:	0e 94 a5 1d 	call	0x3b4a	; 0x3b4a <GetDistance>
				_delay_ms(1000);

					 SRVM_on(5);//right


					 while(!dist_righ)
    3ff6:	80 91 93 01 	lds	r24, 0x0193
    3ffa:	90 91 94 01 	lds	r25, 0x0194
    3ffe:	00 97       	sbiw	r24, 0x00	; 0
    4000:	b1 f3       	breq	.-20     	; 0x3fee <check_180Direct+0x11c>
    4002:	80 e0       	ldi	r24, 0x00	; 0
    4004:	90 e0       	ldi	r25, 0x00	; 0
    4006:	aa e7       	ldi	r26, 0x7A	; 122
    4008:	b4 e4       	ldi	r27, 0x44	; 68
    400a:	89 8f       	std	Y+25, r24	; 0x19
    400c:	9a 8f       	std	Y+26, r25	; 0x1a
    400e:	ab 8f       	std	Y+27, r26	; 0x1b
    4010:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4012:	69 8d       	ldd	r22, Y+25	; 0x19
    4014:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4016:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4018:	9c 8d       	ldd	r25, Y+28	; 0x1c
    401a:	20 e0       	ldi	r18, 0x00	; 0
    401c:	30 e0       	ldi	r19, 0x00	; 0
    401e:	4a e7       	ldi	r20, 0x7A	; 122
    4020:	55 e4       	ldi	r21, 0x45	; 69
    4022:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4026:	dc 01       	movw	r26, r24
    4028:	cb 01       	movw	r24, r22
    402a:	8d 8b       	std	Y+21, r24	; 0x15
    402c:	9e 8b       	std	Y+22, r25	; 0x16
    402e:	af 8b       	std	Y+23, r26	; 0x17
    4030:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4032:	6d 89       	ldd	r22, Y+21	; 0x15
    4034:	7e 89       	ldd	r23, Y+22	; 0x16
    4036:	8f 89       	ldd	r24, Y+23	; 0x17
    4038:	98 8d       	ldd	r25, Y+24	; 0x18
    403a:	20 e0       	ldi	r18, 0x00	; 0
    403c:	30 e0       	ldi	r19, 0x00	; 0
    403e:	40 e8       	ldi	r20, 0x80	; 128
    4040:	5f e3       	ldi	r21, 0x3F	; 63
    4042:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4046:	88 23       	and	r24, r24
    4048:	2c f4       	brge	.+10     	; 0x4054 <check_180Direct+0x182>
		__ticks = 1;
    404a:	81 e0       	ldi	r24, 0x01	; 1
    404c:	90 e0       	ldi	r25, 0x00	; 0
    404e:	9c 8b       	std	Y+20, r25	; 0x14
    4050:	8b 8b       	std	Y+19, r24	; 0x13
    4052:	3f c0       	rjmp	.+126    	; 0x40d2 <check_180Direct+0x200>
	else if (__tmp > 65535)
    4054:	6d 89       	ldd	r22, Y+21	; 0x15
    4056:	7e 89       	ldd	r23, Y+22	; 0x16
    4058:	8f 89       	ldd	r24, Y+23	; 0x17
    405a:	98 8d       	ldd	r25, Y+24	; 0x18
    405c:	20 e0       	ldi	r18, 0x00	; 0
    405e:	3f ef       	ldi	r19, 0xFF	; 255
    4060:	4f e7       	ldi	r20, 0x7F	; 127
    4062:	57 e4       	ldi	r21, 0x47	; 71
    4064:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4068:	18 16       	cp	r1, r24
    406a:	4c f5       	brge	.+82     	; 0x40be <check_180Direct+0x1ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    406c:	69 8d       	ldd	r22, Y+25	; 0x19
    406e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4070:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4072:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4074:	20 e0       	ldi	r18, 0x00	; 0
    4076:	30 e0       	ldi	r19, 0x00	; 0
    4078:	40 e2       	ldi	r20, 0x20	; 32
    407a:	51 e4       	ldi	r21, 0x41	; 65
    407c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4080:	dc 01       	movw	r26, r24
    4082:	cb 01       	movw	r24, r22
    4084:	bc 01       	movw	r22, r24
    4086:	cd 01       	movw	r24, r26
    4088:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    408c:	dc 01       	movw	r26, r24
    408e:	cb 01       	movw	r24, r22
    4090:	9c 8b       	std	Y+20, r25	; 0x14
    4092:	8b 8b       	std	Y+19, r24	; 0x13
    4094:	0f c0       	rjmp	.+30     	; 0x40b4 <check_180Direct+0x1e2>
    4096:	80 e9       	ldi	r24, 0x90	; 144
    4098:	91 e0       	ldi	r25, 0x01	; 1
    409a:	9a 8b       	std	Y+18, r25	; 0x12
    409c:	89 8b       	std	Y+17, r24	; 0x11
    409e:	89 89       	ldd	r24, Y+17	; 0x11
    40a0:	9a 89       	ldd	r25, Y+18	; 0x12
    40a2:	01 97       	sbiw	r24, 0x01	; 1
    40a4:	f1 f7       	brne	.-4      	; 0x40a2 <check_180Direct+0x1d0>
    40a6:	9a 8b       	std	Y+18, r25	; 0x12
    40a8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    40aa:	8b 89       	ldd	r24, Y+19	; 0x13
    40ac:	9c 89       	ldd	r25, Y+20	; 0x14
    40ae:	01 97       	sbiw	r24, 0x01	; 1
    40b0:	9c 8b       	std	Y+20, r25	; 0x14
    40b2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    40b4:	8b 89       	ldd	r24, Y+19	; 0x13
    40b6:	9c 89       	ldd	r25, Y+20	; 0x14
    40b8:	00 97       	sbiw	r24, 0x00	; 0
    40ba:	69 f7       	brne	.-38     	; 0x4096 <check_180Direct+0x1c4>
    40bc:	14 c0       	rjmp	.+40     	; 0x40e6 <check_180Direct+0x214>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    40be:	6d 89       	ldd	r22, Y+21	; 0x15
    40c0:	7e 89       	ldd	r23, Y+22	; 0x16
    40c2:	8f 89       	ldd	r24, Y+23	; 0x17
    40c4:	98 8d       	ldd	r25, Y+24	; 0x18
    40c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    40ca:	dc 01       	movw	r26, r24
    40cc:	cb 01       	movw	r24, r22
    40ce:	9c 8b       	std	Y+20, r25	; 0x14
    40d0:	8b 8b       	std	Y+19, r24	; 0x13
    40d2:	8b 89       	ldd	r24, Y+19	; 0x13
    40d4:	9c 89       	ldd	r25, Y+20	; 0x14
    40d6:	98 8b       	std	Y+16, r25	; 0x10
    40d8:	8f 87       	std	Y+15, r24	; 0x0f
    40da:	8f 85       	ldd	r24, Y+15	; 0x0f
    40dc:	98 89       	ldd	r25, Y+16	; 0x10
    40de:	01 97       	sbiw	r24, 0x01	; 1
    40e0:	f1 f7       	brne	.-4      	; 0x40de <check_180Direct+0x20c>
    40e2:	98 8b       	std	Y+16, r25	; 0x10
    40e4:	8f 87       	std	Y+15, r24	; 0x0f
					 			{
					 				GetDistance(&dist_righ);
					 			}
					 _delay_ms(1000);

					 SRVM_on(105);//left
    40e6:	89 e6       	ldi	r24, 0x69	; 105
    40e8:	0e 94 c6 1a 	call	0x358c	; 0x358c <SRVM_on>
    40ec:	04 c0       	rjmp	.+8      	; 0x40f6 <check_180Direct+0x224>

									 while(!dist_left)
									 			{
									 				GetDistance(&dist_left);
    40ee:	85 e9       	ldi	r24, 0x95	; 149
    40f0:	91 e0       	ldi	r25, 0x01	; 1
    40f2:	0e 94 a5 1d 	call	0x3b4a	; 0x3b4a <GetDistance>
					 			}
					 _delay_ms(1000);

					 SRVM_on(105);//left

									 while(!dist_left)
    40f6:	80 91 95 01 	lds	r24, 0x0195
    40fa:	90 91 96 01 	lds	r25, 0x0196
    40fe:	00 97       	sbiw	r24, 0x00	; 0
    4100:	b1 f3       	breq	.-20     	; 0x40ee <check_180Direct+0x21c>
    4102:	80 e0       	ldi	r24, 0x00	; 0
    4104:	90 e0       	ldi	r25, 0x00	; 0
    4106:	aa e7       	ldi	r26, 0x7A	; 122
    4108:	b4 e4       	ldi	r27, 0x44	; 68
    410a:	8b 87       	std	Y+11, r24	; 0x0b
    410c:	9c 87       	std	Y+12, r25	; 0x0c
    410e:	ad 87       	std	Y+13, r26	; 0x0d
    4110:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4112:	6b 85       	ldd	r22, Y+11	; 0x0b
    4114:	7c 85       	ldd	r23, Y+12	; 0x0c
    4116:	8d 85       	ldd	r24, Y+13	; 0x0d
    4118:	9e 85       	ldd	r25, Y+14	; 0x0e
    411a:	20 e0       	ldi	r18, 0x00	; 0
    411c:	30 e0       	ldi	r19, 0x00	; 0
    411e:	4a e7       	ldi	r20, 0x7A	; 122
    4120:	55 e4       	ldi	r21, 0x45	; 69
    4122:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4126:	dc 01       	movw	r26, r24
    4128:	cb 01       	movw	r24, r22
    412a:	8f 83       	std	Y+7, r24	; 0x07
    412c:	98 87       	std	Y+8, r25	; 0x08
    412e:	a9 87       	std	Y+9, r26	; 0x09
    4130:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4132:	6f 81       	ldd	r22, Y+7	; 0x07
    4134:	78 85       	ldd	r23, Y+8	; 0x08
    4136:	89 85       	ldd	r24, Y+9	; 0x09
    4138:	9a 85       	ldd	r25, Y+10	; 0x0a
    413a:	20 e0       	ldi	r18, 0x00	; 0
    413c:	30 e0       	ldi	r19, 0x00	; 0
    413e:	40 e8       	ldi	r20, 0x80	; 128
    4140:	5f e3       	ldi	r21, 0x3F	; 63
    4142:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4146:	88 23       	and	r24, r24
    4148:	2c f4       	brge	.+10     	; 0x4154 <check_180Direct+0x282>
		__ticks = 1;
    414a:	81 e0       	ldi	r24, 0x01	; 1
    414c:	90 e0       	ldi	r25, 0x00	; 0
    414e:	9e 83       	std	Y+6, r25	; 0x06
    4150:	8d 83       	std	Y+5, r24	; 0x05
    4152:	3f c0       	rjmp	.+126    	; 0x41d2 <check_180Direct+0x300>
	else if (__tmp > 65535)
    4154:	6f 81       	ldd	r22, Y+7	; 0x07
    4156:	78 85       	ldd	r23, Y+8	; 0x08
    4158:	89 85       	ldd	r24, Y+9	; 0x09
    415a:	9a 85       	ldd	r25, Y+10	; 0x0a
    415c:	20 e0       	ldi	r18, 0x00	; 0
    415e:	3f ef       	ldi	r19, 0xFF	; 255
    4160:	4f e7       	ldi	r20, 0x7F	; 127
    4162:	57 e4       	ldi	r21, 0x47	; 71
    4164:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4168:	18 16       	cp	r1, r24
    416a:	4c f5       	brge	.+82     	; 0x41be <check_180Direct+0x2ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    416c:	6b 85       	ldd	r22, Y+11	; 0x0b
    416e:	7c 85       	ldd	r23, Y+12	; 0x0c
    4170:	8d 85       	ldd	r24, Y+13	; 0x0d
    4172:	9e 85       	ldd	r25, Y+14	; 0x0e
    4174:	20 e0       	ldi	r18, 0x00	; 0
    4176:	30 e0       	ldi	r19, 0x00	; 0
    4178:	40 e2       	ldi	r20, 0x20	; 32
    417a:	51 e4       	ldi	r21, 0x41	; 65
    417c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4180:	dc 01       	movw	r26, r24
    4182:	cb 01       	movw	r24, r22
    4184:	bc 01       	movw	r22, r24
    4186:	cd 01       	movw	r24, r26
    4188:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    418c:	dc 01       	movw	r26, r24
    418e:	cb 01       	movw	r24, r22
    4190:	9e 83       	std	Y+6, r25	; 0x06
    4192:	8d 83       	std	Y+5, r24	; 0x05
    4194:	0f c0       	rjmp	.+30     	; 0x41b4 <check_180Direct+0x2e2>
    4196:	80 e9       	ldi	r24, 0x90	; 144
    4198:	91 e0       	ldi	r25, 0x01	; 1
    419a:	9c 83       	std	Y+4, r25	; 0x04
    419c:	8b 83       	std	Y+3, r24	; 0x03
    419e:	8b 81       	ldd	r24, Y+3	; 0x03
    41a0:	9c 81       	ldd	r25, Y+4	; 0x04
    41a2:	01 97       	sbiw	r24, 0x01	; 1
    41a4:	f1 f7       	brne	.-4      	; 0x41a2 <check_180Direct+0x2d0>
    41a6:	9c 83       	std	Y+4, r25	; 0x04
    41a8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    41aa:	8d 81       	ldd	r24, Y+5	; 0x05
    41ac:	9e 81       	ldd	r25, Y+6	; 0x06
    41ae:	01 97       	sbiw	r24, 0x01	; 1
    41b0:	9e 83       	std	Y+6, r25	; 0x06
    41b2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    41b4:	8d 81       	ldd	r24, Y+5	; 0x05
    41b6:	9e 81       	ldd	r25, Y+6	; 0x06
    41b8:	00 97       	sbiw	r24, 0x00	; 0
    41ba:	69 f7       	brne	.-38     	; 0x4196 <check_180Direct+0x2c4>
    41bc:	14 c0       	rjmp	.+40     	; 0x41e6 <check_180Direct+0x314>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    41be:	6f 81       	ldd	r22, Y+7	; 0x07
    41c0:	78 85       	ldd	r23, Y+8	; 0x08
    41c2:	89 85       	ldd	r24, Y+9	; 0x09
    41c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    41c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    41ca:	dc 01       	movw	r26, r24
    41cc:	cb 01       	movw	r24, r22
    41ce:	9e 83       	std	Y+6, r25	; 0x06
    41d0:	8d 83       	std	Y+5, r24	; 0x05
    41d2:	8d 81       	ldd	r24, Y+5	; 0x05
    41d4:	9e 81       	ldd	r25, Y+6	; 0x06
    41d6:	9a 83       	std	Y+2, r25	; 0x02
    41d8:	89 83       	std	Y+1, r24	; 0x01
    41da:	89 81       	ldd	r24, Y+1	; 0x01
    41dc:	9a 81       	ldd	r25, Y+2	; 0x02
    41de:	01 97       	sbiw	r24, 0x01	; 1
    41e0:	f1 f7       	brne	.-4      	; 0x41de <check_180Direct+0x30c>
    41e2:	9a 83       	std	Y+2, r25	; 0x02
    41e4:	89 83       	std	Y+1, r24	; 0x01
									 			{
									 				GetDistance(&dist_left);
									 			}
									 _delay_ms(1000);

									 SRVM_on(55);
    41e6:	87 e3       	ldi	r24, 0x37	; 55
    41e8:	0e 94 c6 1a 	call	0x358c	; 0x358c <SRVM_on>
									 f1=1;
    41ec:	81 e0       	ldi	r24, 0x01	; 1
    41ee:	80 93 99 01 	sts	0x0199, r24
}
    41f2:	aa 96       	adiw	r28, 0x2a	; 42
    41f4:	0f b6       	in	r0, 0x3f	; 63
    41f6:	f8 94       	cli
    41f8:	de bf       	out	0x3e, r29	; 62
    41fa:	0f be       	out	0x3f, r0	; 63
    41fc:	cd bf       	out	0x3d, r28	; 61
    41fe:	cf 91       	pop	r28
    4200:	df 91       	pop	r29
    4202:	08 95       	ret

00004204 <noObstecaleDirection>:

void noObstecaleDirection(void)
{
    4204:	df 93       	push	r29
    4206:	cf 93       	push	r28
    4208:	cd b7       	in	r28, 0x3d	; 61
    420a:	de b7       	in	r29, 0x3e	; 62
//this function gets the max distance right,left and straight from the car and if the 3 directions is less than 15 cm it will make a u-turn

	  if (dist_str >=dist_righ && dist_str >= dist_left)
    420c:	20 91 91 01 	lds	r18, 0x0191
    4210:	30 91 92 01 	lds	r19, 0x0192
    4214:	80 91 93 01 	lds	r24, 0x0193
    4218:	90 91 94 01 	lds	r25, 0x0194
    421c:	28 17       	cp	r18, r24
    421e:	39 07       	cpc	r19, r25
    4220:	d0 f0       	brcs	.+52     	; 0x4256 <noObstecaleDirection+0x52>
    4222:	20 91 91 01 	lds	r18, 0x0191
    4226:	30 91 92 01 	lds	r19, 0x0192
    422a:	80 91 95 01 	lds	r24, 0x0195
    422e:	90 91 96 01 	lds	r25, 0x0196
    4232:	28 17       	cp	r18, r24
    4234:	39 07       	cpc	r19, r25
    4236:	78 f0       	brcs	.+30     	; 0x4256 <noObstecaleDirection+0x52>
	  {
		  MAX='S';
    4238:	83 e5       	ldi	r24, 0x53	; 83
    423a:	90 e0       	ldi	r25, 0x00	; 0
    423c:	90 93 9d 01 	sts	0x019D, r25
    4240:	80 93 9c 01 	sts	0x019C, r24
		  max_dist=dist_str;
    4244:	80 91 91 01 	lds	r24, 0x0191
    4248:	90 91 92 01 	lds	r25, 0x0192
    424c:	90 93 98 01 	sts	0x0198, r25
    4250:	80 93 97 01 	sts	0x0197, r24
    4254:	33 c0       	rjmp	.+102    	; 0x42bc <noObstecaleDirection+0xb8>
	  }
	    else if (dist_righ >= dist_str && dist_righ >= dist_left)
    4256:	20 91 93 01 	lds	r18, 0x0193
    425a:	30 91 94 01 	lds	r19, 0x0194
    425e:	80 91 91 01 	lds	r24, 0x0191
    4262:	90 91 92 01 	lds	r25, 0x0192
    4266:	28 17       	cp	r18, r24
    4268:	39 07       	cpc	r19, r25
    426a:	d0 f0       	brcs	.+52     	; 0x42a0 <noObstecaleDirection+0x9c>
    426c:	20 91 93 01 	lds	r18, 0x0193
    4270:	30 91 94 01 	lds	r19, 0x0194
    4274:	80 91 95 01 	lds	r24, 0x0195
    4278:	90 91 96 01 	lds	r25, 0x0196
    427c:	28 17       	cp	r18, r24
    427e:	39 07       	cpc	r19, r25
    4280:	78 f0       	brcs	.+30     	; 0x42a0 <noObstecaleDirection+0x9c>
	    {
	    	MAX='R';
    4282:	82 e5       	ldi	r24, 0x52	; 82
    4284:	90 e0       	ldi	r25, 0x00	; 0
    4286:	90 93 9d 01 	sts	0x019D, r25
    428a:	80 93 9c 01 	sts	0x019C, r24
	    	max_dist=dist_righ;
    428e:	80 91 93 01 	lds	r24, 0x0193
    4292:	90 91 94 01 	lds	r25, 0x0194
    4296:	90 93 98 01 	sts	0x0198, r25
    429a:	80 93 97 01 	sts	0x0197, r24
    429e:	0e c0       	rjmp	.+28     	; 0x42bc <noObstecaleDirection+0xb8>
	    }
	    else
	    {
	    	MAX='L';
    42a0:	8c e4       	ldi	r24, 0x4C	; 76
    42a2:	90 e0       	ldi	r25, 0x00	; 0
    42a4:	90 93 9d 01 	sts	0x019D, r25
    42a8:	80 93 9c 01 	sts	0x019C, r24
	    	max_dist=dist_left;
    42ac:	80 91 95 01 	lds	r24, 0x0195
    42b0:	90 91 96 01 	lds	r25, 0x0196
    42b4:	90 93 98 01 	sts	0x0198, r25
    42b8:	80 93 97 01 	sts	0x0197, r24
	    }


	  f2=1;
    42bc:	81 e0       	ldi	r24, 0x01	; 1
    42be:	80 93 9a 01 	sts	0x019A, r24
}
    42c2:	cf 91       	pop	r28
    42c4:	df 91       	pop	r29
    42c6:	08 95       	ret

000042c8 <GoToNoObstacle>:

void GoToNoObstacle(void)
{
    42c8:	df 93       	push	r29
    42ca:	cf 93       	push	r28
    42cc:	00 d0       	rcall	.+0      	; 0x42ce <GoToNoObstacle+0x6>
    42ce:	cd b7       	in	r28, 0x3d	; 61
    42d0:	de b7       	in	r29, 0x3e	; 62

	switch (MAX)
    42d2:	80 91 9c 01 	lds	r24, 0x019C
    42d6:	90 91 9d 01 	lds	r25, 0x019D
    42da:	9a 83       	std	Y+2, r25	; 0x02
    42dc:	89 83       	std	Y+1, r24	; 0x01
    42de:	89 81       	ldd	r24, Y+1	; 0x01
    42e0:	9a 81       	ldd	r25, Y+2	; 0x02
    42e2:	82 35       	cpi	r24, 0x52	; 82
    42e4:	91 05       	cpc	r25, r1
    42e6:	a9 f0       	breq	.+42     	; 0x4312 <GoToNoObstacle+0x4a>
    42e8:	89 81       	ldd	r24, Y+1	; 0x01
    42ea:	9a 81       	ldd	r25, Y+2	; 0x02
    42ec:	83 35       	cpi	r24, 0x53	; 83
    42ee:	91 05       	cpc	r25, r1
    42f0:	31 f0       	breq	.+12     	; 0x42fe <GoToNoObstacle+0x36>
    42f2:	89 81       	ldd	r24, Y+1	; 0x01
    42f4:	9a 81       	ldd	r25, Y+2	; 0x02
    42f6:	8c 34       	cpi	r24, 0x4C	; 76
    42f8:	91 05       	cpc	r25, r1
    42fa:	b9 f0       	breq	.+46     	; 0x432a <GoToNoObstacle+0x62>
    42fc:	21 c0       	rjmp	.+66     	; 0x4340 <GoToNoObstacle+0x78>
				{
				case 'S'://straight
				{
					//flag if uss found a distance less than 30cm if flag==1 break
					LCD_clear();
    42fe:	0e 94 bc 15 	call	0x2b78	; 0x2b78 <LCD_clear>
					LCD_writeString("Straight");
    4302:	85 e6       	ldi	r24, 0x65	; 101
    4304:	90 e0       	ldi	r25, 0x00	; 0
    4306:	0e 94 93 15 	call	0x2b26	; 0x2b26 <LCD_writeString>
						 DCMOTOR_start(forward);
    430a:	81 e0       	ldi	r24, 0x01	; 1
    430c:	0e 94 da 08 	call	0x11b4	; 0x11b4 <DCMOTOR_start>
    4310:	17 c0       	rjmp	.+46     	; 0x4340 <GoToNoObstacle+0x78>

					break;
				}
				case 'R'://right
				{//flag if uss found a distance less than 30cm if flag==1 break
					LCD_clear();
    4312:	0e 94 bc 15 	call	0x2b78	; 0x2b78 <LCD_clear>
					LCD_writeString("Right");
    4316:	8e e6       	ldi	r24, 0x6E	; 110
    4318:	90 e0       	ldi	r25, 0x00	; 0
    431a:	0e 94 93 15 	call	0x2b26	; 0x2b26 <LCD_writeString>
		                      DCMOTOR_right();
    431e:	0e 94 c7 09 	call	0x138e	; 0x138e <DCMOTOR_right>

		                       DCMOTOR_start(forward);
    4322:	81 e0       	ldi	r24, 0x01	; 1
    4324:	0e 94 da 08 	call	0x11b4	; 0x11b4 <DCMOTOR_start>
    4328:	0b c0       	rjmp	.+22     	; 0x4340 <GoToNoObstacle+0x78>

					break;
				}
				case 'L'://left
				{//flag if uss found a distance less than 30cm if flag==1 break
					LCD_clear();
    432a:	0e 94 bc 15 	call	0x2b78	; 0x2b78 <LCD_clear>
					LCD_writeString("Left");
    432e:	84 e7       	ldi	r24, 0x74	; 116
    4330:	90 e0       	ldi	r25, 0x00	; 0
    4332:	0e 94 93 15 	call	0x2b26	; 0x2b26 <LCD_writeString>
						DCMOTOR_left();
    4336:	0e 94 56 0a 	call	0x14ac	; 0x14ac <DCMOTOR_left>

						 DCMOTOR_start(forward);
    433a:	81 e0       	ldi	r24, 0x01	; 1
    433c:	0e 94 da 08 	call	0x11b4	; 0x11b4 <DCMOTOR_start>
				}



				}
MAX=0;
    4340:	10 92 9d 01 	sts	0x019D, r1
    4344:	10 92 9c 01 	sts	0x019C, r1
dist_str = 0;
    4348:	10 92 92 01 	sts	0x0192, r1
    434c:	10 92 91 01 	sts	0x0191, r1
dist_righ = 0;
    4350:	10 92 94 01 	sts	0x0194, r1
    4354:	10 92 93 01 	sts	0x0193, r1
dist_left = 0;
    4358:	10 92 96 01 	sts	0x0196, r1
    435c:	10 92 95 01 	sts	0x0195, r1
max_dist=0;
    4360:	10 92 98 01 	sts	0x0198, r1
    4364:	10 92 97 01 	sts	0x0197, r1

}
    4368:	0f 90       	pop	r0
    436a:	0f 90       	pop	r0
    436c:	cf 91       	pop	r28
    436e:	df 91       	pop	r29
    4370:	08 95       	ret

00004372 <__udivmodsi4>:
    4372:	a1 e2       	ldi	r26, 0x21	; 33
    4374:	1a 2e       	mov	r1, r26
    4376:	aa 1b       	sub	r26, r26
    4378:	bb 1b       	sub	r27, r27
    437a:	fd 01       	movw	r30, r26
    437c:	0d c0       	rjmp	.+26     	; 0x4398 <__udivmodsi4_ep>

0000437e <__udivmodsi4_loop>:
    437e:	aa 1f       	adc	r26, r26
    4380:	bb 1f       	adc	r27, r27
    4382:	ee 1f       	adc	r30, r30
    4384:	ff 1f       	adc	r31, r31
    4386:	a2 17       	cp	r26, r18
    4388:	b3 07       	cpc	r27, r19
    438a:	e4 07       	cpc	r30, r20
    438c:	f5 07       	cpc	r31, r21
    438e:	20 f0       	brcs	.+8      	; 0x4398 <__udivmodsi4_ep>
    4390:	a2 1b       	sub	r26, r18
    4392:	b3 0b       	sbc	r27, r19
    4394:	e4 0b       	sbc	r30, r20
    4396:	f5 0b       	sbc	r31, r21

00004398 <__udivmodsi4_ep>:
    4398:	66 1f       	adc	r22, r22
    439a:	77 1f       	adc	r23, r23
    439c:	88 1f       	adc	r24, r24
    439e:	99 1f       	adc	r25, r25
    43a0:	1a 94       	dec	r1
    43a2:	69 f7       	brne	.-38     	; 0x437e <__udivmodsi4_loop>
    43a4:	60 95       	com	r22
    43a6:	70 95       	com	r23
    43a8:	80 95       	com	r24
    43aa:	90 95       	com	r25
    43ac:	9b 01       	movw	r18, r22
    43ae:	ac 01       	movw	r20, r24
    43b0:	bd 01       	movw	r22, r26
    43b2:	cf 01       	movw	r24, r30
    43b4:	08 95       	ret

000043b6 <__prologue_saves__>:
    43b6:	2f 92       	push	r2
    43b8:	3f 92       	push	r3
    43ba:	4f 92       	push	r4
    43bc:	5f 92       	push	r5
    43be:	6f 92       	push	r6
    43c0:	7f 92       	push	r7
    43c2:	8f 92       	push	r8
    43c4:	9f 92       	push	r9
    43c6:	af 92       	push	r10
    43c8:	bf 92       	push	r11
    43ca:	cf 92       	push	r12
    43cc:	df 92       	push	r13
    43ce:	ef 92       	push	r14
    43d0:	ff 92       	push	r15
    43d2:	0f 93       	push	r16
    43d4:	1f 93       	push	r17
    43d6:	cf 93       	push	r28
    43d8:	df 93       	push	r29
    43da:	cd b7       	in	r28, 0x3d	; 61
    43dc:	de b7       	in	r29, 0x3e	; 62
    43de:	ca 1b       	sub	r28, r26
    43e0:	db 0b       	sbc	r29, r27
    43e2:	0f b6       	in	r0, 0x3f	; 63
    43e4:	f8 94       	cli
    43e6:	de bf       	out	0x3e, r29	; 62
    43e8:	0f be       	out	0x3f, r0	; 63
    43ea:	cd bf       	out	0x3d, r28	; 61
    43ec:	09 94       	ijmp

000043ee <__epilogue_restores__>:
    43ee:	2a 88       	ldd	r2, Y+18	; 0x12
    43f0:	39 88       	ldd	r3, Y+17	; 0x11
    43f2:	48 88       	ldd	r4, Y+16	; 0x10
    43f4:	5f 84       	ldd	r5, Y+15	; 0x0f
    43f6:	6e 84       	ldd	r6, Y+14	; 0x0e
    43f8:	7d 84       	ldd	r7, Y+13	; 0x0d
    43fa:	8c 84       	ldd	r8, Y+12	; 0x0c
    43fc:	9b 84       	ldd	r9, Y+11	; 0x0b
    43fe:	aa 84       	ldd	r10, Y+10	; 0x0a
    4400:	b9 84       	ldd	r11, Y+9	; 0x09
    4402:	c8 84       	ldd	r12, Y+8	; 0x08
    4404:	df 80       	ldd	r13, Y+7	; 0x07
    4406:	ee 80       	ldd	r14, Y+6	; 0x06
    4408:	fd 80       	ldd	r15, Y+5	; 0x05
    440a:	0c 81       	ldd	r16, Y+4	; 0x04
    440c:	1b 81       	ldd	r17, Y+3	; 0x03
    440e:	aa 81       	ldd	r26, Y+2	; 0x02
    4410:	b9 81       	ldd	r27, Y+1	; 0x01
    4412:	ce 0f       	add	r28, r30
    4414:	d1 1d       	adc	r29, r1
    4416:	0f b6       	in	r0, 0x3f	; 63
    4418:	f8 94       	cli
    441a:	de bf       	out	0x3e, r29	; 62
    441c:	0f be       	out	0x3f, r0	; 63
    441e:	cd bf       	out	0x3d, r28	; 61
    4420:	ed 01       	movw	r28, r26
    4422:	08 95       	ret

00004424 <_exit>:
    4424:	f8 94       	cli

00004426 <__stop_program>:
    4426:	ff cf       	rjmp	.-2      	; 0x4426 <__stop_program>
